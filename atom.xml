<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Northpark博客</title>
  <subtitle>Today does not walk, will have to run tomorrow.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://liuhouer.github.io/"/>
  <updated>2018-01-25T07:55:32.000Z</updated>
  <id>http://liuhouer.github.io/</id>
  
  <author>
    <name>Bruce</name>
    <email>zhangyang.z@icloud.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java接收邮件的探索之旅</title>
    <link href="http://liuhouer.github.io/2018/01/25/java%E6%8E%A5%E6%94%B6%E9%82%AE%E4%BB%B6%E7%9A%84%E6%8E%A2%E7%B4%A2%E4%B9%8B%E6%97%85/"/>
    <id>http://liuhouer.github.io/2018/01/25/java接收邮件的探索之旅/</id>
    <published>2018-01-24T16:00:00.000Z</published>
    <updated>2018-01-25T07:55:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>场景：目前需要定时收取<strong>某个账户</strong>的<strong>未读</strong>邮件，保存到<strong>elasticsearch doc</strong>中去。</p>
<blockquote>
<p>使用javaMail收邮件主要有两种协议，一种是pop3，一种是imap。这两种协议都可以用来收邮件，但是在其中的处理上是有区别的。pop3是不支持判断邮件是否为已读的，也就是说你不能直接从收件箱里面取到未读邮件，这需要自己进行判断，然而imap就提供了这样的功能，使用imap时可以很轻松的判断该邮件是否为已读或未读或其他。<br>由此看来，pop3不适合我的需求【通过每次检索全部，然后判断subject也可以实现，不过每次都需要遍历对比，比较麻烦】<br>那么我就用imap协议来收取了，pop3和imap只是配置email的url有点区别 其他地方是一样的</p>
</blockquote>
<p><em>pop3和imap主要区别就是能否判断邮件状态的问题，其他的操作都差不多.</em></p>
<h2 id="准备工作："><a href="#准备工作：" class="headerlink" title="准备工作："></a>准备工作：</h2><h3 id="邮箱设置打开pop3、imap、smtp收发协议"><a href="#邮箱设置打开pop3、imap、smtp收发协议" class="headerlink" title="邮箱设置打开pop3、imap、smtp收发协议"></a>邮箱设置打开pop3、imap、smtp收发协议</h3><p>去你的126|163|qq邮箱 打开设置-pop3 如图<br>注意重点：</p>
<ul>
<li><strong>全部接收</strong>，不然30天以前的收不到还以为代码有问题</li>
<li>配置<strong>授权码</strong>，目前163和qq邮箱都是<strong>授权码形式</strong>，代码里的password位置填写的都是<strong>授权码</strong>而<strong>不是邮箱密码</strong>哦<br><img src="http://7xpfpd.com1.z0.glb.clouddn.com/pop3setting.png" alt="enter description here"><h3 id="协议的端口和协议规则"><a href="#协议的端口和协议规则" class="headerlink" title="协议的端口和协议规则"></a>协议的端口和协议规则</h3>//协议的内容端口等区别，对应关系如图：<br><img src="http://7xpfpd.com1.z0.glb.clouddn.com/pop3%20port.png" alt="enter description here"></li>
</ul>
<a id="more"></a>
<h2 id="具体的实现代码"><a href="#具体的实现代码" class="headerlink" title="具体的实现代码"></a>具体的实现代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.northpark.utils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</div><div class="line"><span class="keyword">import</span> java.io.BufferedOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.FileOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"><span class="keyword">import</span> java.util.Properties;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.mail.BodyPart;</div><div class="line"><span class="keyword">import</span> javax.mail.Flags;</div><div class="line"><span class="keyword">import</span> javax.mail.Folder;</div><div class="line"><span class="keyword">import</span> javax.mail.Message;</div><div class="line"><span class="keyword">import</span> javax.mail.MessagingException;</div><div class="line"><span class="keyword">import</span> javax.mail.Multipart;</div><div class="line"><span class="keyword">import</span> javax.mail.Part;</div><div class="line"><span class="keyword">import</span> javax.mail.Session;</div><div class="line"><span class="keyword">import</span> javax.mail.Store;</div><div class="line"><span class="keyword">import</span> javax.mail.URLName;</div><div class="line"><span class="keyword">import</span> javax.mail.internet.InternetAddress;</div><div class="line"><span class="keyword">import</span> javax.mail.internet.MimeMessage;</div><div class="line"><span class="keyword">import</span> javax.mail.internet.MimeUtility;   </div><div class="line">  </div><div class="line"><span class="comment">/**  </span></div><div class="line">* <span class="doctag">@author</span> github.com/liuhouer</div><div class="line">* @有一封邮件就需要建立一个ReciveMail对象  </div><div class="line">*/  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailReceive</span> </span>&#123;   </div><div class="line">    <span class="keyword">private</span> MimeMessage mimeMessage = <span class="keyword">null</span>;   </div><div class="line">    <span class="keyword">private</span> String saveAttachPath = <span class="string">""</span>; <span class="comment">//附件下载后的存放目录   </span></div><div class="line">    <span class="keyword">private</span> StringBuffer bodytext = <span class="keyword">new</span> StringBuffer();<span class="comment">//存放邮件内容   </span></div><div class="line">    <span class="keyword">private</span> String dateformat = <span class="string">"yy-MM-dd HH:mm"</span>; <span class="comment">//默认的日前显示格式   </span></div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MailReceive</span><span class="params">(MimeMessage mimeMessage)</span> </span>&#123;   </div><div class="line">        <span class="keyword">this</span>.mimeMessage = mimeMessage;   </div><div class="line">    &#125;   </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMimeMessage</span><span class="params">(MimeMessage mimeMessage)</span> </span>&#123;   </div><div class="line">        <span class="keyword">this</span>.mimeMessage = mimeMessage;   </div><div class="line">    &#125;   </div><div class="line">  </div><div class="line">    <span class="comment">/**  </span></div><div class="line">     * 获得发件人的地址和姓名  </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFrom</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;   </div><div class="line">        InternetAddress address[] = (InternetAddress[]) mimeMessage.getFrom();   </div><div class="line">        String from = address[<span class="number">0</span>].getAddress();   </div><div class="line">        <span class="keyword">if</span> (from == <span class="keyword">null</span>)   </div><div class="line">            from = <span class="string">""</span>;   </div><div class="line">        String personal = address[<span class="number">0</span>].getPersonal();   </div><div class="line">        <span class="keyword">if</span> (personal == <span class="keyword">null</span>)   </div><div class="line">            personal = <span class="string">""</span>;   </div><div class="line">        String fromaddr = personal + <span class="string">"&lt;"</span> + from + <span class="string">"&gt;"</span>;   </div><div class="line">        <span class="keyword">return</span> fromaddr;   </div><div class="line">    &#125;   </div><div class="line">  </div><div class="line">    <span class="comment">/**  </span></div><div class="line">     * 获得邮件的收件人，抄送，和密送的地址和姓名，根据所传递的参数的不同 "to"----收件人 "cc"---抄送人地址 "bcc"---密送人地址  </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMailAddress</span><span class="params">(String type)</span> <span class="keyword">throws</span> Exception </span>&#123;   </div><div class="line">        String mailaddr = <span class="string">""</span>;   </div><div class="line">        String addtype = type.toUpperCase();   </div><div class="line">        InternetAddress[] address = <span class="keyword">null</span>;   </div><div class="line">        <span class="keyword">if</span> (addtype.equals(<span class="string">"TO"</span>) || addtype.equals(<span class="string">"CC"</span>)|| addtype.equals(<span class="string">"BCC"</span>)) &#123;   </div><div class="line">            <span class="keyword">if</span> (addtype.equals(<span class="string">"TO"</span>)) &#123;   </div><div class="line">                address = (InternetAddress[]) mimeMessage.getRecipients(Message.RecipientType.TO);   </div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (addtype.equals(<span class="string">"CC"</span>)) &#123;   </div><div class="line">                address = (InternetAddress[]) mimeMessage.getRecipients(Message.RecipientType.CC);   </div><div class="line">            &#125; <span class="keyword">else</span> &#123;   </div><div class="line">                address = (InternetAddress[]) mimeMessage.getRecipients(Message.RecipientType.BCC);   </div><div class="line">            &#125;   </div><div class="line">            <span class="keyword">if</span> (address != <span class="keyword">null</span>) &#123;   </div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; address.length; i++) &#123;   </div><div class="line">                    String email = address[i].getAddress();   </div><div class="line">                    <span class="keyword">if</span> (email == <span class="keyword">null</span>)   </div><div class="line">                        email = <span class="string">""</span>;   </div><div class="line">                    <span class="keyword">else</span> &#123;   </div><div class="line">                        email = MimeUtility.decodeText(email);   </div><div class="line">                    &#125;   </div><div class="line">                    String personal = address[i].getPersonal();   </div><div class="line">                    <span class="keyword">if</span> (personal == <span class="keyword">null</span>)   </div><div class="line">                        personal = <span class="string">""</span>;   </div><div class="line">                    <span class="keyword">else</span> &#123;   </div><div class="line">                        personal = MimeUtility.decodeText(personal);   </div><div class="line">                    &#125;   </div><div class="line">                    String compositeto = personal + <span class="string">"&lt;"</span> + email + <span class="string">"&gt;"</span>;   </div><div class="line">                    mailaddr += <span class="string">","</span> + compositeto;   </div><div class="line">                &#125;   </div><div class="line">                mailaddr = mailaddr.substring(<span class="number">1</span>);   </div><div class="line">            &#125;   </div><div class="line">        &#125; <span class="keyword">else</span> &#123;   </div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"Error emailaddr type!"</span>);   </div><div class="line">        &#125;   </div><div class="line">        <span class="keyword">return</span> mailaddr;   </div><div class="line">    &#125;   </div><div class="line">  </div><div class="line">    <span class="comment">/**  </span></div><div class="line">     * 获得邮件主题  </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSubject</span><span class="params">()</span> <span class="keyword">throws</span> MessagingException </span>&#123;   </div><div class="line">        String subject = <span class="string">""</span>;   </div><div class="line">        <span class="keyword">try</span> &#123;   </div><div class="line">            subject = MimeUtility.decodeText(mimeMessage.getSubject());   </div><div class="line">            <span class="keyword">if</span> (subject == <span class="keyword">null</span>)   </div><div class="line">                subject = <span class="string">""</span>;   </div><div class="line">        &#125; <span class="keyword">catch</span> (Exception exce) &#123;&#125;   </div><div class="line">        <span class="keyword">return</span> subject;   </div><div class="line">    &#125;   </div><div class="line">  </div><div class="line">    <span class="comment">/**  </span></div><div class="line">     * 获得邮件发送日期  </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSentDate</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;   </div><div class="line">        Date sentdate = mimeMessage.getSentDate();   </div><div class="line">        SimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(dateformat);   </div><div class="line">        <span class="keyword">return</span> format.format(sentdate);   </div><div class="line">    &#125;   </div><div class="line">  </div><div class="line">    <span class="comment">/**  </span></div><div class="line">     * 获得邮件正文内容  </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBodyText</span><span class="params">()</span> </span>&#123;   </div><div class="line">        <span class="keyword">return</span> bodytext.toString();   </div><div class="line">    &#125;   </div><div class="line">  </div><div class="line">    <span class="comment">/**  </span></div><div class="line">     * 解析邮件，把得到的邮件内容保存到一个StringBuffer对象中，解析邮件 主要是根据MimeType类型的不同执行不同的操作，一步一步的解析  </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getMailContent</span><span class="params">(Part part)</span> <span class="keyword">throws</span> Exception </span>&#123;   </div><div class="line">        String contenttype = part.getContentType();   </div><div class="line">        <span class="keyword">int</span> nameindex = contenttype.indexOf(<span class="string">"name"</span>);   </div><div class="line">        <span class="keyword">boolean</span> conname = <span class="keyword">false</span>;   </div><div class="line">        <span class="keyword">if</span> (nameindex != -<span class="number">1</span>)   </div><div class="line">            conname = <span class="keyword">true</span>;   </div><div class="line">        System.out.println(<span class="string">"CONTENTTYPE: "</span> + contenttype);   </div><div class="line">        <span class="keyword">if</span> (part.isMimeType(<span class="string">"text/plain"</span>) &amp;&amp; !conname) &#123;   </div><div class="line">            bodytext.append((String) part.getContent());   </div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (part.isMimeType(<span class="string">"text/html"</span>) &amp;&amp; !conname) &#123;   </div><div class="line">            bodytext.append((String) part.getContent());   </div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (part.isMimeType(<span class="string">"multipart/*"</span>)) &#123;   </div><div class="line">            Multipart multipart = (Multipart) part.getContent();   </div><div class="line">            <span class="keyword">int</span> counts = multipart.getCount();   </div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; counts; i++) &#123;   </div><div class="line">                getMailContent(multipart.getBodyPart(i));   </div><div class="line">            &#125;   </div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (part.isMimeType(<span class="string">"message/rfc822"</span>)) &#123;   </div><div class="line">            getMailContent((Part) part.getContent());   </div><div class="line">        &#125; <span class="keyword">else</span> &#123;&#125;   </div><div class="line">    &#125;   </div><div class="line">  </div><div class="line">    <span class="comment">/**   </span></div><div class="line">     * 判断此邮件是否需要回执，如果需要回执返回"true",否则返回"false"  </div><div class="line">     */   </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getReplySign</span><span class="params">()</span> <span class="keyword">throws</span> MessagingException </span>&#123;   </div><div class="line">        <span class="keyword">boolean</span> replysign = <span class="keyword">false</span>;   </div><div class="line">        String needreply[] = mimeMessage   </div><div class="line">                .getHeader(<span class="string">"Disposition-Notification-To"</span>);   </div><div class="line">        <span class="keyword">if</span> (needreply != <span class="keyword">null</span>) &#123;   </div><div class="line">            replysign = <span class="keyword">true</span>;   </div><div class="line">        &#125;   </div><div class="line">        <span class="keyword">return</span> replysign;   </div><div class="line">    &#125;   </div><div class="line">  </div><div class="line">    <span class="comment">/**  </span></div><div class="line">     * 获得此邮件的Message-ID  </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessageId</span><span class="params">()</span> <span class="keyword">throws</span> MessagingException </span>&#123;   </div><div class="line">        <span class="keyword">return</span> mimeMessage.getMessageID();   </div><div class="line">    &#125;   </div><div class="line">  </div><div class="line">    <span class="comment">/**  </span></div><div class="line">     * 【判断此邮件是否已读，如果已读返回false,未读返回true】  </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isNew</span><span class="params">()</span> <span class="keyword">throws</span> MessagingException </span>&#123;   </div><div class="line">        <span class="keyword">boolean</span> isnew = <span class="keyword">true</span>;   </div><div class="line">        Flags flags = ((Message) mimeMessage).getFlags();   </div><div class="line">        Flags.Flag[] flag = flags.getSystemFlags();   </div><div class="line">        System.out.println(<span class="string">"flags's length: "</span> + flag.length);   </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; flag.length; i++) &#123;   </div><div class="line">            <span class="keyword">if</span> (flag[i] == Flags.Flag.SEEN) &#123;   </div><div class="line">                isnew = <span class="keyword">false</span>;   </div><div class="line">                System.out.println(<span class="string">"seen Message......."</span>);   </div><div class="line">                <span class="keyword">break</span>;   </div><div class="line">            &#125;   </div><div class="line">        &#125;   </div><div class="line">        <span class="keyword">return</span> isnew;   </div><div class="line">    &#125;   </div><div class="line">  </div><div class="line">    <span class="comment">/**  </span></div><div class="line">     * 判断此邮件是否包含附件  </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isContainAttach</span><span class="params">(Part part)</span> <span class="keyword">throws</span> Exception </span>&#123;   </div><div class="line">        <span class="keyword">boolean</span> attachflag = <span class="keyword">false</span>;   </div><div class="line">        String contentType = part.getContentType();   </div><div class="line">        <span class="keyword">if</span> (part.isMimeType(<span class="string">"multipart/*"</span>)) &#123;   </div><div class="line">            Multipart mp = (Multipart) part.getContent();   </div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mp.getCount(); i++) &#123;   </div><div class="line">                BodyPart mpart = mp.getBodyPart(i);   </div><div class="line">                String disposition = mpart.getDisposition();   </div><div class="line">                <span class="keyword">if</span> ((disposition != <span class="keyword">null</span>)   </div><div class="line">                        &amp;&amp; ((disposition.equals(Part.ATTACHMENT)) || (disposition   </div><div class="line">                                .equals(Part.INLINE))))   </div><div class="line">                    attachflag = <span class="keyword">true</span>;   </div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (mpart.isMimeType(<span class="string">"multipart/*"</span>)) &#123;   </div><div class="line">                    attachflag = isContainAttach((Part) mpart);   </div><div class="line">                &#125; <span class="keyword">else</span> &#123;   </div><div class="line">                    String contype = mpart.getContentType();   </div><div class="line">                    <span class="keyword">if</span> (contype.toLowerCase().indexOf(<span class="string">"application"</span>) != -<span class="number">1</span>)   </div><div class="line">                        attachflag = <span class="keyword">true</span>;   </div><div class="line">                    <span class="keyword">if</span> (contype.toLowerCase().indexOf(<span class="string">"name"</span>) != -<span class="number">1</span>)   </div><div class="line">                        attachflag = <span class="keyword">true</span>;   </div><div class="line">                &#125;   </div><div class="line">            &#125;   </div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (part.isMimeType(<span class="string">"message/rfc822"</span>)) &#123;   </div><div class="line">            attachflag = isContainAttach((Part) part.getContent());   </div><div class="line">        &#125;   </div><div class="line">        <span class="keyword">return</span> attachflag;   </div><div class="line">    &#125;   </div><div class="line">  </div><div class="line">    <span class="comment">/**   </span></div><div class="line">     * 【保存附件】   </div><div class="line">     */   </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAttachMent</span><span class="params">(Part part)</span> <span class="keyword">throws</span> Exception </span>&#123;   </div><div class="line">        String fileName = <span class="string">""</span>;   </div><div class="line">        <span class="keyword">if</span> (part.isMimeType(<span class="string">"multipart/*"</span>)) &#123;   </div><div class="line">            Multipart mp = (Multipart) part.getContent();   </div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mp.getCount(); i++) &#123;   </div><div class="line">                BodyPart mpart = mp.getBodyPart(i);   </div><div class="line">                String disposition = mpart.getDisposition();   </div><div class="line">                <span class="keyword">if</span> ((disposition != <span class="keyword">null</span>)   </div><div class="line">                        &amp;&amp; ((disposition.equals(Part.ATTACHMENT)) || (disposition   </div><div class="line">                                .equals(Part.INLINE)))) &#123;   </div><div class="line">                    fileName = mpart.getFileName();   </div><div class="line">                    <span class="keyword">if</span> (fileName.toLowerCase().indexOf(<span class="string">"gb2312"</span>) != -<span class="number">1</span>) &#123;   </div><div class="line">                        fileName = MimeUtility.decodeText(fileName);   </div><div class="line">                    &#125;   </div><div class="line">                    saveFile(fileName, mpart.getInputStream());   </div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mpart.isMimeType(<span class="string">"multipart/*"</span>)) &#123;   </div><div class="line">                    saveAttachMent(mpart);   </div><div class="line">                &#125; <span class="keyword">else</span> &#123;   </div><div class="line">                    fileName = mpart.getFileName();   </div><div class="line">                    <span class="keyword">if</span> ((fileName != <span class="keyword">null</span>)   </div><div class="line">                            &amp;&amp; (fileName.toLowerCase().indexOf(<span class="string">"GB2312"</span>) != -<span class="number">1</span>)) &#123;   </div><div class="line">                        fileName = MimeUtility.decodeText(fileName);   </div><div class="line">                        saveFile(fileName, mpart.getInputStream());   </div><div class="line">                    &#125;   </div><div class="line">                &#125;   </div><div class="line">            &#125;   </div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (part.isMimeType(<span class="string">"message/rfc822"</span>)) &#123;   </div><div class="line">            saveAttachMent((Part) part.getContent());   </div><div class="line">        &#125;   </div><div class="line">    &#125;   </div><div class="line">  </div><div class="line">    <span class="comment">/**   </span></div><div class="line">     * 【设置附件存放路径】   </div><div class="line">     */   </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAttachPath</span><span class="params">(String attachpath)</span> </span>&#123;   </div><div class="line">        <span class="keyword">this</span>.saveAttachPath = attachpath;   </div><div class="line">    &#125;   </div><div class="line">  </div><div class="line">    <span class="comment">/**  </span></div><div class="line">     * 【设置日期显示格式】  </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDateFormat</span><span class="params">(String format)</span> <span class="keyword">throws</span> Exception </span>&#123;   </div><div class="line">        <span class="keyword">this</span>.dateformat = format;   </div><div class="line">    &#125;   </div><div class="line">  </div><div class="line">    <span class="comment">/**  </span></div><div class="line">     * 【获得附件存放路径】  </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAttachPath</span><span class="params">()</span> </span>&#123;   </div><div class="line">        <span class="keyword">return</span> saveAttachPath;   </div><div class="line">    &#125;   </div><div class="line">  </div><div class="line">    <span class="comment">/**  </span></div><div class="line">     * 【真正的保存附件到指定目录里】  </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveFile</span><span class="params">(String fileName, InputStream in)</span> <span class="keyword">throws</span> Exception </span>&#123;   </div><div class="line">        String osName = System.getProperty(<span class="string">"os.name"</span>);   </div><div class="line">        String storedir = getAttachPath();   </div><div class="line">        String separator = <span class="string">""</span>;   </div><div class="line">        <span class="keyword">if</span> (osName == <span class="keyword">null</span>)   </div><div class="line">            osName = <span class="string">""</span>;   </div><div class="line">        <span class="keyword">if</span> (osName.toLowerCase().indexOf(<span class="string">"win"</span>) != -<span class="number">1</span>) &#123;   </div><div class="line">            separator = <span class="string">"\\"</span>;  </div><div class="line">            <span class="keyword">if</span> (storedir == <span class="keyword">null</span> || storedir.equals(<span class="string">""</span>))  </div><div class="line">                storedir = <span class="string">"c:\\tmp"</span>;  </div><div class="line">        &#125; <span class="keyword">else</span> &#123;  </div><div class="line">            separator = <span class="string">"/"</span>;  </div><div class="line">            storedir = <span class="string">"/tmp"</span>;  </div><div class="line">        &#125;  </div><div class="line">        File storefile = <span class="keyword">new</span> File(storedir + separator + fileName);  </div><div class="line">        System.out.println(<span class="string">"storefile's path: "</span> + storefile.toString());  </div><div class="line">        <span class="comment">// for(int i=0;storefile.exists();i++)&#123;  </span></div><div class="line">        <span class="comment">// storefile = new File(storedir+separator+fileName+i);  </span></div><div class="line">        <span class="comment">// &#125;  </span></div><div class="line">        BufferedOutputStream bos = <span class="keyword">null</span>;  </div><div class="line">        BufferedInputStream bis = <span class="keyword">null</span>;  </div><div class="line">        <span class="keyword">try</span> &#123;  </div><div class="line">            bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(storefile));  </div><div class="line">            bis = <span class="keyword">new</span> BufferedInputStream(in);  </div><div class="line">            <span class="keyword">int</span> c;  </div><div class="line">            <span class="keyword">while</span> ((c = bis.read()) != -<span class="number">1</span>) &#123;  </div><div class="line">                bos.write(c);  </div><div class="line">                bos.flush();  </div><div class="line">            &#125;  </div><div class="line">        &#125; <span class="keyword">catch</span> (Exception exception) &#123;  </div><div class="line">            exception.printStackTrace();  </div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"文件保存失败!"</span>);  </div><div class="line">        &#125; <span class="keyword">finally</span> &#123;  </div><div class="line">            bos.close();  </div><div class="line">            bis.close();  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">    <span class="comment">/**  </span></div><div class="line">     * 测试收邮件代码  </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception </span>&#123;  </div><div class="line">        </div><div class="line">        </div><div class="line">         Properties props = <span class="keyword">new</span> Properties();</div><div class="line"></div><div class="line">         props.setProperty(<span class="string">"mail.smtp.host"</span>, <span class="string">"smtp.126.com"</span>);<span class="comment">//指定服务器</span></div><div class="line"></div><div class="line">         props.setProperty(<span class="string">"mail.smtp.auth"</span>, <span class="string">"true"</span>);<span class="comment">//指定需要验证</span></div><div class="line"></div><div class="line">         Session session = Session.getDefaultInstance(props);</div><div class="line">        </div><div class="line">        </div><div class="line">        </div><div class="line">         </div><div class="line">       <span class="comment">//IMAP---------------------------------------------------------------------</span></div><div class="line">         URLName urln = <span class="keyword">new</span> URLName(<span class="string">"imap"</span>, <span class="string">"imap.126.com"</span>, <span class="number">143</span>, <span class="keyword">null</span>,  <span class="string">"用户名不还包含@126.com"</span>, <span class="string">"邮箱授权码"</span>);  </div><div class="line">         </div><div class="line">       <span class="comment">//POP3---------------------------------------------------------</span></div><div class="line"><span class="comment">//        URLName urln = new URLName("pop3", "pop3.126.com", 110, null,  "test", "test");  </span></div><div class="line"></div><div class="line">         Store store = session.getStore(urln);</div><div class="line">         </div><div class="line">         store.connect();</div><div class="line">         </div><div class="line">         </div><div class="line">       Folder folder = store.getFolder(<span class="string">"INBOX"</span>);  </div><div class="line">       folder.open(Folder.READ_WRITE);  </div><div class="line">       <span class="comment">// 获取总邮件数      </span></div><div class="line">       <span class="keyword">int</span> total = folder.getMessageCount();      </div><div class="line">       System.out.println(<span class="string">"-----------------共有邮件："</span> + total  + <span class="string">" 封--------------"</span>);   </div><div class="line">       <span class="comment">// 得到收件箱文件夹信息，获取邮件列表      </span></div><div class="line">       System.out.println(<span class="string">"未读邮件数："</span> + folder.getUnreadMessageCount());      </div><div class="line">       Message messages[] = folder.getMessages();  </div><div class="line">       </div><div class="line">       MailReceive pmm = <span class="keyword">null</span>;  </div><div class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; messages.length; i++) &#123;  </div><div class="line">           System.out.println(<span class="string">"======================"</span>);  </div><div class="line">           pmm = <span class="keyword">new</span> MailReceive((MimeMessage) messages[i]);  </div><div class="line">           System.out.println(<span class="string">"邮件 "</span> + i + <span class="string">" 未读？: "</span> + pmm.isNew());  </div><div class="line">           </div><div class="line">           <span class="keyword">if</span>(pmm.isNew())&#123;</div><div class="line">               <span class="comment">// 获得邮件内容===============  </span></div><div class="line">                pmm.getMailContent((Part) messages[i]);<span class="comment">//把内容设置到bodytext</span></div><div class="line">                   pmm.setAttachPath(<span class="string">"d:\\"</span>);   </div><div class="line">                   pmm.saveAttachMent((Part) messages[i]);</div><div class="line">                System.out.println(<span class="string">"Message "</span> + i + <span class="string">" subject: "</span> + pmm.getSubject());  </div><div class="line">                System.out.println(<span class="string">"Message "</span> + i + <span class="string">" sentdate: "</span>+ pmm.getSentDate());  </div><div class="line">                System.out.println(<span class="string">"Message "</span> + i + <span class="string">" replysign: "</span>+ pmm.getReplySign());  </div><div class="line">                System.out.println(<span class="string">"Message "</span> + i + <span class="string">"  containAttachment: "</span>+ pmm.isContainAttach((Part) messages[i]));  </div><div class="line">                System.out.println(<span class="string">"Message "</span> + i + <span class="string">" form: "</span> + pmm.getFrom());  </div><div class="line">                System.out.println(<span class="string">"Message "</span> + i + <span class="string">" to: "</span>+ pmm.getMailAddress(<span class="string">"to"</span>));  </div><div class="line">                System.out.println(<span class="string">"Message "</span> + i + <span class="string">" cc: "</span>+ pmm.getMailAddress(<span class="string">"cc"</span>));  </div><div class="line">                System.out.println(<span class="string">"Message "</span> + i + <span class="string">" bcc: "</span>+ pmm.getMailAddress(<span class="string">"bcc"</span>));  </div><div class="line">                pmm.setDateFormat(<span class="string">"yy年MM月dd日 HH:mm"</span>);  </div><div class="line">                System.out.println(<span class="string">"Message "</span> + i + <span class="string">" sentdate: "</span>+ pmm.getSentDate());  </div><div class="line">                System.out.println(<span class="string">"Message "</span> + i + <span class="string">" Message-ID: "</span>+ pmm.getMessageId());  </div><div class="line">                System.out.println(<span class="string">"Message "</span> + i + <span class="string">" 内容: "</span>+ pmm.getBodyText());</div><div class="line">                </div><div class="line">            </div><div class="line">               <span class="comment">//调接口存到es</span></div><div class="line">           &#125;</div><div class="line">          </div><div class="line">       &#125;</div><div class="line">    &#125;   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;场景：目前需要定时收取&lt;strong&gt;某个账户&lt;/strong&gt;的&lt;strong&gt;未读&lt;/strong&gt;邮件，保存到&lt;strong&gt;elasticsearch doc&lt;/strong&gt;中去。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用javaMail收邮件主要有两种协议，一种是pop3，一种是imap。这两种协议都可以用来收邮件，但是在其中的处理上是有区别的。pop3是不支持判断邮件是否为已读的，也就是说你不能直接从收件箱里面取到未读邮件，这需要自己进行判断，然而imap就提供了这样的功能，使用imap时可以很轻松的判断该邮件是否为已读或未读或其他。&lt;br&gt;由此看来，pop3不适合我的需求【通过每次检索全部，然后判断subject也可以实现，不过每次都需要遍历对比，比较麻烦】&lt;br&gt;那么我就用imap协议来收取了，pop3和imap只是配置email的url有点区别 其他地方是一样的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;pop3和imap主要区别就是能否判断邮件状态的问题，其他的操作都差不多.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;准备工作：&quot;&gt;&lt;a href=&quot;#准备工作：&quot; class=&quot;headerlink&quot; title=&quot;准备工作：&quot;&gt;&lt;/a&gt;准备工作：&lt;/h2&gt;&lt;h3 id=&quot;邮箱设置打开pop3、imap、smtp收发协议&quot;&gt;&lt;a href=&quot;#邮箱设置打开pop3、imap、smtp收发协议&quot; class=&quot;headerlink&quot; title=&quot;邮箱设置打开pop3、imap、smtp收发协议&quot;&gt;&lt;/a&gt;邮箱设置打开pop3、imap、smtp收发协议&lt;/h3&gt;&lt;p&gt;去你的126|163|qq邮箱 打开设置-pop3 如图&lt;br&gt;注意重点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;全部接收&lt;/strong&gt;，不然30天以前的收不到还以为代码有问题&lt;/li&gt;
&lt;li&gt;配置&lt;strong&gt;授权码&lt;/strong&gt;，目前163和qq邮箱都是&lt;strong&gt;授权码形式&lt;/strong&gt;，代码里的password位置填写的都是&lt;strong&gt;授权码&lt;/strong&gt;而&lt;strong&gt;不是邮箱密码&lt;/strong&gt;哦&lt;br&gt;&lt;img src=&quot;http://7xpfpd.com1.z0.glb.clouddn.com/pop3setting.png&quot; alt=&quot;enter description here&quot;&gt;&lt;h3 id=&quot;协议的端口和协议规则&quot;&gt;&lt;a href=&quot;#协议的端口和协议规则&quot; class=&quot;headerlink&quot; title=&quot;协议的端口和协议规则&quot;&gt;&lt;/a&gt;协议的端口和协议规则&lt;/h3&gt;//协议的内容端口等区别，对应关系如图：&lt;br&gt;&lt;img src=&quot;http://7xpfpd.com1.z0.glb.clouddn.com/pop3%20port.png&quot; alt=&quot;enter description here&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="邮件" scheme="http://liuhouer.github.io/categories/%E9%82%AE%E4%BB%B6/"/>
    
      <category term="java" scheme="http://liuhouer.github.io/categories/%E9%82%AE%E4%BB%B6/java/"/>
    
    
      <category term="java" scheme="http://liuhouer.github.io/tags/java/"/>
    
      <category term="邮件接收" scheme="http://liuhouer.github.io/tags/%E9%82%AE%E4%BB%B6%E6%8E%A5%E6%94%B6/"/>
    
  </entry>
  
  <entry>
    <title>css盒子模型</title>
    <link href="http://liuhouer.github.io/2017/12/27/css%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/"/>
    <id>http://liuhouer.github.io/2017/12/27/css盒子模型/</id>
    <published>2017-12-27T02:24:09.000Z</published>
    <updated>2018-01-03T08:56:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="元素分类"><a href="#元素分类" class="headerlink" title="元素分类"></a>元素分类</h1><blockquote>
<p>在讲解CSS布局之前，我们需要提前知道一些知识，在CSS中，html中的标签元素大体被分为三种不同的类型：块状元素、内联元素(又叫行内元素)和内联块状元素。<br>常用的块状元素有：</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>、<span class="tag">&lt;<span class="name">p</span>&gt;</span>、<span class="tag">&lt;<span class="name">h1</span>&gt;</span>...<span class="tag">&lt;<span class="name">h6</span>&gt;</span>、<span class="tag">&lt;<span class="name">ol</span>&gt;</span>、<span class="tag">&lt;<span class="name">ul</span>&gt;</span>、<span class="tag">&lt;<span class="name">dl</span>&gt;</span>、<span class="tag">&lt;<span class="name">table</span>&gt;</span>、<span class="tag">&lt;<span class="name">address</span>&gt;</span>、<span class="tag">&lt;<span class="name">blockquote</span>&gt;</span> 、<span class="tag">&lt;<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p>常用的内联元素有：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span>、<span class="tag">&lt;<span class="name">span</span>&gt;</span>、<span class="tag">&lt;<span class="name">br</span>&gt;</span>、<span class="tag">&lt;<span class="name">i</span>&gt;</span>、<span class="tag">&lt;<span class="name">em</span>&gt;</span>、<span class="tag">&lt;<span class="name">strong</span>&gt;</span>、<span class="tag">&lt;<span class="name">label</span>&gt;</span>、<span class="tag">&lt;<span class="name">q</span>&gt;</span>、<span class="tag">&lt;<span class="name">var</span>&gt;</span>、<span class="tag">&lt;<span class="name">cite</span>&gt;</span>、<span class="tag">&lt;<span class="name">code</span>&gt;</span></div></pre></td></tr></table></figure>
<p>常用的内联块状元素有：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span>&gt;</span>、<span class="tag">&lt;<span class="name">input</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="元素分类–块级元素"><a href="#元素分类–块级元素" class="headerlink" title="元素分类–块级元素"></a>元素分类–块级元素</h2><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">什么是块级元素？在html中<span class="variable">&lt;div&gt;</span>、 <span class="variable">&lt;p&gt;</span>、<span class="variable">&lt;h1&gt;</span>、<span class="variable">&lt;form&gt;</span>、<span class="variable">&lt;ul&gt;</span> 和 <span class="variable">&lt;li&gt;</span>就是块级元素。设置display:<span class="built_in">block</span>就是将元素显示为块级元素。如下代码就是将内联元素a转换为块状元素，从而使a元素具有块状元素特点。</div><div class="line">a&#123;display:<span class="built_in">block</span>;&#125;</div><div class="line">块级元素特点：</div><div class="line"><span class="number">1</span>、每个块级元素都从新的一行开始，并且其后的元素也另起一行。（真霸道，一个块级元素独占一行）</div><div class="line"><span class="number">2</span>、元素的高度、宽度、行高以及顶和底边距都可设置。</div><div class="line"><span class="number">3</span>、元素宽度在不设置的情况下，是它本身父容器的<span class="number">100</span>%（和父元素的宽度一致），除非设定一个宽度。</div></pre></td></tr></table></figure>
<h2 id="元素分类–内联元素"><a href="#元素分类–内联元素" class="headerlink" title="元素分类–内联元素"></a>元素分类–内联元素</h2><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">在html中，<span class="params">&lt;span&gt;</span>、<span class="params">&lt;a&gt;</span>、<span class="params">&lt;label&gt;</span>、 <span class="params">&lt;strong&gt;</span> 和<span class="params">&lt;em&gt;</span>就是典型的内联元素（行内元素）（inline）元素。当然块状元素也可以通过代码display:inline将元素设置为内联元素。如下代码就是将块状元素div转换为内联元素，从而使 div 元素具有内联元素特点。</div><div class="line">div&#123;</div><div class="line"><span class="symbol">display:</span>inline;</div><div class="line">&#125;</div><div class="line"></div><div class="line">......</div><div class="line"></div><div class="line"><span class="params">&lt;div&gt;</span>我要变成内联元素<span class="params">&lt;/div&gt;</span></div></pre></td></tr></table></figure>
<p><strong>内联元素特点</strong>：</p>
<blockquote>
<p> 1、和其他元素都在一行上；<br> 2、元素的高度、宽度及顶部和底部边距不可设置；<br> 3、元素的宽度就是它包含的文字或图片的宽度，不可改变。</p>
</blockquote>
<h2 id="元素分类–内联块状元素"><a href="#元素分类–内联块状元素" class="headerlink" title="元素分类–内联块状元素"></a>元素分类–内联块状元素</h2><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">内联块状元素（<span class="keyword">inline</span>-<span class="keyword">block</span>）就是同时具备内联元素、块状元素的特点，代码display:<span class="keyword">inline</span>-<span class="keyword">block</span>就是将元素设置为内联块状元素。(css2.<span class="number">1</span>新增)，&lt;img&gt;、&lt;input&gt;标签就是这种内联块状标签。</div></pre></td></tr></table></figure>
<p><strong>inline-block 元素特点</strong>：</p>
<blockquote>
<p>1、和其他元素都在一行上；</p>
<p>2、元素的高度、宽度、行高以及顶和底边距都可设置。</p>
</blockquote>
<h1 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h1><h2 id="盒模型–边框（一）"><a href="#盒模型–边框（一）" class="headerlink" title="盒模型–边框（一）"></a>盒模型–边框（一）</h2><p>盒子模型的边框就是围绕着内容及补白的线，这条线你可以设置它的粗细、样式和颜色(边框三个属性)。<br>如下面代码为 div 来设置边框粗细为 2px、样式为实心的、颜色为红色的边框：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span>&#123;</div><div class="line"><span class="attribute">border</span>:<span class="number">2px</span> solid red;</div><div class="line">&#125;</div><div class="line">上面是 <span class="selector-tag">border</span> 代码的缩写形式，可以分开写：</div><div class="line"><span class="selector-tag">div</span>&#123;</div><div class="line"><span class="attribute">border-width</span>:<span class="number">2px</span>;</div><div class="line"><span class="attribute">border-style</span>:solid;</div><div class="line"><span class="attribute">border-color</span>:red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意：</p>
<blockquote>
<p>1、border-style（边框样式）常见样式有： dashed（虚线）| dotted（点线）| solid（实线）。</p>
<p>2、border-color（边框颜色）中的颜色可设置为十六进制颜色，如: border-color:#888;//前面的井号不要忘掉。</p>
<p>3、border-width（边框宽度）中的宽度也可以设置为： thin | medium |<br>thick（但不是很常用），最常还是用象素（px）。</p>
</blockquote>
<h2 id="盒模型–边框（二）"><a href="#盒模型–边框（二）" class="headerlink" title="盒模型–边框（二）"></a>盒模型–边框（二）</h2><p>现在有一个问题，如果有想为 p 标签单独设置下边框，而其它三边都不设置边框样式怎么办呢？css 样式中允许只为一个方向的边框设置样式：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">border-bottom</span>:<span class="number">1px</span> solid red;&#125;</div></pre></td></tr></table></figure>
<p>同样可以使用下面代码实现其它三边(上、右、左)边框的设置：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">border-top</span>:<span class="number">1px</span> solid red;</div><div class="line"><span class="attribute">border-right</span>:<span class="number">1px</span> solid red;</div><div class="line"><span class="attribute">border-left</span>:<span class="number">1px</span> solid red;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="盒模型–宽度和高度"><a href="#盒模型–宽度和高度" class="headerlink" title="盒模型–宽度和高度"></a>盒模型–宽度和高度</h2><p>盒模型宽度和高度和我们平常所说的物体的宽度和高度理解是不一样的，css内定义的宽（width）和高（height），指的是填充以里的内容范围。<br>因此一个元素实际宽度（盒子的宽度）=左边界+左边框+左填充+内容宽度+右填充+右边框+右边界。</p>
<p><img src="http://7xpfpd.com1.z0.glb.clouddn.com/Image1.jpg" alt="enter description here"></p>
<h2 id="盒模型–填充"><a href="#盒模型–填充" class="headerlink" title="盒模型–填充"></a>盒模型–填充</h2><p>元素内容与边框之间是可以设置距离的，称之为“填充”。填充也可分为上、右、下、左(顺时针)。如下代码：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">padding</span>:<span class="number">20px</span> <span class="number">10px</span> <span class="number">15px</span> <span class="number">30px</span>;&#125;</div></pre></td></tr></table></figure>
<p>顺序一定不要搞混。可以分开写上面代码：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span>&#123;</div><div class="line"><span class="attribute">padding-top</span>:<span class="number">20px</span>;</div><div class="line"><span class="attribute">padding-right</span>:<span class="number">10px</span>;</div><div class="line"><span class="attribute">padding-bottom</span>:<span class="number">15px</span>;</div><div class="line"><span class="attribute">padding-left</span>:<span class="number">30px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果上、右、下、左的填充都为10px;可以这么写</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">padding</span>:<span class="number">10px</span>;&#125;</div></pre></td></tr></table></figure>
<p>如果上下填充一样为10px，左右一样为20px，可以这么写：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">padding</span>:<span class="number">10px</span> <span class="number">20px</span>;&#125;</div></pre></td></tr></table></figure>
<p><strong>总结一下：padding和margin的区别，padding在边框里，margin在边框外。</strong></p>
<h1 id="css布局模型"><a href="#css布局模型" class="headerlink" title="css布局模型"></a>css布局模型</h1><p>清楚了CSS 盒模型的基本概念、 盒模型类型， 我们就可以深入探讨网页布局的基本模型了。布局模型与盒模型一样都是 CSS 最基本、 最核心的概念。 但布局模型是建立在盒模型基础之上，又不同于我们常说的 CSS 布局样式或 CSS 布局模板。如果说布局模型是本，那么 CSS 布局模板就是末了，是外在的表现形式。<br>CSS包含3种基本的布局模型，用英文概括为：Flow、Layer 和 Float。<br>在网页中，元素有三种布局模型：</p>
<blockquote>
<p>1、流动模型（Flow）<br>2、浮动模型 (Float)<br>3、层模型（Layer）</p>
</blockquote>
<h2 id="流动模型（一）"><a href="#流动模型（一）" class="headerlink" title="流动模型（一）"></a>流动模型（一）</h2><p>先来说一说流动模型，流动（Flow）是默认的网页布局模式。也就是说网页在默认状态下的 HTML 网页元素都是根据流动模型来分布网页内容的。<br>流动布局模型具有2个比较典型的特征：</p>
<blockquote>
<p>第一点，块状元素都会在所处的包含元素内自上而下按顺序垂直延伸分布，因为在默认状态下，块状元素的宽度都为100%。实际上，块状元素都会以行的形式占据位置。如右侧代码编辑器中三个块状元素标签(div，h1，p)宽度显示为100%。</p>
</blockquote>
<h2 id="流动模型（二）"><a href="#流动模型（二）" class="headerlink" title="流动模型（二）"></a>流动模型（二）</h2><blockquote>
<p>第二点，在流动模型下，内联元素都会在所处的包含元素内从左到右水平分布显示。（内联元素可不像块状元素这么霸道独占一行）<br>右侧代码编辑器中内联元素标签a、span、em、strong都是内联元素。</p>
</blockquote>
<h2 id="浮动模型"><a href="#浮动模型" class="headerlink" title="浮动模型"></a>浮动模型</h2><p>块状元素这么霸道都是独占一行，如果现在我们想让两个块状元素并排显示，怎么办呢？不要着急，设置元素浮动就可以实现这一愿望。<br>任何元素在默认情况下是不能浮动的，但可以用 CSS 定义为浮动，如 div、p、table、img 等元素都可以被定义为浮动。如下代码可以实现两个 div 元素一行显示。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">div&#123;</div><div class="line"><span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line"><span class="attribute">height</span>:<span class="number">200px</span>;</div><div class="line"><span class="attribute">border</span>:<span class="number">2px</span> red solid;</div><div class="line"><span class="attribute">float</span>:left;</div><div class="line">&#125;</div><div class="line">&lt;<span class="selector-tag">div</span> id=<span class="string">"div1"</span>&gt;&lt;/div&gt;</div><div class="line">&lt;<span class="selector-tag">div</span> id=<span class="string">"div2"</span>&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>
<h2 id="什么是层模型？"><a href="#什么是层模型？" class="headerlink" title="什么是层模型？"></a>什么是层模型？</h2><blockquote>
<p>什么是层布局模型？层布局模型就像是图像软件PhotoShop中非常流行的图层编辑功能一样，每个图层能够精确定位操作，但在网页设计领域，由于网页大小的活动性，层布局没能受到热捧。但是在网页上局部使用层布局还是有其方便之处的。下面我们来学习一下html中的层布局。<br>如何让html元素在网页中精确定位，就像图像软件PhotoShop中的图层一样可以对每个图层能够精确定位操作。CSS定义了一组定位（positioning）属性来支持层布局模型。</p>
</blockquote>
<p>==层模型有三种形式：<br>1、绝对定位(position: absolute)<br>2、相对定位(position: relative)<br>3、固定定位(position: fixed)==</p>
<h3 id="层模型–绝对定位"><a href="#层模型–绝对定位" class="headerlink" title="层模型–绝对定位"></a>层模型–绝对定位</h3><p>如果想为元素设置层模型中的绝对定位，需要设置position:absolute(表示绝对定位)，这条语句的作用将元素从文档流中拖出来，然后使用left、right、top、bottom属性相对于其最接近的一个具有定位属性的父包含块进行绝对定位。如果不存在这样的包含块，则相对于body元素，即相对于浏览器窗口。<br>如下面代码可以实现div元素相对于浏览器窗口向右移动100px，向下移动50px。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">div&#123;</div><div class="line"><span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line"><span class="attribute">height</span>:<span class="number">200px</span>;</div><div class="line"><span class="attribute">border</span>:<span class="number">2px</span> red solid;</div><div class="line"><span class="attribute">position</span>:absolute;</div><div class="line"><span class="attribute">left</span>:<span class="number">100px</span>;</div><div class="line"><span class="attribute">top</span>:<span class="number">50px</span>;</div><div class="line">&#125;</div><div class="line">&lt;<span class="selector-tag">div</span> id=<span class="string">"div1"</span>&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>效果如下：<br><img src="http://7xpfpd.com1.z0.glb.clouddn.com/Image2.jpg" alt="enter description here"></p>
<h3 id="层模型–固定定位"><a href="#层模型–固定定位" class="headerlink" title="层模型–固定定位"></a>层模型–固定定位</h3><p>fixed：表示固定定位，与absolute定位类型类似，但它的相对移动的坐标是视图（屏幕内的网页窗口）本身。由于视图本身是固定的，它不会随浏览器窗口的滚动条滚动而变化，除非你在屏幕中移动浏览器窗口的屏幕位置，或改变浏览器窗口的显示大小，因此固定定位的元素会始终位于浏览器窗口内视图的某个位置，不会受文档流动影响，这与<code>background-attachment:fixed;</code>属性功能相同。以下代码可以实现相对于浏览器视图向右移动100px，向下移动50px。并且拖动滚动条时位置固定不变。</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#div1&#123;</span></div><div class="line"><span class="symbol">width:</span><span class="number">200</span>px;</div><div class="line"><span class="symbol">height:</span><span class="number">200</span>px;</div><div class="line"><span class="symbol">border:</span><span class="number">2</span>px red solid;</div><div class="line"><span class="symbol">position:</span>fixed;</div><div class="line"><span class="symbol">left:</span><span class="number">100</span>px;</div><div class="line"><span class="symbol">top:</span><span class="number">50</span>px;</div><div class="line">&#125;</div><div class="line"><span class="params">&lt;p&gt;</span>文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本。<span class="params">&lt;/p&gt;</span></div><div class="line">....</div></pre></td></tr></table></figure>
<p><img src="http://7xpfpd.com1.z0.glb.clouddn.com/Image3.png" alt="enter description here"></p>
<h2 id="Relative与Absolute组合使用"><a href="#Relative与Absolute组合使用" class="headerlink" title="Relative与Absolute组合使用"></a>Relative与Absolute组合使用</h2><p>小伙伴们学习了12-6小节的绝对定位的方法：使用position:absolute可以实现被设置元素相对于浏览器（body）设置定位以后，大家有没有想过可不可以相对于其它元素进行定位呢？答案是肯定的，当然可以。使用position:relative来帮忙，但是必须遵守下面规范：<br>1、参照定位的元素必须是相对定位元素的前辈元素：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box1"</span>&gt;</span><span class="comment">&lt;!--参照定位的元素--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box2"</span>&gt;</span>相对参照元素进行定位<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!--相对定位元素--&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>从上面代码可以看出box1是box2的父元素（父元素当然也是前辈元素了）。<br>2、参照定位的元素必须加入position:relative;</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#box1</span>&#123;</div><div class="line"><span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line"><span class="attribute">height</span>:<span class="number">200px</span>;</div><div class="line"><span class="attribute">position</span>:relative;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3、定位元素加入position:absolute，便可以使用top、bottom、left、right来进行偏移定位了。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#box2</span>&#123;</div><div class="line"><span class="attribute">position</span>:absolute;</div><div class="line"><span class="attribute">top</span>:<span class="number">20px</span>;</div><div class="line"><span class="attribute">left</span>:<span class="number">30px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样box2就可以相对于父元素box1定位了（这里注意参照物就可以不是浏览器了，而可以自由设置了）。</p>
<h2 id="颜色值缩写"><a href="#颜色值缩写" class="headerlink" title="颜色值缩写"></a>颜色值缩写</h2><p>关于颜色的css样式也是可以缩写的，当你设置的颜色是16进制的色彩值时，如果每两位的值相同，可以缩写一半。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">例子1：</div><div class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">color</span>:<span class="number">#000000</span>;&#125;</div><div class="line">可以缩写为：</div><div class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">color</span>: <span class="number">#000</span>;&#125;</div><div class="line">例子2：</div><div class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">color</span>: <span class="number">#336699</span>;&#125;</div><div class="line">可以缩写为：</div><div class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">color</span>: <span class="number">#369</span>;&#125;</div></pre></td></tr></table></figure>
<h2 id="字体缩写"><a href="#字体缩写" class="headerlink" title="字体缩写"></a>字体缩写</h2><p>网页中的字体css样式代码也有他自己的缩写方式，下面是给网页设置字体的代码：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span>&#123;</div><div class="line"><span class="attribute">font-style</span>:italic;</div><div class="line"><span class="attribute">font-variant</span>:small-caps;</div><div class="line"><span class="attribute">font-weight</span>:bold;</div><div class="line"><span class="attribute">font-size</span>:<span class="number">12px</span>;</div><div class="line"><span class="attribute">line-height</span>:<span class="number">1.5em</span>;</div><div class="line"><span class="attribute">font-family</span>:<span class="string">"宋体"</span>,sans-serif;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这么多行的代码其实可以缩写为一句：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span>&#123;</div><div class="line"><span class="attribute">font</span>:italic small-caps bold <span class="number">12px</span>/<span class="number">1.5em</span> <span class="string">"宋体"</span>,sans-serif;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意：<br>1、使用这一简写方式你至少要指定 font-size 和 font-family 属性，其他的属性(如 font-weight、font-style、font-variant、line-height)如未指定将自动使用默认值。<br>2、在缩写时 font-size 与 line-height 中间要加入“/”斜扛。<br>一般情况下因为对于中文网站，英文还是比较少的，所以下面缩写代码比较常用：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span>&#123;</div><div class="line"><span class="attribute">font</span>:<span class="number">12px</span>/<span class="number">1.5em</span> <span class="string">"宋体"</span>,sans-serif;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>只是有字号、行间距、中文字体、英文字体设置。</p>
<h2 id="颜色值"><a href="#颜色值" class="headerlink" title="颜色值"></a>颜色值</h2><p>在网页中的颜色设置是非常重要，有字体颜色（color）、背景颜色（background-color）、边框颜色（border）等，设置颜色的方法也有很多种：</p>
<h3 id="1、英文命令颜色"><a href="#1、英文命令颜色" class="headerlink" title="1、英文命令颜色"></a>1、英文命令颜色</h3><p>前面几个小节中经常用到的就是这种设置方法：<br>p{color:red;}</p>
<h3 id="2、RGB颜色"><a href="#2、RGB颜色" class="headerlink" title="2、RGB颜色"></a>2、RGB颜色</h3><p>这个与 photoshop 中的 RGB 颜色是一致的，由 R(red)、G(green)、B(blue) 三种颜色的比例来配色。<br>p{color:rgb(133,45,200);}<br>每一项的值可以是 0~255 之间的整数，也可以是 0%~100% 的百分数。如：<br>p{color:rgb(20%,33%,25%);}</p>
<h3 id="3、十六进制颜色"><a href="#3、十六进制颜色" class="headerlink" title="3、十六进制颜色"></a>3、十六进制颜色</h3><p>这种颜色设置方法是现在比较普遍使用的方法，其原理其实也是 RGB 设置，但是其每一项的值由 0-255 变成了十六进制 00-ff。<br>p{color:#00ffff;}<br>配色表：</p>
<p><img src="http://7xpfpd.com1.z0.glb.clouddn.com/Image4.jpg" alt="enter description here"></p>
<h2 id="长度值"><a href="#长度值" class="headerlink" title="长度值"></a>长度值</h2><p>长度单位总结一下，目前比较常用到px（像素）、em、% 百分比，要注意其实这三种单位都是相对单位。</p>
<h3 id="1、像素"><a href="#1、像素" class="headerlink" title="1、像素"></a>1、像素</h3><p>像素为什么是相对单位呢？因为像素指的是显示器上的小点（CSS规范中假设“90像素=1英寸”）。实际情况是浏览器会使用显示器的实际像素值有关，在目前大多数的设计者都倾向于使用像素（px）作为单位。</p>
<h3 id="2、em"><a href="#2、em" class="headerlink" title="2、em"></a>2、em</h3><p>就是本元素给定字体的 font-size 值，如果元素的 font-size 为 14px ，那么 1em = 14px；如果 font-size 为 18px，那么 1em = 18px。如下代码：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">font-size</span>:<span class="number">12px</span>;<span class="attribute">text-indent</span>:<span class="number">2em</span>;&#125;</div></pre></td></tr></table></figure>
<p>上面代码就是可以实现段落首行缩进 24px（也就是两个字体大小的距离）。<br>下面注意一个特殊情况：<br>但当给 font-size 设置单位为 em 时，此时计算的标准以 p 的父元素的 font-size 为基础。如下代码：</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">html:</span></div><div class="line"><span class="params">&lt;p&gt;</span>以这个<span class="params">&lt;span&gt;</span>例子<span class="params">&lt;/span&gt;</span>为例。<span class="params">&lt;/p&gt;</span></div><div class="line"><span class="symbol">css:</span></div><div class="line">p&#123;font-size:<span class="number">14</span>px&#125;</div><div class="line">span&#123;font-size:<span class="number">0.8</span>em;&#125;</div></pre></td></tr></table></figure>
<p>结果 span 中的字体“例子”字体大小就为 11.2px（14 * 0.8 = 11.2px）。</p>
<h3 id="3、百分比"><a href="#3、百分比" class="headerlink" title="3、百分比"></a>3、百分比</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">font-size</span>:<span class="number">12px</span>;<span class="attribute">line-height</span>:<span class="number">130%</span>&#125;</div></pre></td></tr></table></figure>
<p>设置行高（行间距）为字体的130%（12 * 1.3 = 15.6px）。</p>
<h2 id="水平居中设置-行内元素"><a href="#水平居中设置-行内元素" class="headerlink" title="水平居中设置-行内元素"></a>水平居中设置-行内元素</h2><p>我们在实际工作中常会遇到需要设置水平居中的场景，比如为了美观，文章的标题一般都是水平居中显示的。<br>这里我们又得分两种情况：行内元素 还是 块状元素 ，块状元素里面又分为定宽块状元素，以及不定宽块状元素。今天我们先来了解一下行内元素怎么进行水平居中？<br>如果被设置元素为文本、图片等行内元素时，水平居中是通过给父元素设置 text-align:center 来实现的。(父元素和子元素：如下面的html代码中，div是“我想要在父容器中水平居中显示”这个文本的父元素。反之这个文本是div的子元素 )如下代码：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">html代码：</div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"txtCenter"</span>&gt;</span>我想要在父容器中水平居中显示。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">css代码：</div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.txtCenter</span>&#123;</div><div class="line"><span class="attribute">text-align</span>:center;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="水平居中设置-定宽块状元素"><a href="#水平居中设置-定宽块状元素" class="headerlink" title="水平居中设置-定宽块状元素"></a>水平居中设置-定宽块状元素</h2><p>当被设置元素为 块状元素 时用 text-align：center 就不起作用了，这时也分两种情况：定宽块状元素和不定宽块状元素。<br>这一小节我们先来讲一讲定宽块状元素。(定宽块状元素：块状元素的宽度width为固定值。)<br>满足定宽和块状两个条件的元素是可以通过设置“左右margin”值为“auto”来实现居中的。我们来看个例子就是设置 div 这个块状元素水平居中：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">html代码：</div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>我是定宽块状元素，哈哈，我要水平居中显示。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">css代码：</div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-tag">div</span>&#123;</div><div class="line"><span class="attribute">border</span>:<span class="number">1px</span> solid red;<span class="comment">/*为了显示居中效果明显为 div 设置了边框*/</span></div><div class="line"><span class="attribute">width</span>:<span class="number">200px</span>;<span class="comment">/*定宽*/</span></div><div class="line"><span class="attribute">margin</span>:<span class="number">20px</span> auto;<span class="comment">/* margin-left 与 margin-right 设置为 auto */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">也可以写成：</div><div class="line">margin-left:auto;</div><div class="line">margin-right:auto;</div><div class="line">注意：元素的“上下 margin” 是可以随意设置的。</div></pre></td></tr></table></figure>
<h2 id="水平居中总结-不定宽块状元素方法（一）"><a href="#水平居中总结-不定宽块状元素方法（一）" class="headerlink" title="水平居中总结-不定宽块状元素方法（一）"></a>水平居中总结-不定宽块状元素方法（一）</h2><p>在实际工作中我们会遇到需要为“不定宽度的块状元素”设置居中，比如网页上的分页导航，因为分页的数量是不确定的，所以我们不能通过设置宽度来限制它的弹性。(不定宽块状元素：块状元素的宽度width不固定。)<br>不定宽度的块状元素有三种方法居中（这三种方法目前使用的都很多）：</p>
<pre><code>1. 加入 table 标签
2. 设置 display: inline 方法：与第一种类似，显示类型设为 行内元素，进行不定宽元素的属性设置
3. 设置 position:relative 和 left:50%：利用 相对定位 的方式，将元素向左偏移 50% ，即达到居中的目的
</code></pre><p>这一小节我们来讲一下第一种方法：<br>为什么选择方法一加入table标签? 是利用table标签的长度自适应性—即不定义其长度也不默认父元素body的长度（table其长度根据其内文本长度决定），因此可以看做一个定宽度块元素，然后再利用定宽度块状居中的margin的方法，使其水平居中。<br>第一步：为需要设置的居中的元素外面加入一个 table 标签 ( 包括 <tbody>、<tr>、<td> )。<br>第二步：为这个 table 设置“左右 margin 居中”（这个和定宽块状元素的方法一样）。<br>举例如下：</td></tr></tbody></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">html代码：</div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第一行文本<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第二行文本<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第三行文本<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">css代码：</div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-tag">table</span>&#123;</div><div class="line"><span class="attribute">border</span>:<span class="number">1px</span> solid;</div><div class="line"><span class="attribute">margin</span>:<span class="number">0</span> auto;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>任务<br>我来试试：补充代码实现右侧中的 class 为 wrap 的 div 水平居中显示（要注意是这个 div元素 居中，而不是里面的文本居中啊）。（记得点击右上角的全屏按钮查看效果哦！）<br>备注:这一小节没有正确性验证，请查看结果窗口，从而判断输入代码是否正确。</p>
<h2 id="水平居中总结-不定宽块状元素方法（二）"><a href="#水平居中总结-不定宽块状元素方法（二）" class="headerlink" title="水平居中总结-不定宽块状元素方法（二）"></a>水平居中总结-不定宽块状元素方法（二）</h2><p>除了上一节讲到的插入table标签，可以使不定宽块状元素水平居中之外，本节介绍第2种实现这种效果的方法，改变元素的display类型为行内元素，利用其属性直接设置。<br>第二种方法：<strong>改变块级元素的 display 为 inline 类型</strong>（设置为 行内元素 显示），然后使用 <strong>text-align:center</strong> 来实现居中效果。如下例子：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">html代码：</div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">css代码：</div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.container</span>&#123;</div><div class="line"><span class="attribute">text-align</span>:center;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* margin:0;padding:0（消除文本与div边框之间的间隙）*/</span></div><div class="line"><span class="selector-class">.container</span> <span class="selector-tag">ul</span>&#123;</div><div class="line"><span class="attribute">list-style</span>:none;</div><div class="line"><span class="attribute">margin</span>:<span class="number">0</span>;</div><div class="line"><span class="attribute">padding</span>:<span class="number">0</span>;</div><div class="line"><span class="attribute">display</span>:inline;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* margin-right:8px（设置li文本之间的间隔）*/</span></div><div class="line"><span class="selector-class">.container</span> <span class="selector-tag">li</span>&#123;</div><div class="line"><span class="attribute">margin-right</span>:<span class="number">8px</span>;</div><div class="line"><span class="attribute">display</span>:inline;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这种方法相比第一种方法的优势是不用增加无语义标签，但也存在着一些问题：它将块状元素的 display 类型改为 inline，变成了<strong>行内元素</strong>，所以==少了一些功能，比如设定长度值。==</p>
<h2 id="水平居中总结-不定宽块状元素方法（三）"><a href="#水平居中总结-不定宽块状元素方法（三）" class="headerlink" title="水平居中总结-不定宽块状元素方法（三）"></a>水平居中总结-不定宽块状元素方法（三）</h2><p>除了前两节讲到的插入table标签，以及改变元素的display类型，可以使不定宽块状元素水平居中之外，本节介绍第3种实现这种效果的方法，设置浮动和相对定位来实现。<br><strong>方法三：通过给父元素设置 float，然后给父元素设置 position:relative 和 left:50%，子元素设置 position:relative 和 left: -50% 来实现水平居中。</strong></p>
<blockquote>
<p>我们可以这样理解：假想ul层的父层（即下面例子中的div层）中间有条平分线将ul层的父层（div层）平均分为两份，ul层的css代码是将ul层的最左端与ul层的父层（div层）的平分线对齐；而li层的css代码则是将li层的平分线与ul层的最左端（也是div层的平分线）对齐，从而实现li层的居中。</p>
</blockquote>
<p>代码如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">css代码：</div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.container</span>&#123;</div><div class="line"><span class="attribute">float</span>:left;</div><div class="line"><span class="attribute">position</span>:relative;</div><div class="line"><span class="attribute">left</span>:<span class="number">50%</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.container</span> <span class="selector-tag">ul</span>&#123;</div><div class="line"><span class="attribute">list-style</span>:none;</div><div class="line"><span class="attribute">margin</span>:<span class="number">0</span>;</div><div class="line"><span class="attribute">padding</span>:<span class="number">0</span>;</div><div class="line"><span class="attribute">position</span>:relative;</div><div class="line"><span class="attribute">left</span>:-<span class="number">50%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.container</span> <span class="selector-tag">li</span>&#123;<span class="attribute">float</span>:left;<span class="attribute">display</span>:inline;<span class="attribute">margin-right</span>:<span class="number">8px</span>;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这三种方法使用得都非常广泛，各有优缺点，具体选用哪种方法，可以视具体情况而定。<br>任务<br>我来试试：添加代码为任务区中的 class 为 wrap-center 的div设置水平居中。（记得点击右上角的全屏按钮查看效果哦！）</p>
<h2 id="垂直居中-父元素高度确定的单行文本"><a href="#垂直居中-父元素高度确定的单行文本" class="headerlink" title="垂直居中-父元素高度确定的单行文本"></a>垂直居中-父元素高度确定的单行文本</h2><p>我们在实际工作中也会遇到需要设置垂直居中的场景，比如好多报纸的文章标题在左右一侧时，常常会设置为垂直居中，为了用户体验性好。<br>这里我们又得分两种情况：父元素高度确定的单行文本，以及父元素高度确定的多行文本。<br>本节我们先来看第一种父元素高度确定的单行文本, 怎么设置它为垂直居中呢？<br>父元素高度确定的单行文本的竖直居中的方法是通过设置父元素的 height 和 line-height 高度一致来实现的。(height: 该元素的高度，line-height: 顾名思义，行高（行间距），指在文本中，行与行之间的 基线间的距离 )。<br>line-height 与 font-size 的计算值之差，在 CSS 中成为“行间距”。分为两半，分别加到一个文本行内容的顶部和底部。<br>这种文字行高与块高一致带来了一个弊端：==当文字内容的长度大于块的宽时，就有内容脱离了块。==<br>如下代码：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">hi,imooc!</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">css代码：</div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.container</span>&#123;</div><div class="line"><span class="attribute">height</span>:<span class="number">100px</span>;</div><div class="line"><span class="attribute">line-height</span>:<span class="number">100px</span>;</div><div class="line"><span class="attribute">background</span>:<span class="number">#999</span>;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>任务<br>我来试试：补充右侧代码使 h2 中的文本垂直方向居中。（记得点击右上角的全屏按钮查看效果哦！）</p>
<h2 id="垂直居中-父元素高度确定的多行文本（方法一）"><a href="#垂直居中-父元素高度确定的多行文本（方法一）" class="headerlink" title="垂直居中-父元素高度确定的多行文本（方法一）"></a>垂直居中-父元素高度确定的多行文本（方法一）</h2><p>父元素高度确定的多行文本、图片等的竖直居中的方法有两种：<br>方法一：<strong>使用插入 table</strong>  (包括tbody、tr、td)标签，同时<strong>设置 vertical-align：middle。</strong><br>css 中有一个用于竖直居中的属性 vertical-align，在父元素设置此样式时，会对inline-block类型的子元素都有用。下面看一下例子：<br>html代码：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">tbody</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>看我是否可以居中。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<p>css代码：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">table</span> <span class="selector-tag">td</span>&#123;<span class="attribute">height</span>:<span class="number">500px</span>;<span class="attribute">background</span>:<span class="number">#ccc</span>&#125;</div></pre></td></tr></table></figure>
<p>因为 td 标签默认情况下就默认设置了 vertical-align 为 middle，所以我们不需要显式地设置了。<br>任务<br>我来试试：把右侧的小女生图片设置 为相对于浏览器窗口垂直居中。（记得点击右上角的全屏按钮查看效果哦！）</p>
<h2 id="垂直居中-父元素高度确定的多行文本（方法二）"><a href="#垂直居中-父元素高度确定的多行文本（方法二）" class="headerlink" title="垂直居中-父元素高度确定的多行文本（方法二）"></a>垂直居中-父元素高度确定的多行文本（方法二）</h2><p>除了上一节讲到的插入table标签，可以使父元素高度确定的多行文本垂直居中之外，本节介绍另外一种实现这种效果的方法。但这种方法兼容性比较差，只是提供大家学习参考。<br>在 chrome、firefox 及 IE8 以上的浏览器下可以设置块级元素的 display 为 table-cell（设置为表格单元显示），激活 <strong>vertical-align</strong> 属性，但注意 IE6、7 并不支持这个样式, 兼容性比较差。<br>html代码：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>看我是否可以居中。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>看我是否可以居中。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>看我是否可以居中。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">css代码：</div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.container</span>&#123;</div><div class="line"><span class="attribute">height</span>:<span class="number">300px</span>;</div><div class="line"><span class="attribute">background</span>:<span class="number">#ccc</span>;</div><div class="line"><span class="attribute">display</span>:table-cell;<span class="comment">/*IE8以上及Chrome、Firefox*/</span></div><div class="line"><span class="attribute">vertical-align</span>:middle;<span class="comment">/*IE8以上及Chrome、Firefox*/</span></div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这种方法的好处是不用添加多余的==无意义的标签，但缺点也很明显，它的兼容性不是很好，不兼容 IE6、7==而且这样修改display的block变成了table-cell，破坏了原有的块状元素的性质。<br>任务<br>我来试试：如果你使用的是 chrome、firefox 及 IE8 以上的浏览器，你可以使用本小节的方法把右小女生的图片设置为垂直居中。（记得点击右上角的全屏按钮查看效果哦！）</p>
<h2 id="隐性改变display类型"><a href="#隐性改变display类型" class="headerlink" title="隐性改变display类型"></a>隐性改变display类型</h2><p>有一个有趣的现象就是当为元素（不论之前是什么类型元素，display:none 除外）设置以下 2 个句之一：</p>
<ol>
<li>position : absolute </li>
<li>float : left 或 float:right<br>简单来说，只要html代码中出现以上两句之一，元素的display显示类型就会自动变为以 display:inline-block（块状元素）的方式显示，当然就可以设置元素的 width 和 height 了，且默认宽度不占满父元素。<br>如下面的代码，小伙伴们都知道 a 标签是 行内元素 ，所以设置它的 width 是 没有效果的，但是设置为 position:absolute 以后，就可以了。</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">title</span>=<span class="string">""</span>&gt;</span>进入课程请单击这里<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">css代码</div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.container</span> <span class="selector-tag">a</span>&#123;</div><div class="line"><span class="attribute">position</span>:absolute;</div><div class="line"><span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line"><span class="attribute">background</span>:<span class="number">#ccc</span>;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>想不起 display:inline-block 是做什么的小伙伴们，单击“元素分类–内联块状元素”可返回到前面小节进行复习。</p>
<p>任务<br>我来试试：下面我们来试试 float 有没有这种功能。（记得点击右上角的全屏按钮查看效果哦！）<br>把右侧代码编辑器中的第 8 行改为 float:left ;看是否 width:200px 还起作用。</p>
<h2 id="属性-描述"><a href="#属性-描述" class="headerlink" title="属性 描述"></a>属性 描述</h2><blockquote>
<p>position<br> 把元素放置到一个静态的、相对的、绝对的、或固定的位置中。<br> top<br>定义了一个定位元素的上外边距边界与其包含块上边界之间的偏移。<br>right<br>定义了定位元素右外边距边界与其包含块右边界之间的偏移。<br>bottom<br>定义了定位元素下外边距边界与其包含块下边界之间的偏移。<br>left<br>定义了定位元素左外边距边界与其包含块左边界之间的偏移。<br>overflow<br>设置当元素的内容溢出其区域时发生的事情。<br>clip<br>设置元素的形状。元素被剪入这个形状之中，然后显示出来。<br>vertical-align<br>设置元素的垂直对齐方式。<br>z-index<br>设置元素的堆叠顺序</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;元素分类&quot;&gt;&lt;a href=&quot;#元素分类&quot; class=&quot;headerlink&quot; title=&quot;元素分类&quot;&gt;&lt;/a&gt;元素分类&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;在讲解CSS布局之前，我们需要提前知道一些知识，在CSS中，html中的标签元素大体被分为三种不同的类型：块状元素、内联元素(又叫行内元素)和内联块状元素。&lt;br&gt;常用的块状元素有：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;、&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;、&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;...&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h6&lt;/span&gt;&amp;gt;&lt;/span&gt;、&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ol&lt;/span&gt;&amp;gt;&lt;/span&gt;、&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;、&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dl&lt;/span&gt;&amp;gt;&lt;/span&gt;、&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;table&lt;/span&gt;&amp;gt;&lt;/span&gt;、&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;address&lt;/span&gt;&amp;gt;&lt;/span&gt;、&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;blockquote&lt;/span&gt;&amp;gt;&lt;/span&gt; 、&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;常用的内联元素有：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;、&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;、&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;、&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;i&lt;/span&gt;&amp;gt;&lt;/span&gt;、&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;em&lt;/span&gt;&amp;gt;&lt;/span&gt;、&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;strong&lt;/span&gt;&amp;gt;&lt;/span&gt;、&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;、&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;q&lt;/span&gt;&amp;gt;&lt;/span&gt;、&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;var&lt;/span&gt;&amp;gt;&lt;/span&gt;、&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;cite&lt;/span&gt;&amp;gt;&lt;/span&gt;、&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;code&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;常用的内联块状元素有：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;img&lt;/span&gt;&amp;gt;&lt;/span&gt;、&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;元素分类–块级元素&quot;&gt;&lt;a href=&quot;#元素分类–块级元素&quot; class=&quot;headerlink&quot; title=&quot;元素分类–块级元素&quot;&gt;&lt;/a&gt;元素分类–块级元素&lt;/h2&gt;&lt;figure class=&quot;highlight pf&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;什么是块级元素？在html中&lt;span class=&quot;variable&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;、 &lt;span class=&quot;variable&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;、&lt;span class=&quot;variable&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;、&lt;span class=&quot;variable&quot;&gt;&amp;lt;form&amp;gt;&lt;/span&gt;、&lt;span class=&quot;variable&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt; 和 &lt;span class=&quot;variable&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;就是块级元素。设置display:&lt;span class=&quot;built_in&quot;&gt;block&lt;/span&gt;就是将元素显示为块级元素。如下代码就是将内联元素a转换为块状元素，从而使a元素具有块状元素特点。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;a&amp;#123;display:&lt;span class=&quot;built_in&quot;&gt;block&lt;/span&gt;;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;块级元素特点：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;、每个块级元素都从新的一行开始，并且其后的元素也另起一行。（真霸道，一个块级元素独占一行）&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;、元素的高度、宽度、行高以及顶和底边距都可设置。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;、元素宽度在不设置的情况下，是它本身父容器的&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;%（和父元素的宽度一致），除非设定一个宽度。&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;元素分类–内联元素&quot;&gt;&lt;a href=&quot;#元素分类–内联元素&quot; class=&quot;headerlink&quot; title=&quot;元素分类–内联元素&quot;&gt;&lt;/a&gt;元素分类–内联元素&lt;/h2&gt;&lt;figure class=&quot;highlight dts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;在html中，&lt;span class=&quot;params&quot;&gt;&amp;lt;span&amp;gt;&lt;/span&gt;、&lt;span class=&quot;params&quot;&gt;&amp;lt;a&amp;gt;&lt;/span&gt;、&lt;span class=&quot;params&quot;&gt;&amp;lt;label&amp;gt;&lt;/span&gt;、 &lt;span class=&quot;params&quot;&gt;&amp;lt;strong&amp;gt;&lt;/span&gt; 和&lt;span class=&quot;params&quot;&gt;&amp;lt;em&amp;gt;&lt;/span&gt;就是典型的内联元素（行内元素）（inline）元素。当然块状元素也可以通过代码display:inline将元素设置为内联元素。如下代码就是将块状元素div转换为内联元素，从而使 div 元素具有内联元素特点。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;div&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;display:&lt;/span&gt;inline;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;......&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;params&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;我要变成内联元素&lt;span class=&quot;params&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;内联元素特点&lt;/strong&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 1、和其他元素都在一行上；&lt;br&gt; 2、元素的高度、宽度及顶部和底部边距不可设置；&lt;br&gt; 3、元素的宽度就是它包含的文字或图片的宽度，不可改变。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;元素分类–内联块状元素&quot;&gt;&lt;a href=&quot;#元素分类–内联块状元素&quot; class=&quot;headerlink&quot; title=&quot;元素分类–内联块状元素&quot;&gt;&lt;/a&gt;元素分类–内联块状元素&lt;/h2&gt;&lt;figure class=&quot;highlight oxygene&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;内联块状元素（&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt;-&lt;span class=&quot;keyword&quot;&gt;block&lt;/span&gt;）就是同时具备内联元素、块状元素的特点，代码display:&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt;-&lt;span class=&quot;keyword&quot;&gt;block&lt;/span&gt;就是将元素设置为内联块状元素。(css2.&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;新增)，&amp;lt;img&amp;gt;、&amp;lt;input&amp;gt;标签就是这种内联块状标签。&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;inline-block 元素特点&lt;/strong&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1、和其他元素都在一行上；&lt;/p&gt;
&lt;p&gt;2、元素的高度、宽度、行高以及顶和底边距都可设置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;盒模型&quot;&gt;&lt;a href=&quot;#盒模型&quot; class=&quot;headerlink&quot; title=&quot;盒模型&quot;&gt;&lt;/a&gt;盒模型&lt;/h1&gt;&lt;h2 id=&quot;盒模型–边框（一）&quot;&gt;&lt;a href=&quot;#盒模型–边框（一）&quot; class=&quot;headerlink&quot; title=&quot;盒模型–边框（一）&quot;&gt;&lt;/a&gt;盒模型–边框（一）&lt;/h2&gt;&lt;p&gt;盒子模型的边框就是围绕着内容及补白的线，这条线你可以设置它的粗细、样式和颜色(边框三个属性)。&lt;br&gt;如下面代码为 div 来设置边框粗细为 2px、样式为实心的、颜色为红色的边框：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;div&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;border&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;2px&lt;/span&gt; solid red;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;上面是 &lt;span class=&quot;selector-tag&quot;&gt;border&lt;/span&gt; 代码的缩写形式，可以分开写：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;div&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;border-width&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;2px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;border-style&lt;/span&gt;:solid;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;border-color&lt;/span&gt;:red;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1、border-style（边框样式）常见样式有： dashed（虚线）| dotted（点线）| solid（实线）。&lt;/p&gt;
&lt;p&gt;2、border-color（边框颜色）中的颜色可设置为十六进制颜色，如: border-color:#888;//前面的井号不要忘掉。&lt;/p&gt;
&lt;p&gt;3、border-width（边框宽度）中的宽度也可以设置为： thin | medium |&lt;br&gt;thick（但不是很常用），最常还是用象素（px）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;盒模型–边框（二）&quot;&gt;&lt;a href=&quot;#盒模型–边框（二）&quot; class=&quot;headerlink&quot; title=&quot;盒模型–边框（二）&quot;&gt;&lt;/a&gt;盒模型–边框（二）&lt;/h2&gt;&lt;p&gt;现在有一个问题，如果有想为 p 标签单独设置下边框，而其它三边都不设置边框样式怎么办呢？css 样式中允许只为一个方向的边框设置样式：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;div&lt;/span&gt;&amp;#123;&lt;span class=&quot;attribute&quot;&gt;border-bottom&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt; solid red;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;同样可以使用下面代码实现其它三边(上、右、左)边框的设置：&lt;/p&gt;
&lt;figure class=&quot;highlight scss&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;border-top&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt; solid red;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;border-right&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt; solid red;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;border-left&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt; solid red;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="css" scheme="http://liuhouer.github.io/categories/css/"/>
    
    
      <category term="css" scheme="http://liuhouer.github.io/tags/css/"/>
    
      <category term="盒子模型" scheme="http://liuhouer.github.io/tags/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>css结构和布局</title>
    <link href="http://liuhouer.github.io/2017/12/26/css%E7%BB%93%E6%9E%84%E5%92%8C%E5%B8%83%E5%B1%80/"/>
    <id>http://liuhouer.github.io/2017/12/26/css结构和布局/</id>
    <published>2017-12-26T02:24:09.000Z</published>
    <updated>2018-01-03T08:56:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="css结构和布局"><a href="#css结构和布局" class="headerlink" title="css结构和布局"></a>css结构和布局</h1><blockquote>
<p>css 样式由选择符和声明组成，而声明又由属性和值组成，如下图所示：</p>
</blockquote>
<p><img src="http://img.mukewang.com/52fde5c30001b0fe03030117.jpg" alt=""></p>
<ul>
<li><strong>选择符</strong>：又称选择器，指明网页中要应用样式规则的元素，如本例中是网页中所有的段（p）的文字将变成蓝色，而其他的元素（如ol）不会受到影响。</li>
<li><strong>声明</strong>：在英文大括号“｛｝”中的的就是声明，属性和值之间用英文冒号“：”分隔。当有多条声明时，中间可以英文分号“;”分隔，如下所示：<br>p{font-size:12px;color:red;}</li>
</ul>
<h2 id="css样式种类"><a href="#css样式种类" class="headerlink" title="css样式种类"></a>css样式种类</h2><blockquote>
<p>CSS样式可以写在哪些地方呢？从CSS 样式代码插入的形式来看基本可以分为以下3种：<strong>内联式</strong>、<strong>嵌入式</strong>和<strong>外部式</strong>三种。这一小节先来讲解内联式。</p>
</blockquote>
<ul>
<li>内联式css样式表就是把css代码直接写在现有的HTML标签中</li>
</ul>
<blockquote>
<pre><code>&lt;p style=&quot;color:red&quot;&gt;这里文字是红色。&lt;/p&gt;
</code></pre></blockquote>
<ul>
<li><p>嵌入式css样式，就是可以把css样式代码写在<code>&lt;style type=&quot;text/css&quot;&gt;&lt;/style&gt;</code>标签之间。</p>
<blockquote>
<pre><code>如下面代码实现把三个&lt;span&gt;标签中的文字设置为红色：
            &lt;style type=&quot;text/css&quot;&gt;
            span{
            color:red;
            }
            &lt;/style&gt;
</code></pre></blockquote>
<ul>
<li>外部式css样式，写在单独的一个文件中</li>
</ul>
</li>
</ul>
<blockquote>
<pre><code>外部式css样式(也可称为外联式)就是把css代码写一个单独的外部文件中，这个css样式

  文件以“.css”为扩展名，在&lt;head&gt;内（不是在&lt;style&gt;标签内）使用&lt;link&gt;标签将css样式文件链接到HTML文件内，如下面代码：
        &lt;link href=&quot;base.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;
</code></pre></blockquote>
<p><strong>三种方法的优先级</strong><br>有的小伙伴问了，如果有一种情况：对于同一个元素我们同时用了三种方法设置css样式，那么哪种方法真正有效呢？在右边编辑器就出现了这种情况<br>1、使用内联式CSS设置“超酷的互联网”文字为粉色。<br>2、然后使用嵌入式CSS来设置文字为红色。<br>3、最后又使用外部式设置文字为蓝色（style.css文件中设置）。<br>但最终你可以观察到“超酷的互联网”这个短词的文本被设置为了粉色。因为这三种样式是有优先级的，记住他们的优先级：</p>
<p><strong>内联式 &gt; 嵌入式 &gt; 外部式</strong></p>
<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><h3 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h3><p>p img body</p>
<h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><p>类选择器在css样式编码中是最常用到的，如右侧代码编辑器中的代码:可以实现为“胆小如鼠”、“勇气”字体设置为红色。<br>语法：<br>.类选器名称{css样式代码;}<br>注意：<br>1、英文圆点开头<br>2、其中类选器名称可以任意起名（但不要起中文噢）<br>使用方法：<br>第一步：使用合适的标签把要修饰的内容标记起来，如下：<br><span>胆小如鼠</span><br>第二步：使用class=”类选择器名称”为标签设置一个类，如下：<br><span class="stress">胆小如鼠</span><br>第三步：设置类选器css样式，如下：<br>.stress{color:red;}/<em>类前面要加入一个英文圆点</em>/</p>
<h3 id="ID选择器"><a href="#ID选择器" class="headerlink" title="ID选择器"></a>ID选择器</h3><p>在很多方面，ID选择器都类似于类选择符，但也有一些重要的区别：<br>1、为标签设置id=”ID名称”，而不是class=”类名称”。<br>2、ID选择符的前面是井号（#）号，而不是英文圆点（.）。<br>右侧代码编辑器中就是一个ID选择符的完整实例。<br>子选择器<br>还有一个比较有用的选择器子选择器，即大于符号(&gt;),用于选择指定标签元素的第一代子元素。如右侧代码编辑器中的代码：<br>.food&gt;li{border:1px solid red;}<br>这行代码会使class名为food下的子元素li（水果、蔬菜）加入红色实线边框。</p>
<blockquote>
<p>这个“选择指定标签元素的第一代子元素”就是让样式只作用于它的孩子，不作用与他的孙子。</p>
</blockquote>
<p>包含(后代)选择器<br>包含选择器，即加入空格,用于选择指定标签元素下的后辈元素。如右侧代码编辑器中的代码：<br>.first span{color:red;}</p>
<p>总结：<strong>&gt;作用于元素的第一代后代，空格作用于元素的所有后代。</strong></p>
<a id="more"></a>
<h3 id="通用选择器"><a href="#通用选择器" class="headerlink" title="通用选择器"></a>通用选择器</h3><p>通用选择器是功能最强大的选择器，它使用一个（*）号指定，它的作用是匹配html中所有标签元素，如下使用下面代码使用html中任意标签元素字体颜色全部设置为红色：</p>
<ul>
<li>{color:red;}<br>伪类选择符<br>更有趣的是伪类选择符，为什么叫做伪类选择符，它允许给html不存在的标签（标签的某种状态）设置样式，比如说我们给html中一个标签元素的鼠标滑过的状态来设置字体颜色：<br>a:hover{color:red;}<br>上面一行代码就是为 a 标签鼠标滑过的状态设置字体颜色变红。这样就会使第一段文字内容中的“胆小如鼠”文字加入鼠标滑过字体颜色变为红色特效。<br>关于伪选择符：<br>  关于伪类选择符，到目前为止，可以兼容所有浏鉴器的“伪类选择符”就是 a 标签上使用 :hover 了（其实伪类选择符还有很多，尤其是 css3 中，但是因为不能兼容所有浏览器，本教程只是讲了这一种最常用的）。其实 :hover 可以放在任意的标签上，比如说 p:hover，但是它们的兼容性也是很不好的，所以现在比较常用的还是 a:hover 的组合。</li>
</ul>
<h2 id="分组选择符"><a href="#分组选择符" class="headerlink" title="分组选择符"></a>分组选择符</h2><p>当你想为html中多个标签元素设置同一个样式时，可以使用<strong>分组选择符</strong>（，），如下代码为右侧代码编辑器中的h1、span标签同时设置字体颜色为红色：<br>h1,span{color:red;}<br>有一些css样式是不具有继承性的，有一些具有继承性的，例如字体系列属性</p>
<h2 id="权值"><a href="#权值" class="headerlink" title="权值"></a>权值</h2><p>标签的权值为1，类选择符的权值为10，ID选择符的权值最高为100<br>-继承也有权值但很低，有的文献提出它只有0.1，所以可以理解为继承的权值最低。</p>
<h2 id="层叠"><a href="#层叠" class="headerlink" title="层叠"></a>层叠</h2><p>我们来思考一个问题：如果在html文件中对于同一个元素可以有多个css样式存在并且这多个css样式具有相同权重值怎么办？好，这一小节中的层叠帮你解决这个问题。<br>层叠就是在html文件中对于同一个元素可以有多个css样式存在，当有相同权重的样式存在时，会根据这些css样式的前后顺序来决定，处于最后面的css样式会被应用。<br>如下面代码:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">p&#123;color:red;&#125;</div><div class="line">p&#123;color:green;&#125;</div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"first"</span>&gt;</span>三年级时，我还是一个<span class="tag">&lt;<span class="name">span</span>&gt;</span>胆小如鼠<span class="tag">&lt;/<span class="name">span</span>&gt;</span>的小女孩。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<p>最后 p 中的文本会设置为green，这个层叠很好理解，理解为后面的样式会覆盖前面的样式。<br>所以前面的css样式优先级就不难理解了：<br><strong>内联样式表（标签内部）&gt; 嵌入样式表（当前文件中）&gt; 外部样式表（外部文件中）</strong></p>
<h2 id="重要性"><a href="#重要性" class="headerlink" title="重要性"></a>重要性</h2><p>我们在做网页代码的时，有些特殊的情况需要为某些样式设置具有最高权值，怎么办？这时候我们可以使用!important来解决。<br>如下代码：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">p&#123;color:red!important;&#125;</div><div class="line">p&#123;color:green;&#125;</div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"first"</span>&gt;</span>三年级时，我还是一个<span class="tag">&lt;<span class="name">span</span>&gt;</span>胆小如鼠<span class="tag">&lt;/<span class="name">span</span>&gt;</span>的小女孩。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这时 p 段落中的文本会显示的red红色。<br>注意：!important要写在分号的前面</p>
<h2 id="文字排版–字体"><a href="#文字排版–字体" class="headerlink" title="文字排版–字体"></a>文字排版–字体</h2><p>我们可以使用css样式为网页中的文字设置字体、字号、颜色等样式属性。下面我们来看一个例子，下面代码实现：为网页中的文字设置字体为宋体。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span>&#123;<span class="attribute">font-family</span>:<span class="string">"宋体"</span>;&#125;</div></pre></td></tr></table></figure>
<h3 id="文字排版–删除线"><a href="#文字排版–删除线" class="headerlink" title="文字排版–删除线"></a>文字排版–删除线</h3><p>上图中的原价上的删除线使用下面代码就可以实现：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.oldPrice</span>&#123;<span class="attribute">text-decoration</span>:line-through;&#125;</div></pre></td></tr></table></figure>
<h3 id="段落排版–缩进"><a href="#段落排版–缩进" class="headerlink" title="段落排版–缩进"></a>段落排版–缩进</h3><p>中文文字中的段前习惯空两个文字的空白，这个特殊的样式可以用下面代码来实现：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">p&#123;text-indent:2em;&#125;</div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>1922年的春天，一个想要成名名叫尼克卡拉威（托比?马奎尔Tobey Maguire 饰）的作家，离开了美国中西部，来到了纽约。那是一个道德感渐失，爵士乐流行，走私为王，股票飞涨的时代。为了追寻他的美国梦，他搬入纽约附近一海湾居住。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<p>注意：2em的意思就是文字的2倍大小。</p>
<h3 id="段落排版–中文字间距、字母间距"><a href="#段落排版–中文字间距、字母间距" class="headerlink" title="段落排版–中文字间距、字母间距"></a>段落排版–中文字间距、字母间距</h3><h4 id="中文字间隔、字母间隔设置："><a href="#中文字间隔、字母间隔设置：" class="headerlink" title="中文字间隔、字母间隔设置："></a>中文字间隔、字母间隔设置：</h4><p>如果想在网页排版中设置文字间隔或者字母间隔就可以使用    letter-spacing 来实现，如下面代码：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">h1&#123;</div><div class="line">letter-spacing:50px;</div><div class="line">&#125;</div><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>了不起的盖茨比<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div></pre></td></tr></table></figure>
<p>注意：这个样式使用在英文单词时，是设置字母与字母之间的间距。</p>
<h4 id="单词间距设置："><a href="#单词间距设置：" class="headerlink" title="单词间距设置："></a>单词间距设置：</h4><p>如果我想设置英文单词之间的间距呢？可以使用 word-spacing 来实现。如下代码：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">h1&#123;</div><div class="line">word-spacing:50px;</div><div class="line">&#125;</div><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>welcome to imooc!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="段落排版–对齐"><a href="#段落排版–对齐" class="headerlink" title="段落排版–对齐"></a>段落排版–对齐</h3><p>想为块状元素中的文本、图片设置居中样式吗？可以使用text-align样式代码，如下代码可实现文本居中显示。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">h1&#123;</div><div class="line">text-align:center;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>了不起的盖茨比<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">同样可以设置居左：</div><div class="line">h1&#123;</div><div class="line">text-align:left;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>了不起的盖茨比<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">还可以设置居右：</div><div class="line">h1&#123;</div><div class="line">text-align:right;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>了不起的盖茨比<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;css结构和布局&quot;&gt;&lt;a href=&quot;#css结构和布局&quot; class=&quot;headerlink&quot; title=&quot;css结构和布局&quot;&gt;&lt;/a&gt;css结构和布局&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;css 样式由选择符和声明组成，而声明又由属性和值组成，如下图所示：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://img.mukewang.com/52fde5c30001b0fe03030117.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;选择符&lt;/strong&gt;：又称选择器，指明网页中要应用样式规则的元素，如本例中是网页中所有的段（p）的文字将变成蓝色，而其他的元素（如ol）不会受到影响。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;声明&lt;/strong&gt;：在英文大括号“｛｝”中的的就是声明，属性和值之间用英文冒号“：”分隔。当有多条声明时，中间可以英文分号“;”分隔，如下所示：&lt;br&gt;p{font-size:12px;color:red;}&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;css样式种类&quot;&gt;&lt;a href=&quot;#css样式种类&quot; class=&quot;headerlink&quot; title=&quot;css样式种类&quot;&gt;&lt;/a&gt;css样式种类&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;CSS样式可以写在哪些地方呢？从CSS 样式代码插入的形式来看基本可以分为以下3种：&lt;strong&gt;内联式&lt;/strong&gt;、&lt;strong&gt;嵌入式&lt;/strong&gt;和&lt;strong&gt;外部式&lt;/strong&gt;三种。这一小节先来讲解内联式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;内联式css样式表就是把css代码直接写在现有的HTML标签中&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;p style=&amp;quot;color:red&amp;quot;&amp;gt;这里文字是红色。&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;嵌入式css样式，就是可以把css样式代码写在&lt;code&gt;&amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;&amp;lt;/style&amp;gt;&lt;/code&gt;标签之间。&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;如下面代码实现把三个&amp;lt;span&amp;gt;标签中的文字设置为红色：
            &amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;
            span{
            color:red;
            }
            &amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;外部式css样式，写在单独的一个文件中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;外部式css样式(也可称为外联式)就是把css代码写一个单独的外部文件中，这个css样式

  文件以“.css”为扩展名，在&amp;lt;head&amp;gt;内（不是在&amp;lt;style&amp;gt;标签内）使用&amp;lt;link&amp;gt;标签将css样式文件链接到HTML文件内，如下面代码：
        &amp;lt;link href=&amp;quot;base.css&amp;quot; rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;三种方法的优先级&lt;/strong&gt;&lt;br&gt;有的小伙伴问了，如果有一种情况：对于同一个元素我们同时用了三种方法设置css样式，那么哪种方法真正有效呢？在右边编辑器就出现了这种情况&lt;br&gt;1、使用内联式CSS设置“超酷的互联网”文字为粉色。&lt;br&gt;2、然后使用嵌入式CSS来设置文字为红色。&lt;br&gt;3、最后又使用外部式设置文字为蓝色（style.css文件中设置）。&lt;br&gt;但最终你可以观察到“超酷的互联网”这个短词的文本被设置为了粉色。因为这三种样式是有优先级的，记住他们的优先级：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;内联式 &amp;gt; 嵌入式 &amp;gt; 外部式&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;选择器&quot;&gt;&lt;a href=&quot;#选择器&quot; class=&quot;headerlink&quot; title=&quot;选择器&quot;&gt;&lt;/a&gt;选择器&lt;/h2&gt;&lt;h3 id=&quot;标签选择器&quot;&gt;&lt;a href=&quot;#标签选择器&quot; class=&quot;headerlink&quot; title=&quot;标签选择器&quot;&gt;&lt;/a&gt;标签选择器&lt;/h3&gt;&lt;p&gt;p img body&lt;/p&gt;
&lt;h3 id=&quot;类选择器&quot;&gt;&lt;a href=&quot;#类选择器&quot; class=&quot;headerlink&quot; title=&quot;类选择器&quot;&gt;&lt;/a&gt;类选择器&lt;/h3&gt;&lt;p&gt;类选择器在css样式编码中是最常用到的，如右侧代码编辑器中的代码:可以实现为“胆小如鼠”、“勇气”字体设置为红色。&lt;br&gt;语法：&lt;br&gt;.类选器名称{css样式代码;}&lt;br&gt;注意：&lt;br&gt;1、英文圆点开头&lt;br&gt;2、其中类选器名称可以任意起名（但不要起中文噢）&lt;br&gt;使用方法：&lt;br&gt;第一步：使用合适的标签把要修饰的内容标记起来，如下：&lt;br&gt;&lt;span&gt;胆小如鼠&lt;/span&gt;&lt;br&gt;第二步：使用class=”类选择器名称”为标签设置一个类，如下：&lt;br&gt;&lt;span class=&quot;stress&quot;&gt;胆小如鼠&lt;/span&gt;&lt;br&gt;第三步：设置类选器css样式，如下：&lt;br&gt;.stress{color:red;}/&lt;em&gt;类前面要加入一个英文圆点&lt;/em&gt;/&lt;/p&gt;
&lt;h3 id=&quot;ID选择器&quot;&gt;&lt;a href=&quot;#ID选择器&quot; class=&quot;headerlink&quot; title=&quot;ID选择器&quot;&gt;&lt;/a&gt;ID选择器&lt;/h3&gt;&lt;p&gt;在很多方面，ID选择器都类似于类选择符，但也有一些重要的区别：&lt;br&gt;1、为标签设置id=”ID名称”，而不是class=”类名称”。&lt;br&gt;2、ID选择符的前面是井号（#）号，而不是英文圆点（.）。&lt;br&gt;右侧代码编辑器中就是一个ID选择符的完整实例。&lt;br&gt;子选择器&lt;br&gt;还有一个比较有用的选择器子选择器，即大于符号(&amp;gt;),用于选择指定标签元素的第一代子元素。如右侧代码编辑器中的代码：&lt;br&gt;.food&amp;gt;li{border:1px solid red;}&lt;br&gt;这行代码会使class名为food下的子元素li（水果、蔬菜）加入红色实线边框。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这个“选择指定标签元素的第一代子元素”就是让样式只作用于它的孩子，不作用与他的孙子。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;包含(后代)选择器&lt;br&gt;包含选择器，即加入空格,用于选择指定标签元素下的后辈元素。如右侧代码编辑器中的代码：&lt;br&gt;.first span{color:red;}&lt;/p&gt;
&lt;p&gt;总结：&lt;strong&gt;&amp;gt;作用于元素的第一代后代，空格作用于元素的所有后代。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="css" scheme="http://liuhouer.github.io/categories/css/"/>
    
    
      <category term="css" scheme="http://liuhouer.github.io/tags/css/"/>
    
      <category term="布局" scheme="http://liuhouer.github.io/tags/%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>html容易忽略的标签和结构</title>
    <link href="http://liuhouer.github.io/2017/12/25/html%E5%AE%B9%E6%98%93%E5%BF%BD%E7%95%A5%E7%9A%84%E6%A0%87%E7%AD%BE%E5%92%8C%E7%BB%93%E6%9E%84/"/>
    <id>http://liuhouer.github.io/2017/12/25/html容易忽略的标签和结构/</id>
    <published>2017-12-25T02:24:09.000Z</published>
    <updated>2018-01-03T08:51:33.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<ol>
<li>HTML是网页内容的载体。内容就是网页制作者放在页面上想要让用户浏览的信息，可以包含文字、图片、视频等。</li>
<li>CSS样式是表现。就像网页的外衣。比如，标题字体、颜色变化，或为标题加入背景图片、边框等。所有这些用来改变内容外观的东西称之为表现。</li>
<li>JavaScript是用来实现网页上的特效效果。如：鼠标滑过弹出下拉菜单。或鼠标滑过表格的背景颜色改变。还有焦点新闻（新闻图片）的轮换。可以这么理解，有动画的，有交互的一般都是用JavaScript来实现的。<br>下面给大家布置一个任务，在完成任务的时候，每输入一行代码，代码窗口就会立即显示出效果。</li>
</ol>
<p>下面我们来了解一下<head>标签的作用。文档的头部描述了文档的各种属性和信息，包括文档的标题等。绝大多数文档头部包含的数据都不会真正作为内容显示给读者。<br>下面这些标签可用在 head 部分：</head></p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>...<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined">...</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">...</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p><code>&lt;title&gt;</code>标签：在<code>&lt;title&gt;</code>和<code>&lt;/title&gt;</code>标签之间的文字内容是网页的标题信息，它会出现在浏览器的标题栏中。网页的title标签用于告诉用户和搜索引擎这个网页的主要内容是什么，搜索引擎可以通过网页标题，迅速的判断出网页的主题。每个网页的内容都是不同的，每个网页都应该有一个独一无二的title。</p>
<p><code>&lt;em&gt;</code>的内容在浏览中显示为斜体，<strong>显示为加粗。如果不喜欢这种样式，没有关系，以后可以使用css样式去改变它。</strong></p>
<p><code>&lt;q&gt;</code>标签，==短文本引用==<br>      想在你的html中加一段引用吗？比如在你的网页的文章里想引用某个作家的一句诗，这样会使你的文章更加出彩，那么<q>标签是你所需要的。<br>语法：<br><code>&lt;q&gt;</code>引用文本<code>&lt;/q&gt;</code><br>不需要双引号</q></p>
<pre><code>`&lt;blockquote&gt;`的作用也是引用别人的文本。但它是对长文本的引用，如在文章中引入大段某知名作家的文字，这时需要这个标签。
  等等，上一节`&lt;q&gt;`标签不是也是对文本的引用吗？不要忘记`&lt;q&gt;`标签是对简短文本的引用，比如说引用一句话就用到`&lt;q&gt;`标签。
  如想在我的文章中引用李白《关山月》中的诗句，因为引用文本比较长，所以使用`&lt;blockquote&gt;`。
</code></pre><p>语法: <code>&lt;blockquote&gt;</code>引用文本<code>&lt;/blockquote&gt;</code></p>
<pre><code>认识&lt;hr&gt;标签，添加水平横线
&lt;address&gt;标签，为网页加入地址信息

想加入一行代码吗？使用&lt;code&gt;标签

单行&lt;code&gt;&lt;/code&gt;;
多行代码，&lt;pre&gt;

注意：&lt;pre&gt; 标签不只是为显示计算机的源代码时用的，在你需要在网页中预显示格&gt;     式时都可以使用它，只是&lt;pre&gt;标签的一个常见应用就是用来展示计算机的源代码。

ul标签是圆点
ol是数字 可以使用&lt;ol&gt;标签来制作有序列表来展示。
</code></pre></blockquote>
<pre><code>&lt;table&gt;(表格标签)
&lt;tbody&gt;（不加tbody表格将加载完再显示，加tbody表格将逐行显示，还有另外两个thead&gt;&lt;tfooter&gt;）
&lt;tr&gt;（行标签）
&lt;th&gt;&lt;/th&gt;（表头标签）
&lt;td&gt;&lt;/td&gt;（单元格标签）
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

caption标签，为表格添加标题和摘要
表格还是需要添加一些标签进行优化，可以添加标题和摘要。代码如下：

摘要
摘要的内容是不会在浏览器中显示出来的。它的作用是增加表格的可读性(语义化)，使搜索引擎更好的读懂表格内容，还可以使屏幕阅读器更好的帮助特殊用户读取表格内容。
    语法：&lt;table summary=&quot;表格简介文本&quot;&gt;

标题
用以描述表格内容，标题的显示位置：表格上方。
     语法：
&lt;table&gt;
&lt;caption&gt;标题文本&lt;/caption&gt;
&lt;tr&gt;
&lt;td&gt;…&lt;/td&gt;
&lt;td&gt;…&lt;/td&gt;
…
&lt;/tr&gt;
…
&lt;/table&gt;


使用mailto在网页中链接Email地址

在网页的制作中为使网页炫丽美观，肯定是缺少不了图片，可以使用&lt;img&gt;标签来插入图片。
语法：
&lt;img src=&quot;图片地址&quot; alt=&quot;下载失败时的替换文本&quot; title = &quot;提示文本&quot;&gt;
举例：
&lt;img src = &quot;myimage.gif&quot; alt = &quot;My Image&quot; title = &quot;My Image&quot; /&gt;
文本域，支持多行文本输入
当用户需要在表单中输入大段文字时，需要用到文本输入域。
语法：
&lt;textarea rows=&quot;行数&quot; cols=&quot;列数&quot;&gt;文本&lt;/textarea&gt;


使用下拉列表框进行多选
下拉列表也可以进行多选操作，在&lt;select&gt;标签中设置multiple=&quot;multiple&quot;属性，就可以实现多选功能，在 windows 操作系统下，进行多选时按下Ctrl键同时进行单击（在 Mac下使用 Command +单击），可以选择多个选项。
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;HTML是网页内容的载体。内容就是网页制作者放在页面上想要让用户浏览的信息，可以包含文字、图片、视频等。&lt;/li&gt;
&lt;li&gt;CSS样式是表现。就像网页的外衣。比如，标题字体、颜色变化，或为标题加入背景图片、边框等。所有这些用来改变内容外
    
    </summary>
    
      <category term="html" scheme="http://liuhouer.github.io/categories/html/"/>
    
    
      <category term="html" scheme="http://liuhouer.github.io/tags/html/"/>
    
      <category term="标签" scheme="http://liuhouer.github.io/tags/%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>quartz定时任务操作job-java非web项目</title>
    <link href="http://liuhouer.github.io/2017/11/15/quartz%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E6%93%8D%E4%BD%9Cjob-java%E9%9D%9Eweb%E9%A1%B9%E7%9B%AE/"/>
    <id>http://liuhouer.github.io/2017/11/15/quartz定时任务操作job-java非web项目/</id>
    <published>2017-11-15T09:46:45.000Z</published>
    <updated>2017-11-15T10:00:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="命题"><a href="#命题" class="headerlink" title="命题"></a>命题</h2><blockquote>
<p>最近有一个需求是：     实现一个java<br>standalone应用，定时处理一些数据，并且记录日志，假如定时任务停掉，就会报警<br>先实现各定时任务在java项目main运行，后边的再慢慢研究</p>
</blockquote>
<h2 id="实现-思路"><a href="#实现-思路" class="headerlink" title="实现 思路"></a>实现 思路</h2><blockquote>
<ul>
<li>创建我的job类</li>
<li>创建test用于写测试调用job的代码</li>
</ul>
</blockquote>
<a id="more"></a>
<h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="我的job类"><a href="#我的job类" class="headerlink" title="我的job类:"></a>我的job类:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.northpark.test.jobtask;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.quartz.Job;</div><div class="line"><span class="keyword">import</span> org.quartz.JobExecutionContext;</div><div class="line"><span class="keyword">import</span> org.quartz.JobExecutionException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> cn.northpark.utils.TimeUtils;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">myjob</span> <span class="keyword">implements</span> <span class="title">Job</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">myjob</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext arg0)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		System.out.println(TimeUtils.nowTime());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="测试执行类："><a href="#测试执行类：" class="headerlink" title="测试执行类："></a>测试执行类：</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.northpark.test.jobtask;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.quartz.CronScheduleBuilder;</div><div class="line"><span class="keyword">import</span> org.quartz.JobBuilder;</div><div class="line"><span class="keyword">import</span> org.quartz.JobDetail;</div><div class="line"><span class="keyword">import</span> org.quartz.JobKey;</div><div class="line"><span class="keyword">import</span> org.quartz.Scheduler;</div><div class="line"><span class="keyword">import</span> org.quartz.SimpleScheduleBuilder;</div><div class="line"><span class="keyword">import</span> org.quartz.Trigger;</div><div class="line"><span class="keyword">import</span> org.quartz.TriggerBuilder;</div><div class="line"><span class="keyword">import</span> org.quartz.impl.StdSchedulerFactory;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> class testjob &#123;</div><div class="line"></div><div class="line">	<span class="comment">//将每隔20秒执行一次 </span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> cronExpression = <span class="string">"0/20 * * * * ?"</span>;</div><div class="line">	</div><div class="line">	</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) <span class="keyword">throws</span> Exception &#123; </div><div class="line">		<span class="comment">//CronTrigger用于处理quartz表达式任务 比如每天的几点执行</span></div><div class="line">		<span class="comment">//SimpleTrigger   主要用于处理格时间重复调度</span></div><div class="line"></div><div class="line">		<span class="comment">// 首先，必需要取得一个Scheduler的引用 </span></div><div class="line">		Scheduler scheduler = <span class="keyword">new</span> StdSchedulerFactory().getScheduler();</div><div class="line">		scheduler.start();</div><div class="line"></div><div class="line">		<span class="comment">//定义一个job</span></div><div class="line">		JobKey jobKey  = <span class="keyword">new</span> JobKey(<span class="string">"test"</span>, <span class="string">"test-1"</span>);</div><div class="line">		JobDetail jobDetail = JobBuilder.newJob(myjob.class).withIdentity(jobKey).build();</div><div class="line"></div><div class="line">		<span class="comment">//定义一个重复触发器 //2秒一次</span></div><div class="line">		Trigger trigger = TriggerBuilder.newTrigger()</div><div class="line">				.withIdentity(<span class="string">"test"</span>,<span class="string">"test"</span>)</div><div class="line">				.startAt(<span class="keyword">new</span> Date(System.currentTimeMillis()+<span class="number">1000</span>))</div><div class="line">				.withSchedule(SimpleScheduleBuilder.simpleSchedule().withIntervalInSeconds(<span class="number">2</span>).repeatForever())</div><div class="line">				.build();</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">		<span class="comment">//定义一个job</span></div><div class="line">		JobKey jobKey2  = <span class="keyword">new</span> JobKey(<span class="string">"test2"</span>, <span class="string">"test-2"</span>);</div><div class="line">		JobDetail jobDetail2 = JobBuilder.newJob(myjob.class).withIdentity(jobKey2).build();</div><div class="line">		<span class="comment">//定义一个quartz表达式任务 比如每天的几点执行</span></div><div class="line">		Trigger crontrigger = TriggerBuilder.newTrigger()</div><div class="line">				.withIdentity(<span class="string">"test2"</span>,<span class="string">"test2"</span>)</div><div class="line">				.startAt(<span class="keyword">new</span> Date(System.currentTimeMillis()+<span class="number">1000</span>))</div><div class="line">				.withSchedule(CronScheduleBuilder.cronSchedule(cronExpression))</div><div class="line">				.build();</div><div class="line"></div><div class="line">		scheduler.scheduleJob(jobDetail, trigger);</div><div class="line">		scheduler.scheduleJob(jobDetail2, crontrigger);</div><div class="line"></div><div class="line">		<span class="comment">//Thread.sleep(5000); </span></div><div class="line"></div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="说明与总结："><a href="#说明与总结：" class="headerlink" title="说明与总结："></a>说明与总结：</h2><h3 id="2017年11月15日"><a href="#2017年11月15日" class="headerlink" title="2017年11月15日"></a>2017年11月15日</h3><ul>
<li>运行testjob.java ，即可开启定时任务</li>
<li><p>myjob为定义的job类</p>
</li>
<li><p>Job(接口)</p>
</li>
<li><p>JobDetail： 真正的任务内容，任务本身是集成Job接口的，但是真正的任务是JobBuilder通过反射的方式实例化的，</p>
</li>
<li>Trigger： 触发器，定义任务应当开始的时间，主要分为两类SimpleTrigger,CronTrigger;CronTrigger主要用于处理quartz表达式定义的任务，比如每个月20号，每个星期一之类的。</li>
</ul>
<blockquote>
<p> CronTrigger用于处理quartz表达式任务 比如每天的几点执行<br> SimpleTrigger   主要用于处理格时间重复调度</p>
</blockquote>
<ul>
<li>Scheduler：任务调度器, 计划执行者，现在我们有了要做的内容(jobdetail)，有了要做的时间(trigger)，接下来，就把这两个内容填充到计划任务Scheduler对象里面，到了时间它就可以自动运行了</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;命题&quot;&gt;&lt;a href=&quot;#命题&quot; class=&quot;headerlink&quot; title=&quot;命题&quot;&gt;&lt;/a&gt;命题&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;最近有一个需求是：     实现一个java&lt;br&gt;standalone应用，定时处理一些数据，并且记录日志，假如定时任务停掉，就会报警&lt;br&gt;先实现各定时任务在java项目main运行，后边的再慢慢研究&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;实现-思路&quot;&gt;&lt;a href=&quot;#实现-思路&quot; class=&quot;headerlink&quot; title=&quot;实现 思路&quot;&gt;&lt;/a&gt;实现 思路&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;创建我的job类&lt;/li&gt;
&lt;li&gt;创建test用于写测试调用job的代码&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="java" scheme="http://liuhouer.github.io/categories/java/"/>
    
      <category term="定时任务" scheme="http://liuhouer.github.io/categories/java/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    
    
      <category term="java" scheme="http://liuhouer.github.io/tags/java/"/>
    
      <category term="定时任务" scheme="http://liuhouer.github.io/tags/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    
      <category term="quartz" scheme="http://liuhouer.github.io/tags/quartz/"/>
    
  </entry>
  
  <entry>
    <title>多线程操作操作数据库</title>
    <link href="http://liuhouer.github.io/2017/11/08/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%93%8D%E4%BD%9C%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://liuhouer.github.io/2017/11/08/多线程操作操作数据库/</id>
    <published>2017-11-08T09:04:10.000Z</published>
    <updated>2017-11-15T09:42:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="命题"><a href="#命题" class="headerlink" title="命题"></a>命题</h2><blockquote>
<p>最近有一个需求是：     实现一个java<br>standalone应用，开辟静态HashMap（1500），创建500个线程，序号从1到500，每个线程都会建立3次连接访问数据库test，<br>调用数据库函数cms.sp_get_fundasset，传入线程序号作为参数。数据库函数返回的账户净值按序号写入对应的静态HashMap。统计500个线程全部结束后消耗的时间总长；</p>
</blockquote>
<h2 id="实现-思路"><a href="#实现-思路" class="headerlink" title="实现 思路"></a>实现 思路</h2><blockquote>
<ul>
<li>创建调用传统创建线程的类</li>
<li>创建db用于jdbc连接</li>
<li>创建test用于写测试代码</li>
</ul>
</blockquote>
<a id="more"></a>
<h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="线程类"><a href="#线程类" class="headerlink" title="线程类:"></a>线程类:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.northpark.test.multhread;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">public</span>  <span class="keyword">int</span> threadNo;</div><div class="line">	<span class="keyword">public</span>  CountDownLatch latch;</div><div class="line"></div><div class="line">	<span class="comment">//设置线程的编号</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ConnThread</span><span class="params">(<span class="keyword">int</span> threadNo,CountDownLatch latch)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.threadNo = threadNo;</div><div class="line">		<span class="keyword">this</span>.latch = latch;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="comment">// 建立连接，并且请求存储过程</span></div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			db.getConn();</div><div class="line"></div><div class="line">			<span class="comment">// 每个线程查询三次</span></div><div class="line">			<span class="comment">//调用存储过程 </span></div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</div><div class="line"></div><div class="line">				String result = db.callProcedureYY(db.conn,<span class="string">"cms.sp_get_fundasset"</span>,threadNo + <span class="number">500</span>*i);</div><div class="line"></div><div class="line">				test.map.put(String.valueOf(threadNo + <span class="number">500</span>*i), result);</div><div class="line">			&#125;</div><div class="line">			<span class="comment">//存放结果</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="comment">// db.closeConn();</span></div><div class="line">			latch.countDown();</div><div class="line">			System.out.println(<span class="string">"线程"</span>+threadNo+<span class="string">"执行完毕"</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			db.getConn();</div><div class="line">			String result = db.callProcedureYY(db.conn,<span class="string">"cms.sp_get_fundasset"</span>,<span class="number">1</span>);</div><div class="line">			System.out.println(<span class="string">"result---&gt;"</span>+result);</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			db.closeConn();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="数据连接类"><a href="#数据连接类" class="headerlink" title="数据连接类:"></a>数据连接类:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.northpark.test.multhread;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.sql.CallableStatement;</div><div class="line"><span class="keyword">import</span> java.sql.Connection;</div><div class="line"><span class="keyword">import</span> java.sql.DriverManager;</div><div class="line"><span class="keyword">import</span> java.sql.ResultSet;</div><div class="line"><span class="keyword">import</span> java.sql.SQLException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> oracle.jdbc.driver.OracleTypes;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">db</span>  </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Connection conn = <span class="keyword">null</span>; <span class="comment">// 数据库连接对象</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> CallableStatement cs = <span class="keyword">null</span>;<span class="comment">// 存储过程执行对象</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> ResultSet rs = <span class="keyword">null</span>;<span class="comment">// 结果集对象</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">getConn</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</div><div class="line">		Class.forName(<span class="string">"oracle.jdbc.driver.OracleDriver"</span>); <span class="comment">// 加载Oracle驱动程序</span></div><div class="line">		<span class="comment">// System.out.println("开始尝试连接数据库！");</span></div><div class="line">		String url = <span class="string">"jdbc:oracle:"</span> + <span class="string">"thin:@localhost:1521:test"</span>;<span class="comment">// 127.0.0.1是本机地址，XE是精简版Oracle的默认数据库名</span></div><div class="line">		String user = <span class="string">"test"</span>;<span class="comment">// 用户名,系统默认的账户名</span></div><div class="line">		String password = <span class="string">"test"</span>;<span class="comment">// 你安装时选设置的密码</span></div><div class="line">		conn = DriverManager.getConnection(url, user, password);<span class="comment">// 获取连接</span></div><div class="line">		<span class="comment">// System.out.println("连接成功！");</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 *</div><div class="line">	 * <span class="doctag">@Discription</span> 执行有参数，有返回值的存储过程</div><div class="line">	 * <span class="doctag">@return</span> void</div><div class="line">	 * <span class="doctag">@param</span> conn</div><div class="line">	 * <span class="doctag">@throws</span> Exception</div><div class="line">	 */</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 对应的存储过程语句 --有参数，有返回值 create or replace procedure deleteLine(byNo in</div><div class="line">	 * number,getCount out number) as begin delete from emp e where e.empno =</div><div class="line">	 * byNo; select count(*) into getCount from emp e; end;</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> String <span class="title">callProcedureYY</span><span class="params">(Connection conn,String funcName,<span class="keyword">int</span> index)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="comment">// 指定调用的存储过程</span></div><div class="line">		cs = conn.prepareCall(<span class="string">"&#123;?=call "</span>+funcName+<span class="string">"(?)&#125;"</span>);</div><div class="line">		<span class="comment">// 设置参数</span></div><div class="line">		cs.setInt(<span class="number">2</span>, index);</div><div class="line">		<span class="comment">// 这里需要配置OUT的参数新型</span></div><div class="line">		cs.registerOutParameter(<span class="number">1</span>, OracleTypes.FLOAT);</div><div class="line">		<span class="comment">// 执行调用</span></div><div class="line">		cs.execute();</div><div class="line">		<span class="comment">// 输入返回值</span></div><div class="line">		String result = String.valueOf(cs.getFloat(<span class="number">1</span>));</div><div class="line">		<span class="comment">// System.out.println(cs.getFloat(1));</span></div><div class="line"></div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 描述：</div><div class="line">	 * 关闭连接</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeConn</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">// 逐一将上面的几个对象关闭，因为不关闭的话会影响性能、并且占用资源</span></div><div class="line">			<span class="comment">// 注意关闭的顺序，最后使用的最先关闭</span></div><div class="line">			<span class="keyword">if</span> (rs != <span class="keyword">null</span>)</div><div class="line">				rs.close();</div><div class="line">			<span class="keyword">if</span> (cs != <span class="keyword">null</span>)</div><div class="line">				cs.close();</div><div class="line">			<span class="keyword">if</span> (conn != <span class="keyword">null</span>)</div><div class="line">				conn.close();</div><div class="line">			<span class="comment">// System.out.println("数据库连接已关闭！");</span></div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="测试执行类："><a href="#测试执行类：" class="headerlink" title="测试执行类："></a>测试执行类：</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.northpark.test.multhread;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.<span class="keyword">HashMap</span>;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.quartz.JobExecutionException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> cn.northpark.utils.TimeUtils;</div><div class="line"></div><div class="line"><span class="keyword">public</span> class test &#123;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;<span class="keyword">String</span>,<span class="keyword">String</span>&gt; <span class="built_in">map</span>  = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;<span class="keyword">String</span>,<span class="keyword">String</span>&gt;();</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> CONN_COUNT  = <span class="number">500</span>;</div><div class="line">	</div><div class="line"></div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span> arg0) <span class="keyword">throws</span> JobExecutionException &#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">//清空已有信息</span></div><div class="line">			<span class="built_in">map</span>.<span class="built_in">clear</span>();</div><div class="line"></div><div class="line">			<span class="keyword">String</span> start = TimeUtils.nowTime();</div><div class="line">			System.out.<span class="built_in">println</span>(<span class="string">"开始时间："</span>+start);</div><div class="line"></div><div class="line">			ArrayList&lt;Runnable&gt; threads = <span class="keyword">new</span> ArrayList&lt;Runnable&gt;();</div><div class="line"></div><div class="line">			CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(CONN_COUNT);</div><div class="line"></div><div class="line">			<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= CONN_COUNT; i++) &#123;</div><div class="line">				threads.<span class="built_in">add</span>(<span class="keyword">new</span> ConnThread(i,latch));</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="comment">// //开启线程</span></div><div class="line">			<span class="comment">//500 个线程  每个线程查询三次</span></div><div class="line">			<span class="keyword">for</span> (Runnable r:threads) &#123;</div><div class="line">				<span class="keyword">new</span> Thread(r).start();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="comment">//调用await方法阻塞当前线程，等待子线程完成再继续</span></div><div class="line">			latch.await();</div><div class="line"></div><div class="line">			<span class="comment">//释放连接</span></div><div class="line">			db.closeConn();</div><div class="line"></div><div class="line">			<span class="keyword">String</span> end = TimeUtils.nowTime();</div><div class="line">			System.out.<span class="built_in">println</span>(<span class="string">"结束时间："</span>+end);</div><div class="line"></div><div class="line">			System.out.<span class="built_in">println</span>(<span class="built_in">map</span>.<span class="built_in">size</span>()+<span class="string">"&gt;&gt;&gt;&gt;&gt;"</span>+<span class="built_in">map</span>);</div><div class="line">			System.out.<span class="built_in">println</span>(TimeUtils.getPastTime(end, start));</div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><h3 id="2017年11月8日"><a href="#2017年11月8日" class="headerlink" title="2017年11月8日"></a>2017年11月8日</h3><ul>
<li>运行test.java ，即可执行500个线程，分别调用函数返回结果，并且存放到map集合里.并且打印执行时间.</li>
<li>db.java里面是连接数据库的方法和信息 </li>
<li>ConnThread.java是线程类</li>
<li>TimeUtils.java是时间工具类</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;命题&quot;&gt;&lt;a href=&quot;#命题&quot; class=&quot;headerlink&quot; title=&quot;命题&quot;&gt;&lt;/a&gt;命题&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;最近有一个需求是：     实现一个java&lt;br&gt;standalone应用，开辟静态HashMap（1500），创建500个线程，序号从1到500，每个线程都会建立3次连接访问数据库test，&lt;br&gt;调用数据库函数cms.sp_get_fundasset，传入线程序号作为参数。数据库函数返回的账户净值按序号写入对应的静态HashMap。统计500个线程全部结束后消耗的时间总长；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;实现-思路&quot;&gt;&lt;a href=&quot;#实现-思路&quot; class=&quot;headerlink&quot; title=&quot;实现 思路&quot;&gt;&lt;/a&gt;实现 思路&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;创建调用传统创建线程的类&lt;/li&gt;
&lt;li&gt;创建db用于jdbc连接&lt;/li&gt;
&lt;li&gt;创建test用于写测试代码&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="java" scheme="http://liuhouer.github.io/categories/java/"/>
    
      <category term="多线程" scheme="http://liuhouer.github.io/categories/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="java" scheme="http://liuhouer.github.io/tags/java/"/>
    
      <category term="多线程" scheme="http://liuhouer.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>MySQL安全配置向导</title>
    <link href="http://liuhouer.github.io/2017/08/15/MySQL%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE%E5%90%91%E5%AF%BC/"/>
    <id>http://liuhouer.github.io/2017/08/15/MySQL安全配置向导/</id>
    <published>2017-08-15T02:24:09.000Z</published>
    <updated>2017-11-15T10:02:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>主要介绍了MySQL安全配置向导mysql_secure_installation各项配置的含义,并依据经验给予一了一些建议<br><strong>安装完mysql-server 会提示可以运行mysql_secure_installation。运行mysql_secure_installation会执行几个设置：</strong></p>
<ul>
<li>为root用户设置密码</li>
<li>删除匿名账号</li>
<li>取消root用户远程登录</li>
<li>删除test库和对test库的访问权限</li>
<li>刷新授权表使修改生效<br><strong>通过这几项的设置能够提高mysql库的安全。建议生产环境中mysql安装这完成后一定要运行一次mysql_secure_installation，详细步骤请参看下面的命令:</strong></li>
</ul>
</blockquote>
<a id="more"></a>
<figure class="highlight vbnet"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">[root@server1 ~]<span class="meta"># mysql_secure_installation</span></div><div class="line">NOTE: RUNNING ALL PARTS <span class="keyword">OF</span> THIS SCRIPT <span class="keyword">IS</span> RECOMMENDED <span class="keyword">FOR</span> ALL MySQL</div><div class="line">SERVERS <span class="keyword">IN</span> PRODUCTION USE! PLEASE READ <span class="keyword">EACH</span> <span class="keyword">STEP</span> CAREFULLY!</div><div class="line"><span class="keyword">In</span> <span class="keyword">order</span> <span class="keyword">to</span> log <span class="keyword">into</span> MySQL <span class="keyword">to</span> secure it, we<span class="comment">'ll need the current</span></div><div class="line">password <span class="keyword">for</span> the root user. <span class="keyword">If</span> you<span class="comment">'ve just installed MySQL, and</span></div><div class="line">you haven<span class="comment">'t set the root password yet, the password will be blank,</span></div><div class="line">so you should just press enter here.</div><div class="line">Enter current password <span class="keyword">for</span> root (enter <span class="keyword">for</span> none):&lt;–初次运行直接回车</div><div class="line">OK, successfully used password, moving <span class="keyword">on</span>…</div><div class="line">Setting the root password ensures that nobody can log <span class="keyword">into</span> the MySQL</div><div class="line">root user without the proper authorisation.</div><div class="line"><span class="keyword">Set</span> root password? [Y/n] ==&lt;– 是否设置root用户密码，输入y并回车或直接回车==</div><div class="line"><span class="keyword">New</span> password: ==&lt;– 设置root用户的密码==</div><div class="line">Re-enter <span class="keyword">new</span> password: ==&lt;– 再输入一次你设置的密码==</div><div class="line">Password updated successfully!</div><div class="line">Reloading privilege tables..</div><div class="line">… Success!</div><div class="line"><span class="keyword">By</span> <span class="keyword">default</span>, a MySQL installation has an anonymous user, allowing anyone</div><div class="line"><span class="keyword">to</span> log <span class="keyword">into</span> MySQL without having <span class="keyword">to</span> have a user account created <span class="keyword">for</span></div><div class="line">them. This <span class="keyword">is</span> intended only <span class="keyword">for</span> testing, <span class="keyword">and</span> <span class="keyword">to</span> make the installation</div><div class="line">go a bit smoother. You should remove them before moving <span class="keyword">into</span> a</div><div class="line">production environment.</div><div class="line">Remove anonymous users? [Y/n] ==&lt;– 是否删除匿名用户,生产环境建议删除，所以直接回车==</div><div class="line">… Success!</div><div class="line">Normally, root should only be allowed <span class="keyword">to</span> connect <span class="keyword">from</span> <span class="comment">'localhost'. This</span></div><div class="line">ensures that someone cannot guess at the root password <span class="keyword">from</span> the network.</div><div class="line">Disallow root login remotely? [Y/n] ==&lt;–是否禁止root远程登录,根据自己的需求选择Y/n并回车,建议禁止==</div><div class="line">… Success!</div><div class="line"><span class="keyword">By</span> <span class="keyword">default</span>, MySQL comes <span class="keyword">with</span> a database named <span class="comment">'test' that anyone can</span></div><div class="line">access. This <span class="keyword">is</span> also intended only <span class="keyword">for</span> testing, <span class="keyword">and</span> should be removed</div><div class="line">before moving <span class="keyword">into</span> a production environment.</div><div class="line">Remove test database <span class="keyword">and</span> access <span class="keyword">to</span> it? [Y/n] ==&lt;– 是否删除test数据库,直接回车==</div><div class="line">- Dropping test database…</div><div class="line">… Success!</div><div class="line">- Removing privileges <span class="keyword">on</span> test database…</div><div class="line">… Success!</div><div class="line">Reloading the privilege tables will ensure that all changes made so far</div><div class="line">will <span class="keyword">take</span> effect immediately.</div><div class="line">Reload privilege tables now? [Y/n] ==&lt;– 是否重新加载权限表，直接回车==</div><div class="line">… Success!</div><div class="line">Cleaning up…</div><div class="line">All done! <span class="keyword">If</span> you<span class="comment">'ve completed all of the above steps, your MySQL</span></div><div class="line">installation should now be secure.</div><div class="line">Thanks <span class="keyword">for</span> <span class="keyword">using</span> MySQL!</div><div class="line">[root@server1 ~]<span class="meta">#</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;主要介绍了MySQL安全配置向导mysql_secure_installation各项配置的含义,并依据经验给予一了一些建议&lt;br&gt;&lt;strong&gt;安装完mysql-server 会提示可以运行mysql_secure_installation。运行mysql_secure_installation会执行几个设置：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为root用户设置密码&lt;/li&gt;
&lt;li&gt;删除匿名账号&lt;/li&gt;
&lt;li&gt;取消root用户远程登录&lt;/li&gt;
&lt;li&gt;删除test库和对test库的访问权限&lt;/li&gt;
&lt;li&gt;刷新授权表使修改生效&lt;br&gt;&lt;strong&gt;通过这几项的设置能够提高mysql库的安全。建议生产环境中mysql安装这完成后一定要运行一次mysql_secure_installation，详细步骤请参看下面的命令:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="mysql" scheme="http://liuhouer.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://liuhouer.github.io/tags/mysql/"/>
    
      <category term="linux" scheme="http://liuhouer.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>centos 6.5 安装 MySql 6.7</title>
    <link href="http://liuhouer.github.io/2017/07/27/centos%206.5%20%E5%AE%89%E8%A3%85%20MySql%206.7/"/>
    <id>http://liuhouer.github.io/2017/07/27/centos 6.5 安装 MySql 6.7/</id>
    <published>2017-07-27T02:24:09.000Z</published>
    <updated>2017-08-15T08:57:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>之前尝试过3次centos安装mysql服务，都失败了，严重的时候，系统都挂了，所有服务重新撘~<br>我尝试了各种安装方式,例如:</p>
<blockquote>
<blockquote>
<p>下载别人提供好的tag.gz，解压缩，按照人家的步骤一步步来，结果安装完后启动失败~<br> 这样指令安装：yum install -y mysql-server mysql mysql-devel，安装完后启动失败，fuck！！！</p>
</blockquote>
<p>希望有同样遭遇的小伙伴，可以按照我的方式来装一次，版本号相同的话，肯定是可以的，所有的雷我都替你们趟过了！！ </p>
</blockquote>
</blockquote>
<h2 id="1-安装-MySQL-yum-资源库"><a href="#1-安装-MySQL-yum-资源库" class="headerlink" title="1.安装 MySQL yum 资源库"></a>1.安装 MySQL yum 资源库</h2><p> 找到需要下载的资源: <a href="http://dev.mysql.com/downloads/repo/yum/" target="_blank" rel="external">http://dev.mysql.com/downloads/repo/yum/</a></p>
<p><img src="http://7xpfpd.com1.z0.glb.clouddn.com/1.png" alt="找到需要下载的资源"></p>
<p>MySQL Yum 下载页面</p>
<p><img src="http://7xpfpd.com1.z0.glb.clouddn.com/2.png" alt="MySQL Yum 下载页面"></p>
<blockquote>
<p>复制了下载链接，wget获取资源库，确保没有错误，用md5校验，确保和官网文件是一致没错误的</p>
</blockquote>
<a id="more"></a>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget <span class="string">http:</span><span class="comment">//dev.mysql.com/get/mysql57-community-release-el6-7.noarch.rpm</span></div></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">md5sum mysql57-community-release-el6-<span class="number">7</span><span class="selector-class">.noarch</span><span class="selector-class">.rpm</span></div></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpm -ivh mysql57-community-release-el6-<span class="number">7</span><span class="selector-class">.noarch</span><span class="selector-class">.rpm</span></div></pre></td></tr></table></figure>
<p><img src="http://7xpfpd.com1.z0.glb.clouddn.com/3.jpg" alt="指令界面"></p>
<h2 id="2-安装-MySQL-5-7服务端和客户端依赖包"><a href="#2-安装-MySQL-5-7服务端和客户端依赖包" class="headerlink" title="2. 安装 MySQL 5.7服务端和客户端依赖包"></a>2. 安装 MySQL 5.7服务端和客户端依赖包</h2><blockquote>
<p>以上我们安装了mysql5.7的yum资源库，可以开始安装mysql服务端和客户端依赖包了</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum <span class="keyword">install</span> -y mysql-community-<span class="keyword">client</span> mysql-community-<span class="keyword">server</span></div></pre></td></tr></table></figure>
<p><img src="http://7xpfpd.com1.z0.glb.clouddn.com/4.jpg" alt="指令界面"></p>
<h2 id="3-启动-MySQL-5-7-Server-配置连接"><a href="#3-启动-MySQL-5-7-Server-配置连接" class="headerlink" title="3. 启动 MySQL 5.7 Server 配置连接 !"></a>3. 启动 MySQL 5.7 Server 配置连接 !</h2><blockquote>
<p>  Start MySQL 5.7 service<br>  打开mysql服务</p>
</blockquote>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">service mysqld start</span></div></pre></td></tr></table></figure>
<blockquote>
<p>And find initial mysql 5.7 root password from log file<br>找到初始化mysql的管理员密码，初始化密码在log文件中</p>
</blockquote>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grep -i temporary /<span class="built_in">var</span>/<span class="built_in">log</span>/mysqld.<span class="built_in">log</span></div></pre></td></tr></table></figure>
<blockquote>
<p>Login into MySQL 5.7 using password you got from temporary password<br>that you searched from above<br>利用初始化密码登录到mysql</p>
</blockquote>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">mysql -uroot -p</span></div></pre></td></tr></table></figure>
<blockquote>
<p>Only command MySQL 5.7 is going to let you run once you login with<br>your default password is password command<br>设置你的mysql管理员的新密码</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> <span class="keyword">FOR</span> <span class="string">'root'</span>@<span class="string">'localhost'</span> = <span class="keyword">PASSWORD</span>(<span class="string">'Yourpassword1!'</span>);</div></pre></td></tr></table></figure>
<p><img src="http://7xpfpd.com1.z0.glb.clouddn.com/5.jpg" alt="指令界面5-获取mysql初始化密码，设置管理员密码"></p>
<blockquote>
<p>这样就成功安装了MySQL 5.7 server<br>下面进行一些必要的配置</p>
</blockquote>
<h2 id="4-一些必要的配置"><a href="#4-一些必要的配置" class="headerlink" title="4.一些必要的配置"></a>4.一些必要的配置</h2><h3 id="1、-输入mysql管理员密码登录"><a href="#1、-输入mysql管理员密码登录" class="headerlink" title="1、 输入mysql管理员密码登录"></a>1、 输入mysql管理员密码登录</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">mysql -uroot -p</span></div></pre></td></tr></table></figure>
<h3 id="2、授权权限"><a href="#2、授权权限" class="headerlink" title="2、授权权限"></a>2、授权权限</h3><blockquote>
<p>允许任何主机使用“myuser”账号和“mypwd”密码连接到 MySQL 服务器。</p>
</blockquote>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mysql&gt; </div><div class="line">GRANT <span class="literal">ALL</span> PRIVILEGES <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'root'</span>@<span class="string">'%'</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">'noface@@^'</span> <span class="keyword">WITH</span> GRANT OPTION;  </div><div class="line"></div><div class="line">GRANT <span class="literal">ALL</span> PRIVILEGES <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'noface'</span>@<span class="string">'%'</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">'noface@'</span> <span class="keyword">WITH</span> GRANT OPTION;</div></pre></td></tr></table></figure>
<h3 id="3、立刻刷新生效"><a href="#3、立刻刷新生效" class="headerlink" title="3、立刻刷新生效"></a>3、立刻刷新生效</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; FLUSH PRIVILEGES;</div></pre></td></tr></table></figure>
<h3 id="4、之后还可以放开防火墙、设定自启动、增强MySQL安全设置等。"><a href="#4、之后还可以放开防火墙、设定自启动、增强MySQL安全设置等。" class="headerlink" title="4、之后还可以放开防火墙、设定自启动、增强MySQL安全设置等。"></a>4、之后还可以放开防火墙、设定自启动、增强MySQL安全设置等。</h3><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iptables -I INPUT -p tcp -m <span class="keyword">state</span> --state NEW -m tcp --dport <span class="number">3306</span> -j ACCEPT</div></pre></td></tr></table></figure>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/iptables <span class="built_in">save</span></div></pre></td></tr></table></figure>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">chkconfig</span> mysqld <span class="literal">on</span></div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql_secure_installation</div></pre></td></tr></table></figure>
<p>了解更多增强MySQL安全设置来<a href="http://blog.northpark.cn/2017/08/15/MySQL%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE%E5%90%91%E5%AF%BC/" target="_blank" rel="external">Northpark博客</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;之前尝试过3次centos安装mysql服务，都失败了，严重的时候，系统都挂了，所有服务重新撘~&lt;br&gt;我尝试了各种安装方式,例如:&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;下载别人提供好的tag.gz，解压缩，按照人家的步骤一步步来，结果安装完后启动失败~&lt;br&gt; 这样指令安装：yum install -y mysql-server mysql mysql-devel，安装完后启动失败，fuck！！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;希望有同样遭遇的小伙伴，可以按照我的方式来装一次，版本号相同的话，肯定是可以的，所有的雷我都替你们趟过了！！ &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-安装-MySQL-yum-资源库&quot;&gt;&lt;a href=&quot;#1-安装-MySQL-yum-资源库&quot; class=&quot;headerlink&quot; title=&quot;1.安装 MySQL yum 资源库&quot;&gt;&lt;/a&gt;1.安装 MySQL yum 资源库&lt;/h2&gt;&lt;p&gt; 找到需要下载的资源: &lt;a href=&quot;http://dev.mysql.com/downloads/repo/yum/&quot;&gt;http://dev.mysql.com/downloads/repo/yum/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpfpd.com1.z0.glb.clouddn.com/1.png&quot; alt=&quot;找到需要下载的资源&quot;&gt;&lt;/p&gt;
&lt;p&gt;MySQL Yum 下载页面&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpfpd.com1.z0.glb.clouddn.com/2.png&quot; alt=&quot;MySQL Yum 下载页面&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;复制了下载链接，wget获取资源库，确保没有错误，用md5校验，确保和官网文件是一致没错误的&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="mysql" scheme="http://liuhouer.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://liuhouer.github.io/tags/mysql/"/>
    
      <category term="linux" scheme="http://liuhouer.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>西安春游攻略</title>
    <link href="http://liuhouer.github.io/2017/03/23/%E5%8D%8E%E5%B1%B1%E4%B9%8B%E5%B7%85%E6%94%BB%E7%95%A5/"/>
    <id>http://liuhouer.github.io/2017/03/23/华山之巅攻略/</id>
    <published>2017-03-23T02:24:09.000Z</published>
    <updated>2017-03-23T03:21:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h2><blockquote>
<p>12月份mac系统升级，黑屏了，Genius Bar 客服告诉我只能格式化，重装新系统。我(。_°☆╲(- – )…..((/- -)/<br>我的博客代码也没备份，一直懒惰，这几个月也没更新博文了。 终于，今天勤奋一会，把博客代码重写重搭了~</p>
</blockquote>
<h2 id="题记"><a href="#题记" class="headerlink" title="题记"></a>题记</h2><blockquote>
<ul>
<li>再有一周就要去陕西赏春了，快按耐不住躁动的心情了~撒欢</li>
<li>内心憧憬的华山是“三峰森翠倚云棱，凝睇烟萝最上层。” 亦是“云含幽兮月添冷，月凝晖兮江漾影。”华山！等着我们</li>
</ul>
<p><img src="http://7xpfpd.com1.z0.glb.clouddn.com/f1a03ac79f3df8dc6c623e2bcd11728b46102898.jpg" alt=""></p>
<p><img src="http://7xpfpd.com1.z0.glb.clouddn.com/fa8355e736d12f2ec4551fda4fc2d562843568a3.jpg" alt=""></p>
<p><img src="http://7xpfpd.com1.z0.glb.clouddn.com/313ef9198618367ad2e5ce672e738bd4b21ce58f.jpg" alt=""></p>
<ul>
<li>哥们刚刚从陕西那边玩回来，和我们的行程比较匹配，下面引用一下他的攻略</li>
</ul>
</blockquote>
<a id="more"></a>
<h2 id="西安攻略"><a href="#西安攻略" class="headerlink" title="西安攻略"></a>西安攻略</h2><blockquote>
<pre><code>  文     波波
整理     jeyy
</code></pre><ul>
<li>文笔不好，咱们直入主题！<h2 id="gt-准备阶段"><a href="#gt-准备阶段" class="headerlink" title="&gt;  # 准备阶段"></a>&gt;  # 准备阶段</h2><ul>
<li>西安，其实要真是想游个遍，讲真还是有一定难度的！毕竟西安的文化底蕴还是不了低估的！单是那些古建筑就满大街都是，什么大雁塔，古城墙，华清池，兵马俑在地图上你随便一搜就够你转几天的。不过我这个人怎么说的，反正就是不大喜欢那些什么大院，什么寺庙，什么宫的……完全不感冒！而且也感觉千篇一律。但是我比较喜欢大自然的那些山山水水的，还有就是我是一名铁杆吃货，西安的美食也是我来西安的一项重要任务！</li>
<li>其实不管去哪里游玩，有一个问题必须先解决掉——住宿！</li>
<li>俗话说<code>“兵马未动，粮草先行”</code>也是这么个理，后方必须有保障！</li>
<li>住宿一般要根据自己的旅行计划来，一般我的方案是走到哪儿住到哪儿;</li>
<li>还有一种省心的方案就是只要在一个城市，找个地理位置居中交通便利的地段一直住下！</li>
<li>其实，我还是喜欢前者，因为不同地段的美食文化什么的，只有住下了才能深入了解。但是还有个弊端就是需要带着行李搬来搬去（这也是旅行尽量轻装出行）。</li>
<li>一般找旅馆就是在地图或者蚂蜂窝上景点附近酒店推荐就可以对比判断（多看看评价以及酒店周边环境），然后千万要打电话确认有没有空房以及房费问题与网络报价是否一致！</li>
<li>但是，我并不推荐提前预定，因为地图有的时候定位不准就会各种找不到，所以最好是找到店以后再定或者直接店付（西安一般150左右就能找到不错的大床房）。<h2 id="gt-吃货攻略"><a href="#gt-吃货攻略" class="headerlink" title="&gt;  # 吃货攻略"></a>&gt;  # 吃货攻略</h2></li>
<li>对于西安景点推荐旅游攻略什么的我还真说不上，因为去了西安我只有两点主题——吃，登华山！但是吃的地方我倒是有几句话要说，很多人去了西安吃的地方就想到了回民街，不错那儿的东西的确多，但是物价也稍微有点儿贵，一般比较适合时间不充足的游客去体验一把西安美食文化，听西安同学说要想吃地地道道的没事儿，就应该去袁家村（咸阳的）因为那里实惠，而且种类繁多（但是因为我没找到去的方法转念一想来回路费都能补差价了就直接在回民街体验了）！如果想去的小伙伴可以提前做做功课！至于去了以后吃什么特色，蚂蜂窝上一搜，各种推荐以及酌情选择就可以！</li>
</ul>
</li>
</ul>
<ul>
<li><img src="http://7xpfpd.com1.z0.glb.clouddn.com/wKgBZ1jREPCABH_2AAw5i4os97Q77%281%29.jpeg" alt=""></li>
</ul>
<ul>
<li><p><img src="http://7xpfpd.com1.z0.glb.clouddn.com/wKgBZ1jREPSAKt9BAB_q1qVZqT812.jpeg" alt=""></p>
</li>
<li><p><img src="http://7xpfpd.com1.z0.glb.clouddn.com/wKgBZ1jREPCABH_2AAw5i4os97Q77.jpeg" alt=""></p>
<h2 id="gt-华山攻略"><a href="#gt-华山攻略" class="headerlink" title="&gt;  # 华山攻略"></a>&gt;  # 华山攻略</h2><ul>
<li>在西安住了一晚第二天早上又简单转了转我就转战华山了，从西安去华山我是坐的高铁（西安北—华山北）30分钟，班次也很多！下了车站找出租就行（切记20元即可去玉泉院），一般来说登山都需要从玉泉院那儿往上爬，玉泉院是不收费的寺院听说陈抟老祖就是在那儿清修，个人感觉还可以。</li>
<li>登华山看日出一般有两种，在山下留宿然后夜爬和白天爬在山上留宿第二天下来，山下宾馆便宜100左右都是，山上就比较贵了，像点样子的就得300＋估计。</li>
<li>夜爬一般需要23点左右就要开始了，这样中间也有个休息缓劲儿的时间（我们那天连休息带爬一共近7个小时）！</li>
<li>爬山之前一定要把登山装备准备好，一般来说<em><code>吃的</code></em>，<em><code>喝的（一般每人1L左右）</code></em>，<em><code>手套（山下超市两三元一副）</code></em>，<em><code>手电</code></em>，<em><code>充电宝</code></em>，<em><code>保暖衣物</code></em>，<em><code>登山包</code></em>，<em><code>雨衣</code></em>。</li>
<li>还有一条就是登山一定要准备好<em><code>登山鞋</code></em>或者<em><code>防滑运动鞋</code></em>！</li>
<li>登华山，切记不要心急，节奏很重要，很多人（包括我）可能检票进去后走了一段觉得路宽又平，一点都不险么，其实，那两三千米你还没有真正开始登……后面有你受的！</li>
<li>还有那些登山拐杖，年轻人别买，登山那就是个累赘！</li>
<li>登华山也简单，只要路没封，跟着路标有就行！有人可能会选择坐汽车跟缆车，首先提示晚上没有，而且我也觉得登山坐那些东西反而丧失了登山的乐趣！</li>
<li>我们是晚上登的，周边景色没看到所以下山也纯走（如果爬山过程中欣赏了抑或觉得累了什么的下山坐缆车什么的也未尝不可，毕竟上山容易下山难）！</li>
<li>看日出，就是去东峰，完事儿可以再做行程安排（我爬完东峰就下来了，体力感觉已经不行了）。还有两件事要提醒大家如果想登山看日出要提前关注天气变化噢，还有就是登山<code>一定要注意安全，一定要注意安全，一定要注意安全！</code></li>
</ul>
</li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;碎碎念&quot;&gt;&lt;a href=&quot;#碎碎念&quot; class=&quot;headerlink&quot; title=&quot;碎碎念&quot;&gt;&lt;/a&gt;碎碎念&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;12月份mac系统升级，黑屏了，Genius Bar 客服告诉我只能格式化，重装新系统。我(。_°☆╲(- – )…..((/- -)/&lt;br&gt;我的博客代码也没备份，一直懒惰，这几个月也没更新博文了。 终于，今天勤奋一会，把博客代码重写重搭了~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题记&quot;&gt;&lt;a href=&quot;#题记&quot; class=&quot;headerlink&quot; title=&quot;题记&quot;&gt;&lt;/a&gt;题记&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;再有一周就要去陕西赏春了，快按耐不住躁动的心情了~撒欢&lt;/li&gt;
&lt;li&gt;内心憧憬的华山是“三峰森翠倚云棱，凝睇烟萝最上层。” 亦是“云含幽兮月添冷，月凝晖兮江漾影。”华山！等着我们&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpfpd.com1.z0.glb.clouddn.com/f1a03ac79f3df8dc6c623e2bcd11728b46102898.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpfpd.com1.z0.glb.clouddn.com/fa8355e736d12f2ec4551fda4fc2d562843568a3.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpfpd.com1.z0.glb.clouddn.com/313ef9198618367ad2e5ce672e738bd4b21ce58f.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;哥们刚刚从陕西那边玩回来，和我们的行程比较匹配，下面引用一下他的攻略&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="旅游" scheme="http://liuhouer.github.io/categories/%E6%97%85%E6%B8%B8/"/>
    
    
      <category term="攻略" scheme="http://liuhouer.github.io/tags/%E6%94%BB%E7%95%A5/"/>
    
      <category term="游记" scheme="http://liuhouer.github.io/tags/%E6%B8%B8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>创业需要考虑那些细节以及所需成本</title>
    <link href="http://liuhouer.github.io/2016/10/24/%E5%88%9B%E4%B8%9A%E6%88%90%E6%9C%AC%E4%BC%B0%E7%AE%97/"/>
    <id>http://liuhouer.github.io/2016/10/24/创业成本估算/</id>
    <published>2016-10-24T15:46:49.000Z</published>
    <updated>2017-03-23T03:21:21.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>作为一名苦逼的移动互联网创业者，经常会听到外行的朋友们问这样的问题：“做一个网站需要多少钱？”或者“做一个APP需要多少钱？”</p>
<p>3年前，天真的我认为做一个APP顶多5000块钱，网站2000块以内就能搞定。高于这个价格就是唬小孩。后来我确实花过1000块钱买了个模板网页，5000块钱买个模板APP，干了这些傻事。最后的结果就像淘宝上的买家秀和卖家秀的天差地别，钱打了水漂。</p>
<p>本着信天信地不信邪的原则，我们开始组建自己的技术团队，从UI，到后台，前端，安卓，苹果各类程序员和产品经理，组成了一个最基本的APP开发团队。到现在已经做过五个APP，其中三个都获得了融资，另外两个是政府扶持项目。给团队发了将近一年工资，对于一个APP从无到有的开发到底要花多少钱，实在是再清楚不过。</p>
</blockquote>
<h2 id="今天从创业者的角度一起来算一下需要付出多少成本"><a href="#今天从创业者的角度一起来算一下需要付出多少成本" class="headerlink" title="今天从创业者的角度一起来算一下需要付出多少成本"></a>今天从创业者的角度一起来算一下需要付出多少成本</h2><blockquote>
<p>首先，如果你也是创业者，而且满腔热血，那么产品就必须自己开发。因为创业是很牛逼的事，所有的环节都要最好的。把产品技术开发交给外包难免不放心，当时我们也是这么想的。自己懂技术，是相关专业出身还好。但据我了解，一般的创业者难免都不懂。所以，如果你要做一个APP，以此为切入点，首先需要知道至少需要哪些人员配置。</p>
</blockquote>
<h2 id="招兵买马"><a href="#招兵买马" class="headerlink" title="招兵买马"></a>招兵买马</h2><blockquote>
<p>包含研发一个新产品过程中一些常见的工作，团队的结构以架构师兼后台开发1名+安卓2名+iOS开发1名+产品经理1名+前端开发1名+设计师1名，你可能也发现了这些人员配备都是单点的，一旦有人生病或请假，某个职位就会缺失，项目进度就会拖后，创业公司员工任职不稳定可是很正常的现象，所以我们大约配备2个浮动名额，也就是，初始团队大概有9名。估计一般的创业者都想越快越好的让产品开发上线，假设你想的的产品上线期3~6个月。</p>
</blockquote>
<a id="more"></a>
<h2 id="第一步：招人"><a href="#第一步：招人" class="headerlink" title="第一步：招人"></a>第一步：招人</h2><blockquote>
<p>北上广一线深城市还好，只要资金充裕人才不愁，简历丰富挨个筛选。但是在常州这样的二三线城市，一个WEB前端足足招了7个月才有人投简历上门面试。更为可怕的是我们同时付费在“拉勾”“前程无忧”“智联招聘”甚至“赶集”这些非专业平台以及朋友圈，各种无限寻找的情况下。我们从第一个人入职，到团队勉强能够开工一共花了5个月招聘时间。</p>
<p>这里有一个比较好的经验，先把所有的力气去寻找一个志同道合的技术总监，高薪是必须的。但是薪资高了他可以在开发上帮你少走弯路省回来。</p>
<p>所以第一步的花费大概是–招聘平台网站会员费：平均1000元/家*3=3000元。然后是假设你3个月就招聘齐活儿了。</p>
<p>这三个月平均要发4个人工资，试用期内薪资80%算，而且还不用五险一金。常州此类人才一般需要招聘至少有过一年以上开发经验的，要不然开发质量难以保障。</p>
<p>这样人才平均薪资大概在8K左右。所以这三个月你要发（8000元80%试用期4个人*3个月=76800）。</p>
</blockquote>
<h2 id="第二步：场地"><a href="#第二步：场地" class="headerlink" title="第二步：场地"></a>第二步：场地</h2><blockquote>
<p>8人团队可以选择中低端的办公场所，这类的办公场所在常州大约是70元/㎡，大约需要100平米，并不是很好找。</p>
<p>创业孵化器是很不错的选择。在现在的大背景下，孵化器现在很多很容易找。孵化器的租金会比较便宜甚至免费，在接纳创业团队之前一般会签署协议，需要以场地作为股权置换条件，或者是优先投资权。至于孵化器是否划算，得创业团队自己掂量。算上水电、物业，一个月10000左右算比较节省。</p>
</blockquote>
<h2 id="第三步：设备"><a href="#第三步：设备" class="headerlink" title="第三步：设备"></a>第三步：设备</h2><blockquote>
<p>普通的人体工程学椅子价格在150元左右，如果不买工程学椅子用普通的椅子代替，加上桌子平摊成本，桌椅需要200左右。这些一次性付出，6000元可以搞定吧，拍脑袋也得付。</p>
<p>加上设计师和程序猿电脑，配置在4000一台，一共七台包括一台IOS机。开发移动APP需要提供样机，二手就行，安卓系统4部，2000元一部，苹果系统也要4部，3500一部。</p>
<p>好，算一算6000元+4000元7+2000元4+3500*4=56000元</p>
</blockquote>
<h2 id="第四步：工具齐活，正式开始"><a href="#第四步：工具齐活，正式开始" class="headerlink" title="第四步：工具齐活，正式开始"></a>第四步：工具齐活，正式开始</h2><blockquote>
<p>APP开发之前，你知道自己想做个什么样的APP软件，但一般不知道自己具体要做什么东西，需求是什么，产品定位是什么。这时候产品经理就需要出马，跟老板各种沟通、理清需求、找产品定位。</p>
<p>这阶段大概需要花费两周，好说歹说仔细分析，才会把产品的定位、一期的需求想清楚。期间架构师可以开始构思产品的技术架构，还未能正式开工。产品定位以及早期的需求确定出来之后，需要构思产品名称、需求调研、竞品调研分析、注册域名、购置服务器以及周边基础能力（如CDN存储、短信服务、消息推送等）、商标（未注册商标、很多团队就是吃了这个亏）、抢注域名、设计logo。这阶段如果不中途改变计划、不变更产品需求和定位的前提下，最起码花费一周时间。这时候产品的原型、技术架构的雏形也呈现，基本可以进入真刀真枪的干活。</p>
<p>这一步假设域名不需要花大价钱购买，全部费用算起来拍脑袋15000元/年。</p>
<p>其中短信2000，服务器1000一个月。域名等商标注册2000一个，商标，软著，LOGO一次性投入有10000左右。</p>
</blockquote>
<h2 id="第五步：产品版本策划、架构设计"><a href="#第五步：产品版本策划、架构设计" class="headerlink" title="第五步：产品版本策划、架构设计"></a>第五步：产品版本策划、架构设计</h2><blockquote>
<p>看似一切都准备就绪之后，产品开始整理需求，按照需求优先级规划版本。架构师按照产品的发展方向构想，开始着手进入开发环境、生产环境部署、基础代码研发阶段。</p>
<p>很有必要提一下的是，做APP比较常见的两种功能实现方式有native原生和webview<br>方式，这两种方式的优劣不在本文的讨论范围，一般为了保证体验，以原生的方式为主，webview的方式为辅。以原生的方式做开发，版本是尤为重要的。</p>
<p>其一，APP开发完成之后，需要把上架到APP store（假设我们只上iOS和安卓），iOS 的APP Store<br>有冗长的应用审核周期，你必须提前把往后几个中小版本的功能规划好了才不至于在这个环节自乱阵脚；</p>
<p>其二，你的APP安装到用户的手机上时你肯定希望他大部分时候运行的都是最新的版本，如果你的版本更新过于频繁，用户也会嫌烦。</p>
<p>看起来过程似乎非常顺利，产品经理把产品的思路理清之后，开始准备产品V1.0 的规划。</p>
</blockquote>
<h2 id="新产品从无到有常见的工作："><a href="#新产品从无到有常见的工作：" class="headerlink" title="新产品从无到有常见的工作："></a>新产品从无到有常见的工作：</h2><blockquote>
<p>（1）产品官网，产品官网是产品、公司、团队的脸面，让用户进入之后能以最快的速度了解你的定位以及产品特性，也就是什么样的人在为解决什么样的问题，做着什么样的事情。</p>
<p>（2）用户协议。是的，如果用户要注册、使用你的产品，你得起草你的用户协议，跟律师或法务不断沟通调整。</p>
<p>（3）种子用户。你要思考你的第一批种子用户从哪里来，如何组织，怎么管理，他们是检验你产品的第一群人，对于验证你的产品定位、发现产品问题、提升产品体验来说至关重要。</p>
<p>（4）基础数据上报规划。你要知道产品一旦发布，在对用户行为一无所知的情况下，需要收集什么数据来优化、调整你的产品设计，思考你的产品方向。</p>
<p>（5）UI设计与交互标准制定。不能保证产品的UI以及交互一上线就有让用户觉得惊艳的效果，但是必须保证UI/交互在一致性上没有问题。</p>
<p>（6）后台管理系统。如论是查看数据还是内容管理，后台管理系统是你工作的有效辅助，也不能少。</p>
<p>（7）APP。这是你的产品的重中之重，密切观察跟踪。</p>
<p>如果一切顺利，那么在3-6个月之后，你的APP第一版应该有了第一个雏形。</p>
</blockquote>
<h2 id="内部测试、打磨阶段"><a href="#内部测试、打磨阶段" class="headerlink" title="内部测试、打磨阶段"></a>内部测试、打磨阶段</h2><blockquote>
<p>在这个阶段，你要跟设计、研发、种子用户之间保持密切沟通，不断收集问题、发现问题、优化、解决问题，期间可能需要发布1-3个beta子版本。同时，你要想办法保持种子用户的活跃与配合的激情，这是一项艰巨的工作，谁做谁知道。</p>
</blockquote>
<h2 id="发布阶段"><a href="#发布阶段" class="headerlink" title="发布阶段"></a>发布阶段</h2><blockquote>
<p>发布的时候，不算渠道宣传费用，不打广告，上线iOS APP Store<br>需要注册开发者账号，购买证书，也需要花费一定的费用，不多，也就99美元/年。</p>
<p>如果你做得多一些，找安全团队帮你做ac安全评估，这里也要花上一些钱，这里就不算了。至于负载均衡、加速技术什么的，你的APP刚上线，应该用不上。</p>
<p>6个月的时间，一个APP从无到有已经十分迅速。那么这一整个步骤里面。可能人员成本最大，8个人平均薪资是8K。一般当时急着招人都会有其它福利的。</p>
<p>五险一金，公司最低要为每个人补贴1100元左右。十三薪，折合每个月，相当于每个月多发1000元。团队刚招过来没有磨合时间，所以需要尽快出产品，肯定需要加班，加班是要有加班工资的，周末加一天班算200一天。</p>
<p>那么平均每人加班工资是500.将近7个月，肯定有节假日，还需要有节日福利吧，平常肯定有团队建设费用吧。平均每人每月摊头上多100元。</p>
<p>好的，那么一个人一个月平均费用为（8000+1100+1000+200+500+100=10900）</p>
<p>我这里假设招聘完全后，开发只用了4个月上线（这还是算快的）。就是（109004个月8个人=348800元）。这还不算什么，你要想，现在做互联网的哪个是一开始能赚钱的，这批功臣，每个月固定人员开销是87200元。</p>
<p>那么最后，如果你要创业自己组建技术团队的话，从招人到产品制作完成。一共算是招全人3个月，制作4个月。一共7个月计算的总花费是：</p>
<p>人员费用：76800元（招人期间）+ 348800（正式阶段）=425600 房租水电：10000/月*7个月=70000<br>办公设备：56000元 商标等注册服务器：20000元 一共是：425600+70000+56000+10000=571600元</p>
<p>这里还没有算你的市场人员，财务人员，营销推广。而且只算了4个月的正式开发期，每个月你的固定技术人员开销是87200。</p>
<p>所以当有人问自己组建团队做一个APP需要多少钱时，你可以回答一个不太复杂的APP，在像常州这样的2.5线城市，从无到有半年第一个版本出来，至少需要60万。如果在一线城市，至少也是100万。</p>
<p>如果找别的成熟团队或公司做，4个月上架的话，他们的成本大概是87200*4=348800元。不过一般可以接外包的公司，很多类型都已经做过，做一些死板的开发不需要太高的成本。</p>
<p>所以各位苦逼的创业者们。如果自己有信心，口袋里至少有个百来万，可以考虑自己组建技术团队。</p>
<p>但记住最多9个月，9个月后要么融资要么盈利。如果自己只有小几十万，产品盈利性是在后期，那么建议还是还是找个靠谱点的外包公司做，，一点一点从细节完善合同。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;作为一名苦逼的移动互联网创业者，经常会听到外行的朋友们问这样的问题：“做一个网站需要多少钱？”或者“做一个APP需要多少钱？”&lt;/p&gt;
&lt;p&gt;3年前，天真的我认为做一个APP顶多5000块钱，网站2000块以内就能搞定。高于这个价格就是唬小孩。后来我确实花过1000块钱买了个模板网页，5000块钱买个模板APP，干了这些傻事。最后的结果就像淘宝上的买家秀和卖家秀的天差地别，钱打了水漂。&lt;/p&gt;
&lt;p&gt;本着信天信地不信邪的原则，我们开始组建自己的技术团队，从UI，到后台，前端，安卓，苹果各类程序员和产品经理，组成了一个最基本的APP开发团队。到现在已经做过五个APP，其中三个都获得了融资，另外两个是政府扶持项目。给团队发了将近一年工资，对于一个APP从无到有的开发到底要花多少钱，实在是再清楚不过。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;今天从创业者的角度一起来算一下需要付出多少成本&quot;&gt;&lt;a href=&quot;#今天从创业者的角度一起来算一下需要付出多少成本&quot; class=&quot;headerlink&quot; title=&quot;今天从创业者的角度一起来算一下需要付出多少成本&quot;&gt;&lt;/a&gt;今天从创业者的角度一起来算一下需要付出多少成本&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;首先，如果你也是创业者，而且满腔热血，那么产品就必须自己开发。因为创业是很牛逼的事，所有的环节都要最好的。把产品技术开发交给外包难免不放心，当时我们也是这么想的。自己懂技术，是相关专业出身还好。但据我了解，一般的创业者难免都不懂。所以，如果你要做一个APP，以此为切入点，首先需要知道至少需要哪些人员配置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;招兵买马&quot;&gt;&lt;a href=&quot;#招兵买马&quot; class=&quot;headerlink&quot; title=&quot;招兵买马&quot;&gt;&lt;/a&gt;招兵买马&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;包含研发一个新产品过程中一些常见的工作，团队的结构以架构师兼后台开发1名+安卓2名+iOS开发1名+产品经理1名+前端开发1名+设计师1名，你可能也发现了这些人员配备都是单点的，一旦有人生病或请假，某个职位就会缺失，项目进度就会拖后，创业公司员工任职不稳定可是很正常的现象，所以我们大约配备2个浮动名额，也就是，初始团队大概有9名。估计一般的创业者都想越快越好的让产品开发上线，假设你想的的产品上线期3~6个月。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="创业" scheme="http://liuhouer.github.io/categories/%E5%88%9B%E4%B8%9A/"/>
    
    
      <category term="创业" scheme="http://liuhouer.github.io/tags/%E5%88%9B%E4%B8%9A/"/>
    
      <category term="败家" scheme="http://liuhouer.github.io/tags/%E8%B4%A5%E5%AE%B6/"/>
    
  </entry>
  
  <entry>
    <title>Spring配置数据源的几种形式</title>
    <link href="http://liuhouer.github.io/2016/09/20/Spring%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E6%BA%90%E7%9A%84%E5%87%A0%E7%A7%8D%E5%BD%A2%E5%BC%8F/"/>
    <id>http://liuhouer.github.io/2016/09/20/Spring配置数据源的几种形式/</id>
    <published>2016-09-20T15:46:49.000Z</published>
    <updated>2017-03-23T02:13:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring配置数据源的几种形式"><a href="#Spring配置数据源的几种形式" class="headerlink" title="Spring配置数据源的几种形式"></a>Spring配置数据源的几种形式</h1><blockquote>
<p>由于我的网站之前用的c3p0数据连接池配置，总是引发一些莫名其妙的错误，几次内存泄漏都和这个有关系，google之发现好多人都发现了这些bug.<br>于是了解了一下常见的数据源的配置，并改成了dbcp的配置方案。</p>
</blockquote>
<p>Spring中提供了4种不同形式的数据源配置方式：</p>
<ul>
<li><p>1、Spring自带的数据源(DriverMangerDataSource);</p>
</li>
<li><p>2、DBCP数据源;</p>
</li>
<li><p>3、C3P0数据源;</p>
</li>
<li><p>4、JNDI数据源。</p>
</li>
</ul>
<p>以上数据源配置需要用的Jar包在<a href="http://www.java2s.com/Code/Jar/c/Catalogc.htm中都可以下载到" target="_blank" rel="external">http://www.java2s.com/Code/Jar/c/Catalogc.htm中都可以下载到</a></p>
<p>下面详细介绍这四种数据源配置方式：</p>
<h2 id="1-DriverMangerDataSource"><a href="#1-DriverMangerDataSource" class="headerlink" title="1. DriverMangerDataSource"></a>1. DriverMangerDataSource</h2><blockquote>
<p>使用org.springframework.jdbc.datasource.DriverManagerDataSource<br>说明：DriverManagerDataSource建立连接是只要有连接就新建一个connection,根本没有连接池的作用。</p>
</blockquote>
<p>XML代码</p>
<figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"&gt; </div><div class="line">          &lt;property name="driverClassName"&gt;&lt;value&gt;$&#123;jdbc.driverClassName&#125;&lt;/value&gt;&lt;/property&gt; </div><div class="line">          &lt;property name="url"&gt;&lt;value&gt;$&#123;jdbc.url&#125;&lt;/value&gt;&lt;/property&gt; </div><div class="line">          &lt;property name="username"&gt;&lt;value&gt;$&#123;jdbc.username&#125;&lt;/value&gt;&lt;/property&gt; </div><div class="line">          &lt;property name="password"&gt;&lt;value&gt;$&#123;jdbc.password&#125;&lt;/value&gt;&lt;/property&gt; </div><div class="line"></div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure>
<h2 id="2-DBCP数据源"><a href="#2-DBCP数据源" class="headerlink" title="2.DBCP数据源"></a>2.DBCP数据源</h2><blockquote>
<p>使用org.apache.commons.dbcp.BasicDataSource<br>说明:这是一种推荐说明的数据源配置方式，它真正使用了连接池技术</p>
<p>DBCP的配置依赖于2个jar包commons-dbcp.jar，commons-pool.jar。</p>
</blockquote>
<p>XML代码：</p>
<figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 使用org.apache.commons.dbcp.BasicDataSource   </div><div class="line">         说明:这是一种推荐说明的数据源配置方式，它真正使用了连接池技术 --&gt;</div><div class="line">&lt;bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"</div><div class="line">destroy-method="close"&gt;</div><div class="line">&lt;property name="driverClassName" value="$&#123;jdbc.driver&#125;" /&gt;</div><div class="line">&lt;property name="url" value="$&#123;jdbc.url&#125;" /&gt;</div><div class="line">&lt;property name="username" value="$&#123;jdbc.username&#125;" /&gt;</div><div class="line">&lt;property name="password" value="$&#123;jdbc.password&#125;" /&gt;</div><div class="line">&lt;!--maxActive: 最大连接数量 --&gt;</div><div class="line">&lt;property name="maxActive" value="150" /&gt;</div><div class="line">&lt;!--minIdle: 最小空闲连接 --&gt;</div><div class="line">&lt;property name="minIdle" value="5" /&gt;</div><div class="line">&lt;!--maxIdle: 最大空闲连接 --&gt;</div><div class="line">&lt;property name="maxIdle" value="20" /&gt;</div><div class="line">&lt;!--initialSize: 初始化连接 --&gt;</div><div class="line">&lt;property name="initialSize" value="30" /&gt;</div><div class="line">&lt;!-- 连接被泄露时是否打印 --&gt;</div><div class="line">&lt;property name="logAbandoned" value="true" /&gt;</div><div class="line">&lt;!--removeAbandoned: 是否自动回收超时连接 --&gt;</div><div class="line">&lt;property name="removeAbandoned" value="true" /&gt;</div><div class="line">&lt;!--removeAbandonedTimeout: 超时时间(以秒数为单位) --&gt;</div><div class="line">&lt;property name="removeAbandonedTimeout" value="10" /&gt;</div><div class="line">&lt;!--maxWait: 超时等待时间以毫秒为单位 1000等于60秒 --&gt;</div><div class="line">&lt;property name="maxWait" value="1000" /&gt;</div><div class="line">&lt;!-- 在空闲连接回收器线程运行期间休眠的时间值,以毫秒为单位. --&gt;</div><div class="line">&lt;property name="timeBetweenEvictionRunsMillis" value="10000" /&gt;</div><div class="line">&lt;!-- 在每次空闲连接回收器线程(如果有)运行时检查的连接数量 --&gt;</div><div class="line">&lt;property name="numTestsPerEvictionRun" value="10" /&gt;</div><div class="line">&lt;!-- 1000 * 60 * 30 连接在池中保持空闲而不被空闲连接回收器线程 --&gt;</div><div class="line">&lt;property name="minEvictableIdleTimeMillis" value="10000" /&gt;</div><div class="line">&lt;property name="validationQuery" value="SELECT NOW() FROM DUAL" /&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure>
<p>上面代码的解释：</p>
<blockquote>
<p>BasicDataSource提供了close()方法关闭数据源，所以必须设定destroy-method=”close”属性，<br>以便Spring容器关闭时，数据源能够正常关闭。除以上必须的数据源属性外，还有一些常用的属性：</p>
<p>defaultAutoCommit：设置从数据源中返回的连接是否采用自动提交机制，默认值为 true；<br>defaultReadOnly：设置数据源是否仅能执行只读操作， 默认值为 false；<br>maxActive：最大连接数据库连接数，设置为0时，表示没有限制； maxIdle：最大等待连接中的数量，设置为0时，表示没有限制；<br>maxWait：最大等待秒数，单位为毫秒， 超过时间会报出错误信息；<br>validationQuery：用于验证连接是否成功的查询SQL语句，SQL语句必须至少要返回一行数据，<br>如你可以简单地设置为：“select count(*) from user”； removeAbandoned：是否自我中断，默认是<br>false ；<br>removeAbandonedTimeout：几秒后数据连接会自动断开，在removeAbandoned为true，提供该值；<br>logAbandoned：是否记录中断事件， 默认为 false；</p>
</blockquote>
<a id="more"></a>
<h2 id="3-C3P0数据源"><a href="#3-C3P0数据源" class="headerlink" title="3.C3P0数据源"></a>3.C3P0数据源</h2><blockquote>
<p>C3P0是一个开放源代码的JDBC数据源实现项目，C3P0依赖于jar包c3p0.jar。</p>
</blockquote>
<p>XML代码：</p>
<figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 配置数据源 c3p0 --&gt;</div><div class="line">&lt;bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"</div><div class="line">destroy-method="close"&gt;</div><div class="line">&lt;property name="driverClass" value="$&#123;jdbc.driver&#125;" /&gt;</div><div class="line">&lt;property name="jdbcUrl" value="$&#123;jdbc.url&#125;" /&gt;</div><div class="line">&lt;property name="user" value="$&#123;jdbc.username&#125;" /&gt;</div><div class="line">&lt;property name="password" value="$&#123;jdbc.password&#125;" /&gt;</div><div class="line"></div><div class="line">&lt;!-- 请求超时时间 --&gt;</div><div class="line">&lt;!--当连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时后将抛出</div><div class="line">SQLException,如设为0则无限期等待。单位毫秒。Default: 0 --&gt;</div><div class="line">&lt;property name="checkoutTimeout" value="5000" /&gt;</div><div class="line">&lt;!-- 每60秒检查所有连接池中的空闲连接。默认值: 0，不检查 --&gt;</div><div class="line">&lt;property name="idleConnectionTestPeriod" value="60" /&gt;</div><div class="line">&lt;!-- 连接数据库连接池最大空闲时间 --&gt;</div><div class="line">&lt;property name="maxIdleTime" value="30" /&gt;</div><div class="line">&lt;!-- 连接池初始化连接数 --&gt;</div><div class="line">&lt;property name="initialPoolSize" value="5" /&gt;</div><div class="line">&lt;property name="minPoolSize" value="5" /&gt;</div><div class="line">&lt;property name="maxPoolSize" value="20" /&gt;</div><div class="line">&lt;!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。默认值: 3 --&gt;</div><div class="line">&lt;property name="acquireIncrement" value="5" /&gt;</div><div class="line">&lt;!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 --&gt;</div><div class="line">&lt;property name="acquireRetryAttempts" value="10" /&gt;</div><div class="line">&lt;!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效</div><div class="line">保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试</div><div class="line">获取连接失败后该数据源将申明已断开并永久关闭。Default: false--&gt;</div><div class="line">&lt;property name="breakAfterAcquireFailure" value="true" /&gt;</div><div class="line">&lt;!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的</div><div class="line">时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable</div><div class="line">等方法来提升连接测试的性能。Default: false --&gt;</div><div class="line">&lt;property name="testConnectionOnCheckout" value="false" /&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure>
<h2 id="4-JNDI数据源"><a href="#4-JNDI数据源" class="headerlink" title="4.JNDI数据源"></a>4.JNDI数据源</h2><blockquote>
<p>使用org.springframework.jndi.JndiObjectFactoryBean<br>说明:JndiObjectFactoryBean 能够通过JNDI获取DataSource<br>如果应用配置在高性能的应用服务器（如WebLogic或Websphere,tomcat等）上，我们可能更希望使用应用服务器本身提供的数据源。应用服务器的数据源<br>使用JNDI开放调用者使用，Spring为此专门提供引用JNDI资源的JndiObjectFactoryBean类。</p>
</blockquote>
<p>xml 代码：</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;bean <span class="attr">id="dataSource"</span> <span class="attr">class="org.springframework.jndi.JndiObjectFactoryBean"&gt;</span></div><div class="line"></div><div class="line">&lt;property <span class="attr">name="jndiName"</span> <span class="attr">value="java:comp/env/jdbc/orclight"/&gt;</span>        </div><div class="line"></div><div class="line">&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;beans <span class="attr">xmlns=http://www.springframework.org/schema/beans</span></div><div class="line"></div><div class="line">xmlns:<span class="attr">xsi=http://www.w3.org/2001/XMLSchema-instance</span></div><div class="line"></div><div class="line">xmlns:<span class="attr">jee=http://www.springframework.org/schema/jee</span></div><div class="line"></div><div class="line">xsi:<span class="attr">schemaLocation="http://www.springframework.org/schema/beans</span></div><div class="line"></div><div class="line">http://www.springframework.org/schema/beans/spring-beans-<span class="number">2.0</span>.xsd</div><div class="line"></div><div class="line">http://www.springframework.org/schema/jee</div><div class="line"></div><div class="line">http://www.springframework.org/schema/jee/spring-jee-<span class="number">2.0</span>.xsd<span class="string">"&gt;</span></div><div class="line"></div><div class="line">&lt;jee:jndi-lookup id="dataSource<span class="string">" jndi-name="</span> java:comp/env/jdbc/orclight<span class="string">"/&gt;</span></div><div class="line"></div><div class="line">&lt;/beans\&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring配置数据源的几种形式&quot;&gt;&lt;a href=&quot;#Spring配置数据源的几种形式&quot; class=&quot;headerlink&quot; title=&quot;Spring配置数据源的几种形式&quot;&gt;&lt;/a&gt;Spring配置数据源的几种形式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;由于我的网站之前用的c3p0数据连接池配置，总是引发一些莫名其妙的错误，几次内存泄漏都和这个有关系，google之发现好多人都发现了这些bug.&lt;br&gt;于是了解了一下常见的数据源的配置，并改成了dbcp的配置方案。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Spring中提供了4种不同形式的数据源配置方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1、Spring自带的数据源(DriverMangerDataSource);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2、DBCP数据源;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3、C3P0数据源;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;4、JNDI数据源。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上数据源配置需要用的Jar包在&lt;a href=&quot;http://www.java2s.com/Code/Jar/c/Catalogc.htm中都可以下载到&quot;&gt;http://www.java2s.com/Code/Jar/c/Catalogc.htm中都可以下载到&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下面详细介绍这四种数据源配置方式：&lt;/p&gt;
&lt;h2 id=&quot;1-DriverMangerDataSource&quot;&gt;&lt;a href=&quot;#1-DriverMangerDataSource&quot; class=&quot;headerlink&quot; title=&quot;1. DriverMangerDataSource&quot;&gt;&lt;/a&gt;1. DriverMangerDataSource&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;使用org.springframework.jdbc.datasource.DriverManagerDataSource&lt;br&gt;说明：DriverManagerDataSource建立连接是只要有连接就新建一个connection,根本没有连接池的作用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;XML代码&lt;/p&gt;
&lt;figure class=&quot;highlight vbscript-html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&amp;gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;lt;property name=&quot;driverClassName&quot;&amp;gt;&amp;lt;value&amp;gt;$&amp;#123;jdbc.driverClassName&amp;#125;&amp;lt;/value&amp;gt;&amp;lt;/property&amp;gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;lt;property name=&quot;url&quot;&amp;gt;&amp;lt;value&amp;gt;$&amp;#123;jdbc.url&amp;#125;&amp;lt;/value&amp;gt;&amp;lt;/property&amp;gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;lt;property name=&quot;username&quot;&amp;gt;&amp;lt;value&amp;gt;$&amp;#123;jdbc.username&amp;#125;&amp;lt;/value&amp;gt;&amp;lt;/property&amp;gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;lt;property name=&quot;password&quot;&amp;gt;&amp;lt;value&amp;gt;$&amp;#123;jdbc.password&amp;#125;&amp;lt;/value&amp;gt;&amp;lt;/property&amp;gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;2-DBCP数据源&quot;&gt;&lt;a href=&quot;#2-DBCP数据源&quot; class=&quot;headerlink&quot; title=&quot;2.DBCP数据源&quot;&gt;&lt;/a&gt;2.DBCP数据源&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;使用org.apache.commons.dbcp.BasicDataSource&lt;br&gt;说明:这是一种推荐说明的数据源配置方式，它真正使用了连接池技术&lt;/p&gt;
&lt;p&gt;DBCP的配置依赖于2个jar包commons-dbcp.jar，commons-pool.jar。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;XML代码：&lt;/p&gt;
&lt;figure class=&quot;highlight vbscript-html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;!-- 使用org.apache.commons.dbcp.BasicDataSource   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         说明:这是一种推荐说明的数据源配置方式，它真正使用了连接池技术 --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;bean id=&quot;dataSource&quot; class=&quot;org.apache.commons.dbcp.BasicDataSource&quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;destroy-method=&quot;close&quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;property name=&quot;driverClassName&quot; value=&quot;$&amp;#123;jdbc.driver&amp;#125;&quot; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;property name=&quot;url&quot; value=&quot;$&amp;#123;jdbc.url&amp;#125;&quot; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;property name=&quot;username&quot; value=&quot;$&amp;#123;jdbc.username&amp;#125;&quot; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;property name=&quot;password&quot; value=&quot;$&amp;#123;jdbc.password&amp;#125;&quot; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;!--maxActive: 最大连接数量 --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;property name=&quot;maxActive&quot; value=&quot;150&quot; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;!--minIdle: 最小空闲连接 --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;property name=&quot;minIdle&quot; value=&quot;5&quot; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;!--maxIdle: 最大空闲连接 --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;property name=&quot;maxIdle&quot; value=&quot;20&quot; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;!--initialSize: 初始化连接 --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;property name=&quot;initialSize&quot; value=&quot;30&quot; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;!-- 连接被泄露时是否打印 --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;property name=&quot;logAbandoned&quot; value=&quot;true&quot; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;!--removeAbandoned: 是否自动回收超时连接 --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;property name=&quot;removeAbandoned&quot; value=&quot;true&quot; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;!--removeAbandonedTimeout: 超时时间(以秒数为单位) --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;property name=&quot;removeAbandonedTimeout&quot; value=&quot;10&quot; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;!--maxWait: 超时等待时间以毫秒为单位 1000等于60秒 --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;property name=&quot;maxWait&quot; value=&quot;1000&quot; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;!-- 在空闲连接回收器线程运行期间休眠的时间值,以毫秒为单位. --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;property name=&quot;timeBetweenEvictionRunsMillis&quot; value=&quot;10000&quot; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;!-- 在每次空闲连接回收器线程(如果有)运行时检查的连接数量 --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;property name=&quot;numTestsPerEvictionRun&quot; value=&quot;10&quot; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;!-- 1000 * 60 * 30 连接在池中保持空闲而不被空闲连接回收器线程 --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;property name=&quot;minEvictableIdleTimeMillis&quot; value=&quot;10000&quot; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;property name=&quot;validationQuery&quot; value=&quot;SELECT NOW() FROM DUAL&quot; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面代码的解释：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;BasicDataSource提供了close()方法关闭数据源，所以必须设定destroy-method=”close”属性，&lt;br&gt;以便Spring容器关闭时，数据源能够正常关闭。除以上必须的数据源属性外，还有一些常用的属性：&lt;/p&gt;
&lt;p&gt;defaultAutoCommit：设置从数据源中返回的连接是否采用自动提交机制，默认值为 true；&lt;br&gt;defaultReadOnly：设置数据源是否仅能执行只读操作， 默认值为 false；&lt;br&gt;maxActive：最大连接数据库连接数，设置为0时，表示没有限制； maxIdle：最大等待连接中的数量，设置为0时，表示没有限制；&lt;br&gt;maxWait：最大等待秒数，单位为毫秒， 超过时间会报出错误信息；&lt;br&gt;validationQuery：用于验证连接是否成功的查询SQL语句，SQL语句必须至少要返回一行数据，&lt;br&gt;如你可以简单地设置为：“select count(*) from user”； removeAbandoned：是否自我中断，默认是&lt;br&gt;false ；&lt;br&gt;removeAbandonedTimeout：几秒后数据连接会自动断开，在removeAbandoned为true，提供该值；&lt;br&gt;logAbandoned：是否记录中断事件， 默认为 false；&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="java" scheme="http://liuhouer.github.io/categories/java/"/>
    
    
      <category term="java" scheme="http://liuhouer.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>使用 django-blog-zinnia 搭建个人博客</title>
    <link href="http://liuhouer.github.io/2016/09/09/%E4%BD%BF%E7%94%A8%20django-blog-zinnia%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://liuhouer.github.io/2016/09/09/使用 django-blog-zinnia 搭建个人博客/</id>
    <published>2016-09-09T15:46:49.000Z</published>
    <updated>2017-03-23T02:13:26.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>目前网上搭建个人博客的方案很多，虽然使用诸如 Wordpress ( PHP )、Hexo ( Node.js )<br>等可以方便快速地搭建一款功能齐全的高性能个人博客，但是本文将尝试一种更为小众化的方案 —— 一款基于 django-blog-zinnia<br>( Python ) 的个人博客应用。 django-blog-zinnia<br>虽然小巧，但是具备了个人博客应用的全部基础功能，且具有很高的拓展性，并且开箱即用。以下是官方列出的一些特性：</p>
</blockquote>
<ul>
<li><p>评论</p>
</li>
<li><p>站点地图（用于搜索引擎优化）</p>
</li>
<li>文章归档视图（自动按时间归档博文，包括年、月、星期、日各个时间维度）</li>
<li>RSS 或者 Atom Feed</li>
<li>分类和标签云</li>
<li>全文搜索</li>
<li>Markdown 语法标记</li>
<li>等等其他一些博客应用具备的全部基本功能。</li>
<li>你可以参照它的官方文档 ( django-blog-zinnia documentation ) 的 installation 部分进行初始的安装，但本文也会给出详细的安装教程，并对相关的细节进行进一步补充，对功能进行进一步地拓展设置。</li>
</ul>
<p><strong>注：本博客在写作时每一个步骤均在实际环境下测试了一遍，基本确保没有问题。但是由于个人写作时的疏忽或者计算机环境的差异，也可能会有一些错误导致你卡在某个地方无法继续进行下去。如果是这样请给我留言，我和你一起排查问题，如果发现是博客写作时的错误也好使我尽快更正。</strong></p>
<h2 id="建立虚拟环境"><a href="#建立虚拟环境" class="headerlink" title="建立虚拟环境"></a>建立虚拟环境</h2><p>因为在安装 django-blog-zinnia 的过程中会安装很多其他第三方依赖包，因此强烈建议使用虚拟环境安装，以免把系统环境弄乱。</p>
<p>假设你的 python 版本是 3.4 或更高（建议使用 3.4 以上版本，当然 django-blog-zinnia 本身是兼容 python2.7 及以上版本的），且已经安装了虚拟环境管理工具 virtualenv，如果没有的话通过<code>pip install virtualenv</code> 安装。打开命令行，进入到你想建立虚拟环境的目录，通过命令 <code>virtualenv zinnia_demo_env</code> 创建一个名为 zinnia_demo_env 的虚拟环境，当然 zinnia_demo_env 这个目录名你可以任意指定。进入到创建的虚拟环境的 Scripts 目录下，输入 activate 命令激活虚拟环境，此时命令行前多了一个 ( zinnia_demo_env ) 说明已经激活，例如我的是：</p>
<figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(zinnia_demo_env) D:<span class="tag">\<span class="name">Users</span></span><span class="tag">\<span class="name">zmrenwu</span></span><span class="tag">\<span class="name">Envs</span></span><span class="tag">\<span class="name">zinnia</span></span>_demo_env<span class="tag">\<span class="name">Scripts</span></span>&gt;</div></pre></td></tr></table></figure>
<p>通过 pip install django==1.9.6 安装 django，建议使用 1.9.6 版本，当然 &gt;=1.9 的版本都是兼容的，但注意目前不兼容 django1.10。</p>
<a id="more"></a>
<h2 id="建立-django-工程"><a href="#建立-django-工程" class="headerlink" title="建立 django 工程"></a>建立 django 工程</h2><p>进入你喜欢的目录（确保依然在虚拟环境中，如果没有则按照上面的方法重新开启，且下边的操作默认都在虚拟环境中运行，因此不要退出），通过命令<code>python django-admin.py startproject zinnia_demo</code> 创建一个 django 工程。这里 zinnia_demo 是项目名，可以取任何你喜欢的名字。此时你会发现多了一个名为 zinnia_demo 的目录，这样 django 工程就建立好了。进入到这个目录，会看到有一个 manage.py 文件，尝试运行命令 <code>python manage.py runserver</code>，不报错的话，在浏览器输入 127.0.0.1:8000，看到如下字样说明 django 工程已经可以正确运行。</p>
<blockquote>
<p>It worked! Congratulations on your first Django-powered page. Of<br>course, you haven’t actually done any work yet. Next, start your first<br>app by running python manage.py startapp app_label.</p>
<p>You’re seeing this message because you have DEBUG = True in your<br>Django settings file and you haven’t configured any URLs. Get to work!<br>按 Ctrl + c 退出服务器。</p>
</blockquote>
<h2 id="安装-zinnia-及其依赖"><a href="#安装-zinnia-及其依赖" class="headerlink" title="安装 zinnia 及其依赖"></a>安装 zinnia 及其依赖</h2><p>在虚拟环境中输入 <code>pip install django-blog-zinnia</code> 安装 django-blog-zinnia，必要的依赖其会自动帮我们安装，但是一些拓展依赖需要我们手动安装，包括：</p>
<p><code>pip install markdown</code>安装 <em>markdown</em>，以便使博客文章支持 markdown 格式的文本。</p>
<p><code>pip install pygments</code> 安装 <em>pygments</em>，以便支持代码语法高亮。</p>
<h2 id="设置-settings-py-文件"><a href="#设置-settings-py-文件" class="headerlink" title="设置 settings.py 文件"></a>设置 settings.py 文件</h2><p>进入到 zinnia_demo/zinnia_demo （当然你可能设置了其他项目名，但我相信你能找到），打开 settings.py 文件（用文本编辑器或者 python IDE 打开，不要直接运行），在 INSTALL_APPS 列表里添加以下的 APP，这些 APP 都是 django-blog-zinnia 依赖运行的 APP ：</p>
<figure class="highlight sml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">zinnia_demo/zinnia_demo/settings.py</div><div class="line"></div><div class="line"><span class="type">INSTALLED_APPS</span> = [</div><div class="line">工程建立时默认添加的app</div><div class="line"><span class="symbol">'django</span>.contrib.admin',</div><div class="line"><span class="symbol">'django</span>.contrib.auth',</div><div class="line"><span class="symbol">'django</span>.contrib.contenttypes',</div><div class="line"><span class="symbol">'django</span>.contrib.sessions',</div><div class="line"><span class="symbol">'django</span>.contrib.messages',</div><div class="line"><span class="symbol">'django</span>.contrib.staticfiles',</div><div class="line"></div><div class="line">项目添加的app</div><div class="line"><span class="symbol">'django</span>.contrib.sites',</div><div class="line"><span class="symbol">'django_comments'</span>,</div><div class="line"><span class="symbol">'mptt'</span>,</div><div class="line"><span class="symbol">'tagging'</span>,</div><div class="line"><span class="symbol">'zinnia'</span>,</div><div class="line">]</div></pre></td></tr></table></figure>
<p>在 TEMPLATES 列表的如下位置加入 <code>zinnia.context_processors.version</code> ，当然这一步是可选的，其作用只是在博客页面的底部显示一个django-blog-zinnia 的版本号：</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">zinnia_demo/zinnia_demo/settings.py</div><div class="line"></div><div class="line"><span class="type">TEMPLATES</span> = [</div><div class="line">&#123;</div><div class="line">'<span class="type">BACKEND</span>': 'django.<span class="keyword">template</span>.backends.django.<span class="type">DjangoTemplates</span>',</div><div class="line">'<span class="type">DIRS</span>': [],</div><div class="line">'<span class="type">APP_DIRS</span>': <span class="type">True</span>,</div><div class="line">'<span class="type">OPTIONS</span>': &#123;</div><div class="line">'context_processors': [</div><div class="line">'django.<span class="keyword">template</span>.context_processors.debug',</div><div class="line">'django.<span class="keyword">template</span>.context_processors.request',</div><div class="line">'django.contrib.auth.context_processors.auth',</div><div class="line">'django.contrib.messages.context_processors.messages',</div><div class="line"></div><div class="line">添加这句</div><div class="line">'zinnia.context_processors.version',  <span class="comment"># Optional</span></div><div class="line">],</div><div class="line">&#125;,</div><div class="line">&#125;,</div><div class="line">]</div></pre></td></tr></table></figure>
<p>在 ALLOWED_HOSTS = 的下面添加 SITE_ID = 1</p>
<figure class="highlight protobuf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">zinnia_demo/zinnia_demo/settings.py</div><div class="line"></div><div class="line">ALLOWED_HOSTS = []</div><div class="line">SITE_ID = <span class="number">1</span></div></pre></td></tr></table></figure>
<p>并修改语言和时区，获得更友善的语言和时间显示，注意 + 号表示添加的行，- 号表示删去的行：</p>
<figure class="highlight sml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">zinnia_demo/zinnia_demo/settings.py</div><div class="line"></div><div class="line"><span class="type">LANGUAGE_CODE</span> = <span class="symbol">'en</span>-us'</div><div class="line"><span class="type">LANGUAGE_CODE</span> = <span class="symbol">'zh</span>-hans'</div><div class="line"></div><div class="line"><span class="type">TIME_ZONE</span> = <span class="symbol">'UTC'</span></div><div class="line"><span class="type">TIME_ZONE</span> = <span class="symbol">'Asia</span>/<span class="type">Shanghai'</span></div></pre></td></tr></table></figure>
<h2 id="设置-urls-py-文件"><a href="#设置-urls-py-文件" class="headerlink" title="设置 urls.py 文件"></a>设置 urls.py 文件</h2><p>打开相同目录下的 urls.py 文件，做如下修改，注意 + 号表示添加的行，- 号表示删去的行：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">zinnia_demo/zinnia_demo/urls.py</div><div class="line"></div><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</div><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url,include</div><div class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">url(<span class="string">r'^admin/'</span>, admin.site.urls),</div><div class="line">url(<span class="string">r'^weblog/'</span>, include(<span class="string">'zinnia.urls'</span>)),</div><div class="line">    url(<span class="string">r'^comments/'</span>, include(<span class="string">'django_comments.urls'</span>)),</div><div class="line">]</div></pre></td></tr></table></figure>
<h2 id="同步数据库并创建后台管理员账户"><a href="#同步数据库并创建后台管理员账户" class="headerlink" title="同步数据库并创建后台管理员账户"></a>同步数据库并创建后台管理员账户</h2><p>在 manage.py 文件所在目录下输入 <code>python manage.py migrate</code> 建立相应的数据库表结构。此时会看到目录下多了一个 db.sqlite 文件，这是存储博客数据的数据库文件，默认使用的 sqlite3。输入命令 <code>python manage.py createsuperuser</code> 创建后台管理员账户，命令行会提示你输入用户名、邮箱、密码。注意密码输入时不会有任何显示，只管输下去就行。</p>
<h2 id="开启开发服务器"><a href="#开启开发服务器" class="headerlink" title="开启开发服务器"></a>开启开发服务器</h2><p>再次运行<code>python manage.py runserver</code> 开启开发服务器，在浏览器输入 <code>127.0.0.1:8000/weblog</code> 将看到博客的首页面。输入 <em>127.0.0.1:8000/admin</em> 会进入后台登录页面，输入刚才创建的管理员账户用户名和密码就可以登录到后台管理界面。在日志后面点击增加按钮尝试着添加一篇博客看看！再次进入 <em>127.0.0.1:8000/weblog</em> 就可以看到刚才发表的博客了。</p>
<p><img src="http://o8a5h1k2v.bkt.clouddn.com/16-9-8/33882098.jpg" alt=""></p>
<p>至此基本的博客已经搭建完毕，接下来是一些可选功能拓展，包括 markdown 语法支持，代码高亮，bootstrap 主题的安装。</p>
<h2 id="OPTIONAL-Markdown-语法支持"><a href="#OPTIONAL-Markdown-语法支持" class="headerlink" title="( OPTIONAL ) Markdown 语法支持"></a>( OPTIONAL ) Markdown 语法支持</h2><p>再次打开 settings.py 文件，在文件的最后添加：</p>
<figure class="highlight sml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">zinnia_demo/zinnia_demo/settings.py</div><div class="line"></div><div class="line">...</div><div class="line"><span class="type">ZINNIA_MARKUP_LANGUAGE</span> = <span class="symbol">'markdown'</span></div><div class="line"><span class="type">ZINNIA_MARKDOWN_EXTENSIONS</span> = [<span class="symbol">'markdown</span>.extensions.extra', <span class="symbol">'markdown</span>.extensions.codehilite']</div></pre></td></tr></table></figure>
<p>bingo！！</p>
<p>ZINNIA_MARKUP_LANGUAGE 指明了使用 markdown 语法标记，ZINNIA_MARKDOWN_EXTENSIONS 做了两个拓展，其中 markdown.extensions.codehilite 表示支持语法高亮，markdown.extensions.extra 包含的特性请参见 markdown 相关文档。</p>
<h2 id="OPTIONAL-安装-Bootstrap-主题"><a href="#OPTIONAL-安装-Bootstrap-主题" class="headerlink" title="( OPTIONAL ) 安装 Bootstrap 主题"></a>( OPTIONAL ) 安装 Bootstrap 主题</h2><p>如果你不喜欢原生的主题的话，django-blog-zinnia 为我们提供了一套 bootstrap 主题，相对来说更加好看一点。虽然说实在话内置的主题感觉都已经过时了，因此我重新为它设置了一套全新的主题，稍后会有介绍。</p>
<p>中断服务器的运行，进入到虚拟环境（如果你已经退出了的话），首先输入命令<code>pip install django-app-namespace-template-loader</code>安装 <em>django-app-namespace-template-loader</em>，这是替换主题的一个必要组件。再输入 <code>pip install zinnia-theme-bootstrap</code> 安装<em>主题 APP</em> ，打开 <em>settings.py</em> 文件，在 <em>INSTALLED_APPS</em> 中注册主题 APP ，注意主题 zinnia_bootstrap 一定要在 zinnia 之前：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">zinnia_demo/zinnia_demo/settings<span class="selector-class">.py</span></div><div class="line"></div><div class="line">INSTALLED_APPS = [</div><div class="line">...</div><div class="line"><span class="string">'zinnia_bootstrap'</span>,</div><div class="line">  <span class="string">'zinnia'</span>,</div><div class="line">]</div></pre></td></tr></table></figure>
<p>再将 TEMPLATES 列表做如下修改：</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">zinnia_demo/zinnia_demo/settings.py</div><div class="line"></div><div class="line"><span class="type">TEMPLATES</span> = [</div><div class="line">&#123;</div><div class="line">'<span class="type">BACKEND</span>': 'django.<span class="keyword">template</span>.backends.django.<span class="type">DjangoTemplates</span>',</div><div class="line">'<span class="type">DIRS</span>': [],</div><div class="line">'<span class="type">APP_DIRS</span>': <span class="type">True</span>,</div><div class="line">    '<span class="type">APP_DIRS</span>': <span class="type">False</span>,</div><div class="line">        '<span class="type">OPTIONS</span>': &#123;</div><div class="line">        'context_processors': [</div><div class="line">        'django.<span class="keyword">template</span>.context_processors.debug',</div><div class="line">        'django.<span class="keyword">template</span>.context_processors.request',</div><div class="line">        'django.contrib.auth.context_processors.auth',</div><div class="line">        'django.contrib.messages.context_processors.messages',</div><div class="line">        'zinnia.context_processors.version',  <span class="comment"># Optional</span></div><div class="line">        ],</div><div class="line"></div><div class="line">        添加下面这几行</div><div class="line">        'loaders': [</div><div class="line">           'app_namespace.<span class="type">Loader</span>',</div><div class="line">           'django.<span class="keyword">template</span>.loaders.filesystem.<span class="type">Loader</span>',</div><div class="line">           'django.<span class="keyword">template</span>.loaders.app_directories.<span class="type">Loader</span>',</div><div class="line">        ],</div><div class="line">        添加上面几行</div><div class="line">        &#125;,</div><div class="line">    &#125;,</div><div class="line">]</div></pre></td></tr></table></figure>
<p>此时再次开启服务器，进入主页 <code>127.0.0.1:8000/weblog</code> 就可以看到主题变成了 bootstrap 样式了。</p>
<h2 id="OPTIONAL-语法高亮支持"><a href="#OPTIONAL-语法高亮支持" class="headerlink" title="( OPTIONAL ) 语法高亮支持"></a>( OPTIONAL ) 语法高亮支持</h2><p>注意：这一步必须在安装完 bootstrap 主题之后。</p>
<p>pygments 已经帮我做好了一切语法高亮的准备，其原理就是把 html 中的代码文本分成很多块，用适当的 html 标签包裹，并且添加相应的 css 类，我们只需引入一个相应的 css 样式文件即可。</p>
<p>为了方便起见，我们新建一个 APP 来存放我的需要引入的 css 样式文件，在 zinnia_demo/ 目录下（与 manage.py 同级）下输入 <code>python manage.py startapp theme</code>，这样我们就创建了一个名为 theme 的 app，可以看到 zinnia_demo/ 多了一个 theme 的文件夹。</p>
<p>在 zinnia_demo/ 目录下（与 manage.py 同级）建立如下的目录结构和文件：</p>
<p>zinnia_demo/templates/zinnia/skeleton.html，把这里面的内容：skeleton 模板代码 ，复制到 skeleton.html中，并且在 skeleton.html 的 \ 标签里添加一行：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">zinnia_demo/templates/zinnia/skeleton<span class="selector-class">.html</span></div><div class="line"></div><div class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"&#123;% static "</span>theme/css/github.css<span class="string">" %&#125;"</span> /&gt;</div></pre></td></tr></table></figure>
<p>再在 zinnia_demo/ 下建立如下的目录结构和文件：</p>
<p>zinnia_demo/theme/static/theme/css/github.css，把这里面的内容：=<a href="https://github.com/zmrenwu/ZinniaBlog/blob/master/zinnia_twts/static/zinnia_twts/theme/css/github.css" target="_blank" rel="external">github.css</a> 样式代码 ，复制到 github.css 文件中。</p>
<p>打开 settings.py 文件，做如下修改：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">zinnia_demo<span class="regexp">/zinnia_demo/</span>settings.py</div><div class="line"></div><div class="line">TEMPLATES = [</div><div class="line">&#123;</div><div class="line">...</div><div class="line">修改成下面的样子，作用是指明模板文件所在目录，即上面我们写的skeleton.html</div><div class="line"><span class="string">'DIRS'</span>: [os.path.<span class="keyword">join</span>(BASE_DIR, <span class="string">'templates'</span>)],</div><div class="line">...</div><div class="line">&#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<p>将 theme app 注册到 INSTALLED_APPS 列表中：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">zinnia_demo/zinnia_demo/settings<span class="selector-class">.py</span></div><div class="line"></div><div class="line">INSTALLED_APPS = [</div><div class="line">...</div><div class="line"><span class="string">'theme'</span>,</div><div class="line"><span class="string">'zinnia_bootstrap'</span>,</div><div class="line"><span class="string">'zinnia'</span>,</div><div class="line">]</div></pre></td></tr></table></figure>
<p>打开开发服务器，进入相应页面就可以看到代码高亮效果了。记得事先填充一些代码到博客文章中。</p>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>PS：</p>
<p>自带的评论功能当有人回复你发表的博客文章后会发送一封 email 给你的后台管理员账户邮箱（创建后台管理员账户填写的）。不过需要设置好发送邮件的邮箱，参考配置如下，在 settings.py 中：</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">zinnia_demo/zinnia_demo/settings.py</div><div class="line"></div><div class="line"><span class="attr">EMAIL_BACKEND</span> = 'django.core.mail.backends.smtp.EmailBackend'</div><div class="line"><span class="attr">EMAIL_HOST</span> = 'smtp.<span class="number">163</span>.com' <span class="comment"># 如果不是163邮箱请替换为邮箱服务商的smtp服务器地址</span></div><div class="line"><span class="attr">EMAIL_PORT</span> = <span class="number">465</span></div><div class="line"><span class="attr">EMAIL_HOST_USER</span> = '你的邮箱账号'  <span class="comment"># add your own accounts for local test</span></div><div class="line"><span class="attr">EMAIL_HOST_PASSWORD</span> = '你的邮箱密码'</div><div class="line"><span class="attr">EMAIL_USE_SSL</span> = True</div><div class="line"><span class="attr">DEFAULT_FROM_EMAIL</span> = EMAIL_HOST_USER</div></pre></td></tr></table></figure>
<p>不过要确保你的邮箱开启了 SMTP，如果没有的话请参考邮箱服务商的相关设置进行开启。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;目前网上搭建个人博客的方案很多，虽然使用诸如 Wordpress ( PHP )、Hexo ( Node.js )&lt;br&gt;等可以方便快速地搭建一款功能齐全的高性能个人博客，但是本文将尝试一种更为小众化的方案 —— 一款基于 django-blog-zinnia&lt;br&gt;( Python ) 的个人博客应用。 django-blog-zinnia&lt;br&gt;虽然小巧，但是具备了个人博客应用的全部基础功能，且具有很高的拓展性，并且开箱即用。以下是官方列出的一些特性：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;评论&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;站点地图（用于搜索引擎优化）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;文章归档视图（自动按时间归档博文，包括年、月、星期、日各个时间维度）&lt;/li&gt;
&lt;li&gt;RSS 或者 Atom Feed&lt;/li&gt;
&lt;li&gt;分类和标签云&lt;/li&gt;
&lt;li&gt;全文搜索&lt;/li&gt;
&lt;li&gt;Markdown 语法标记&lt;/li&gt;
&lt;li&gt;等等其他一些博客应用具备的全部基本功能。&lt;/li&gt;
&lt;li&gt;你可以参照它的官方文档 ( django-blog-zinnia documentation ) 的 installation 部分进行初始的安装，但本文也会给出详细的安装教程，并对相关的细节进行进一步补充，对功能进行进一步地拓展设置。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注：本博客在写作时每一个步骤均在实际环境下测试了一遍，基本确保没有问题。但是由于个人写作时的疏忽或者计算机环境的差异，也可能会有一些错误导致你卡在某个地方无法继续进行下去。如果是这样请给我留言，我和你一起排查问题，如果发现是博客写作时的错误也好使我尽快更正。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;建立虚拟环境&quot;&gt;&lt;a href=&quot;#建立虚拟环境&quot; class=&quot;headerlink&quot; title=&quot;建立虚拟环境&quot;&gt;&lt;/a&gt;建立虚拟环境&lt;/h2&gt;&lt;p&gt;因为在安装 django-blog-zinnia 的过程中会安装很多其他第三方依赖包，因此强烈建议使用虚拟环境安装，以免把系统环境弄乱。&lt;/p&gt;
&lt;p&gt;假设你的 python 版本是 3.4 或更高（建议使用 3.4 以上版本，当然 django-blog-zinnia 本身是兼容 python2.7 及以上版本的），且已经安装了虚拟环境管理工具 virtualenv，如果没有的话通过&lt;code&gt;pip install virtualenv&lt;/code&gt; 安装。打开命令行，进入到你想建立虚拟环境的目录，通过命令 &lt;code&gt;virtualenv zinnia_demo_env&lt;/code&gt; 创建一个名为 zinnia_demo_env 的虚拟环境，当然 zinnia_demo_env 这个目录名你可以任意指定。进入到创建的虚拟环境的 Scripts 目录下，输入 activate 命令激活虚拟环境，此时命令行前多了一个 ( zinnia_demo_env ) 说明已经激活，例如我的是：&lt;/p&gt;
&lt;figure class=&quot;highlight tex&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;(zinnia_demo_env) D:&lt;span class=&quot;tag&quot;&gt;\&lt;span class=&quot;name&quot;&gt;Users&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;\&lt;span class=&quot;name&quot;&gt;zmrenwu&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;\&lt;span class=&quot;name&quot;&gt;Envs&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;\&lt;span class=&quot;name&quot;&gt;zinnia&lt;/span&gt;&lt;/span&gt;_demo_env&lt;span class=&quot;tag&quot;&gt;\&lt;span class=&quot;name&quot;&gt;Scripts&lt;/span&gt;&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过 pip install django==1.9.6 安装 django，建议使用 1.9.6 版本，当然 &amp;gt;=1.9 的版本都是兼容的，但注意目前不兼容 django1.10。&lt;/p&gt;
    
    </summary>
    
      <category term="博客" scheme="http://liuhouer.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="blog" scheme="http://liuhouer.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>比较合适的div+css的命名</title>
    <link href="http://liuhouer.github.io/2016/07/19/%E6%AF%94%E8%BE%83%E5%90%88%E9%80%82%E7%9A%84div+css%E7%9A%84%E5%91%BD%E5%90%8D/"/>
    <id>http://liuhouer.github.io/2016/07/19/比较合适的div+css的命名/</id>
    <published>2016-07-19T15:46:49.000Z</published>
    <updated>2017-03-23T02:13:26.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>页头：header 登陆条：loginBar 注册：regsiter</li>
<li>标志：logo 主导航：nav</li>
<li>广告：banner</li>
<li>搜索：search</li>
</ul>
<hr>
<ul>
<li>外套：wrap</li>
<li>整个页面：content</li>
<li>侧栏：sideBar 页面主体：main</li>
<li>子导航：subMenu</li>
</ul>
<hr>
<ul>
<li>页脚：footer</li>
<li>友情链接：friendLink</li>
<li>合作伙伴：partner</li>
<li>加入：joinUs</li>
<li>指南：guild</li>
<li>服务：service</li>
<li>版权：copyRight<br>-</li>
</ul>
<hr>
<ul>
<li>滚动：scroll</li>
<li>容器：container</li>
<li>标签页：tab</li>
<li>文章列表：list</li>
<li>栏目标题：title</li>
<li>提示信息：msg</li>
<li>小技巧：tips</li>
<li>商标:label</li>
</ul>
<hr>
<ul>
<li>热点：hot</li>
<li>新闻：news</li>
<li>状态：status</li>
<li>按钮：btn</li>
<li>投票：vote</li>
<li>注释： note</li>
<li>下载：download</li>
</ul>
<hr>
<ul>
<li>边导航：sideBar</li>
<li>左导航：leftsideBar</li>
<li>右导航：rightsideBar</li>
<li>菜单：menu</li>
<li>子菜单：subMenu</li>
<li>边导航图标：sidebarIcon</li>
<li>面包屑：breadCrumb（即页面所处位置导航提示）</li>
<li>当前的：current</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;页头：header 登陆条：loginBar 注册：regsiter&lt;/li&gt;
&lt;li&gt;标志：logo 主导航：nav&lt;/li&gt;
&lt;li&gt;广告：banner&lt;/li&gt;
&lt;li&gt;搜索：search&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;外套：wrap&lt;
    
    </summary>
    
      <category term="html" scheme="http://liuhouer.github.io/categories/html/"/>
    
    
      <category term="html" scheme="http://liuhouer.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>水魔方游玩攻略</title>
    <link href="http://liuhouer.github.io/2016/07/13/%E6%B0%B4%E9%AD%94%E6%96%B9%E6%B8%B8%E7%8E%A9%E6%94%BB%E7%95%A5/"/>
    <id>http://liuhouer.github.io/2016/07/13/水魔方游玩攻略/</id>
    <published>2016-07-13T15:46:49.000Z</published>
    <updated>2017-03-23T02:13:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="水魔方游玩提前须！（网上扒的，四哥copy、小五整理，必为精品！！！）"><a href="#水魔方游玩提前须！（网上扒的，四哥copy、小五整理，必为精品！！！）" class="headerlink" title="水魔方游玩提前须！（网上扒的，四哥copy、小五整理，必为精品！！！）"></a>水魔方游玩提前须！（网上扒的，四哥copy、小五整理，必为精品！！！）</h1><h2 id="网友旅游攻略-1"><a href="#网友旅游攻略-1" class="headerlink" title="网友旅游攻略(1):"></a>网友旅游攻略(1):</h2><ul>
<li>我是2016.7.9号周六去玩的，9点半到的，晚上4点半走的，人比较多，但是能玩的基本都玩遍了，非常过瘾。<h3 id="时间把控"><a href="#时间把控" class="headerlink" title="- 时间把控"></a>- 时间把控</h3></li>
<li>要在早上9点半之前到现场领票，这样可以尽快的玩你想玩的项目，否则再晚就要排10-60分钟不等的队才能玩上。<br>然后进门右手边向前，依次是洗澡间和买柜子处。 首先到买柜子处，最少300元现金买一个柜子手环，里面冲有250元现金，可以在园内消费。<br>驴妈妈的票价比别处便宜5块，但是需要到门口右侧的马路边再往水魔方方向走，那里有一把特别小的小伞，会有驴妈妈工作人员，直接给你票。<br>一个柜子可以放下2人左右的东西，可以先买一个试试是否都能放下。</li>
</ul>
<h3 id="携带东西"><a href="#携带东西" class="headerlink" title="- 携带东西"></a>- 携带东西</h3><ul>
<li>泳衣</li>
<li>泳镜</li>
<li>防晒霜，要每隔1～2小时涂一次脸蛋和肩膀，否则晒伤好痛，我的肩膀疼了好多天</li>
<li>浴巾每人一条，可以非常好的起到防晒作用，否则肩膀后背基本都会晒伤</li>
<li>可爱塑料小提兜，可以把近视镜和泳镜等偶尔项目不让带的东西放里面，同时游玩时浴巾放在上面不会弄脏</li>
<li>洗澡用品</li>
<li>拖鞋最好每人带两双，因为在玩大波浪时人太多经常会有人穿错拖鞋，如果你不想穿别人的，最好自备两双，或者现场买45元一双的。记住，游玩时最好把鞋子藏到一个别人一般不动的地方。</li>
<li>太阳伞就不用拿了，人太多不方便打。</li>
<li>游泳圈，最好每人网上买一个，每人一个，园内45元租一个，太贵，都够买好几个了。玩大波浪如果有游泳圈就可以非常爽的体验波浪的壮观而不被拍到水底，有危险。</li>
<li>水和零食可以自带一些，有时候会查有时候不查，看自己感觉了。</li>
<li><p>进去之后最左侧的第一个，第二个，第三个，都非常的好玩，建议进去先玩，然后大波浪有时间限制，看好时间再去玩。有几个项目12点以后才开，看好时间早点去排队把。</p>
<a id="more"></a>
</li>
</ul>
<h2 id="网友旅游攻略-2-："><a href="#网友旅游攻略-2-：" class="headerlink" title="网友旅游攻略(2)："></a>网友旅游攻略(2)：</h2><blockquote>
<p>我总结一下经验！ 因为住回龙观所以一早七点多就出发了！ 怕路上堵车，幸运的是没有堵车！八点半不到就到了！<br>首先说明一下正门北边的停车场是员工停车场！因为去的早可以停在这里！<br>不要停车费！八点四十左右有保安管理所以不要在车上呆着可以在安检通道大棚下等候！不然就叫你去停车场里了！哪里收费5元一小时！还要注意的是一定在安检通道前等待！早进去也没有用，倒时候还要把你哄出来安检！<br>如果多人去的话九点半安检可以先叫一个人不拿东西去售票窗口换票，6、7、8是网络换票口！其他人拿东西过安检到大门口排队，因为十点才能进大门所以这样最省时间！我们一直排第一名！<br>还有水只能带矿泉水！别的有色饮料都不行！吃的可以带些火腿肠和巧克力！九点五十多门口有开园欢迎仪式！进入园区后先找一个人去换储物柜！存里面200到300之间就行！如果不在园区吃饭的话存100就够了！<br>园区吃饭普遍比外面要贵一倍多！量也少！盖饭在40左右，面也要25元！我们四个人吃了快两百！<br>剩下的人去换衣服，换完储物柜的人在去找换衣服的人这样最省时间！<br>储物柜两个人用一个就可以了！没有想象的那么小！还要注意的是买手机防水袋的还是先把手机放在储物柜里！因为你进去先玩大型戏水项目是什么都不让带的！我们就是又回去放了次手机！<br>左手边的两个项目非常刺激！一进去可以多玩几次！<br>因为早上排队的比较少可以连着玩！到了下午就要排好半天了！玩完大型项目就可以回去拿手机了！去沙滩等待冲浪最早一次是11点半！<br>不会游泳的要带好游泳圈，里面租35不限时间！我们自己带了游泳圈但是打气的不给力，去买游泳圈那充的气一个要15元，觉得有点被黑的感觉！<br>冲浪相当刺激！玩了就不想玩别的了！<br>还有注意的是防晒还有拖鞋的事情，最好带个看不到里面东西的布袋！大家把拖鞋放一起这样不容易丢！因为到下午冲浪时人非常多！我就看到一个人穿了个久拖鞋换了个别人的新的！<br>一直玩到晚上八点我们才走！非常愉快的一次游玩！<br>感谢驴妈妈旅游网价格合理公道！门口到票的也没办法在便宜！只能说他们的票可以一直玩到晚上叫我们退票买他的！我们没有相信，后来在门口知道白天的票本来就可以玩到晚上！就写到这里吧！希望可以对大家有帮助！</p>
</blockquote>
<h2 id="准备篇："><a href="#准备篇：" class="headerlink" title="准备篇："></a>准备篇：</h2><ul>
<li><p>最好最好四个人结伴前往，前提是四个人都是“敢玩”的，因为大的游乐设施都是2或4人一组，多了少了都不让上去。</p>
</li>
<li><p>能不周末就不周末去，今天是周六，园内的工作人员说，预计两万的客流，实际达到了四万。那人，，，，煮饺子！！</p>
</li>
<li><p>带泳衣就可以了，想游两下的话带上泳镜，重要的是要穿拖鞋，里边不提供而且地非常烫，游泳圈特别没必要，尤其在门口买的小摊上的更是亏，园内提供泳圈和救生衣，泳帽是根本不用滴。</p>
</li>
<li><p>非常晒预备好防晒霜和浴巾还有伞，其实太阳那么大个人认为防晒霜已经浮云了，浴巾非常有必要，当你排队两三个小时的时候就会发现有个浴巾遮下太阳非常有用。</p>
</li>
<li><p>拿水有必要，但是里面也有卖的，矿泉水4块一瓶这个价位，门口也有小摊，这个倒是没什么太纠结的。</p>
</li>
<li><p>基本上一去就是一天，做好准备吧。早去晚归。</p>
</li>
</ul>
<h2 id="进门篇："><a href="#进门篇：" class="headerlink" title="进门篇："></a>进门篇：</h2><ul>
<li><p>不要以为团购并不普及，全是团购去的！那兑票的队，长！打架的骂人的插队的应有尽有，所以最好最好九点就到把票换了，晚了九点半到，十点以后的话，用一个愤青的话“排两个小时了没动窝”。</p>
</li>
<li><p>可能人太多了管理特别差劲，身份证根本没用了。。。但也最好预备着。</p>
</li>
<li><p>有传言说丰台的身份证半价，但是仍需验证。</p>
</li>
</ul>
<h2 id="设施篇："><a href="#设施篇：" class="headerlink" title="设施篇："></a>设施篇：</h2><ul>
<li><p>进门直奔造浪池，看好几点有造浪表演，这个可是水魔方不可错过的一项，确定参加哪一场后开始安排玩其他设施的时间，以保证及时冲浪冲浪池最深的地方1.4m越来越浅直到沙滩，1.4m那里很猛哒我姐夫在1.4m那里，有个女的泳裤被冲掉了就被他们抛啊抛的哈哈还听别人说有的女的，上半身全被冲掉啦==</p>
</li>
<li><p>以周末为例，最好多人分头排队，最高最火的那个滑梯，同时也是水魔方精彩的项目，我们排了足足三个小时，工作人员还跟游客骂起来了啊各种骂啊最高的滑梯一定不要错过！！不然你就白来水魔方了！！爽啊</p>
</li>
<li><p>龙卷风我们没排上因为马上要关门了，也是必去项目之一，四人一起的，每个出来的人第一句话都是“我*！”惊险可想而知。</p>
</li>
<li><p>魔幻漩涡。别小看这个看起来并不怎么样的实施，必去之一！！不必最高的那个滑梯次。如果跟我们一样倒着出来就悲剧咯</p>
</li>
<li><p>精彩的肯定还有，剩下的没开or没排上，总之还是挺好玩的。休闲的也有漂流池和SPA池，休闲好去处</p>
</li>
</ul>
<h2 id="其他篇："><a href="#其他篇：" class="headerlink" title="其他篇："></a>其他篇：</h2><ul>
<li><p>看到N多人为了抢不到双人游泳圈苦苦寻觅，其实去漂流池旁边等最有效的，好多人在那里都抛弃了自己的泳圈，随便拿一个就走人啦，用不着在设施底下排队等也用不到等人家慢慢充气啦。</p>
</li>
<li><p>本来他们设计的是园内手牌消费，不知人太多了还是没有完善系统，今天是现金，所以不要把钱也锁到储物柜啦，没法买东西啦。</p>
</li>
<li><p>关于饭，价钱和吉野家差不多，一个纸筒一份饭，个人觉得味道和吉野家也差不多，但是我姐不这么认为。鸡块12块四小块，烤肠5块一根差不多就这个价位，饮料6或8，咖啡奶茶啥的普遍12+。</p>
</li>
<li><p>零食也是有必要的，因为我们排漫长队的时候看到别人吃零食真是羡慕嫉妒恨啊。</p>
</li>
<li><p>关于看队伍目测时间，楼梯上可以排队的设施基本上到楼梯口就需要30min了，这里指的是比较大的设施，高滑梯那种是10个10个往上放人，插队的具多，排到楼梯口也还需要多则一小时少则半小时。</p>
</li>
<li><p>三个高滑梯的身体要求，最高的那个有身高要求是1.4M+,三个共有的是40kg以上90kg以下，不符合的不要费劲排队了，轻了重了都有可能滑不下来。今天看到不少孩子排了好几个小时最后也上不去。</p>
</li>
<li><p>任何首饰手表卡子啥的都别带进去了，玩设施前都会让你摘下，也有就不听劝的，个人认为一个首饰就别带进去了，而且确实有个设施以因为一个首饰碰到了不该碰的按钮停运了10分钟的场面，何必。</p>
</li>
<li><p>除了造浪池最深1.4m,其他的基本0.9m，还是有一定安全保障的。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;水魔方游玩提前须！（网上扒的，四哥copy、小五整理，必为精品！！！）&quot;&gt;&lt;a href=&quot;#水魔方游玩提前须！（网上扒的，四哥copy、小五整理，必为精品！！！）&quot; class=&quot;headerlink&quot; title=&quot;水魔方游玩提前须！（网上扒的，四哥copy、小五整理，必为精品！！！）&quot;&gt;&lt;/a&gt;水魔方游玩提前须！（网上扒的，四哥copy、小五整理，必为精品！！！）&lt;/h1&gt;&lt;h2 id=&quot;网友旅游攻略-1&quot;&gt;&lt;a href=&quot;#网友旅游攻略-1&quot; class=&quot;headerlink&quot; title=&quot;网友旅游攻略(1):&quot;&gt;&lt;/a&gt;网友旅游攻略(1):&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;我是2016.7.9号周六去玩的，9点半到的，晚上4点半走的，人比较多，但是能玩的基本都玩遍了，非常过瘾。&lt;h3 id=&quot;时间把控&quot;&gt;&lt;a href=&quot;#时间把控&quot; class=&quot;headerlink&quot; title=&quot;- 时间把控&quot;&gt;&lt;/a&gt;- 时间把控&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;要在早上9点半之前到现场领票，这样可以尽快的玩你想玩的项目，否则再晚就要排10-60分钟不等的队才能玩上。&lt;br&gt;然后进门右手边向前，依次是洗澡间和买柜子处。 首先到买柜子处，最少300元现金买一个柜子手环，里面冲有250元现金，可以在园内消费。&lt;br&gt;驴妈妈的票价比别处便宜5块，但是需要到门口右侧的马路边再往水魔方方向走，那里有一把特别小的小伞，会有驴妈妈工作人员，直接给你票。&lt;br&gt;一个柜子可以放下2人左右的东西，可以先买一个试试是否都能放下。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;携带东西&quot;&gt;&lt;a href=&quot;#携带东西&quot; class=&quot;headerlink&quot; title=&quot;- 携带东西&quot;&gt;&lt;/a&gt;- 携带东西&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;泳衣&lt;/li&gt;
&lt;li&gt;泳镜&lt;/li&gt;
&lt;li&gt;防晒霜，要每隔1～2小时涂一次脸蛋和肩膀，否则晒伤好痛，我的肩膀疼了好多天&lt;/li&gt;
&lt;li&gt;浴巾每人一条，可以非常好的起到防晒作用，否则肩膀后背基本都会晒伤&lt;/li&gt;
&lt;li&gt;可爱塑料小提兜，可以把近视镜和泳镜等偶尔项目不让带的东西放里面，同时游玩时浴巾放在上面不会弄脏&lt;/li&gt;
&lt;li&gt;洗澡用品&lt;/li&gt;
&lt;li&gt;拖鞋最好每人带两双，因为在玩大波浪时人太多经常会有人穿错拖鞋，如果你不想穿别人的，最好自备两双，或者现场买45元一双的。记住，游玩时最好把鞋子藏到一个别人一般不动的地方。&lt;/li&gt;
&lt;li&gt;太阳伞就不用拿了，人太多不方便打。&lt;/li&gt;
&lt;li&gt;游泳圈，最好每人网上买一个，每人一个，园内45元租一个，太贵，都够买好几个了。玩大波浪如果有游泳圈就可以非常爽的体验波浪的壮观而不被拍到水底，有危险。&lt;/li&gt;
&lt;li&gt;水和零食可以自带一些，有时候会查有时候不查，看自己感觉了。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;进去之后最左侧的第一个，第二个，第三个，都非常的好玩，建议进去先玩，然后大波浪有时间限制，看好时间再去玩。有几个项目12点以后才开，看好时间早点去排队把。&lt;/p&gt;
    
    </summary>
    
      <category term="旅游" scheme="http://liuhouer.github.io/categories/%E6%97%85%E6%B8%B8/"/>
    
    
      <category term="攻略" scheme="http://liuhouer.github.io/tags/%E6%94%BB%E7%95%A5/"/>
    
      <category term="游记" scheme="http://liuhouer.github.io/tags/%E6%B8%B8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Springmvc自定义注解实现自定义拦截</title>
    <link href="http://liuhouer.github.io/2016/07/11/Springmvc%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8B%A6%E6%88%AA/"/>
    <id>http://liuhouer.github.io/2016/07/11/Springmvc自定义注解实现自定义拦截/</id>
    <published>2016-07-11T15:46:49.000Z</published>
    <updated>2017-03-23T02:13:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>我自己搭的springmvc的项目，想添加登陆校验。<br>最简易优雅的实现，在需要用户信息才可以操作的Controller的方法上面加上一个@CheckLogin就可以实现登陆校验。<br>假如未登录–&gt;跳转到登录页–&gt;登陆成功–&gt;自动跳回刚才要执行的动作方法。</p>
<p>用springmvc的handlerinterceptor的来实现。</p>
<h2 id="一-首先介绍一下action拦截器："><a href="#一-首先介绍一下action拦截器：" class="headerlink" title="一.首先介绍一下action拦截器："></a>一.首先介绍一下action拦截器：</h2><p>HandlerInterceptor是Spring MVC为我们提供的拦截器接口，来让我们实现自己的处理逻辑，HandlerInterceptor 的内容如下：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HandlerInterceptor</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(</span></span></div><div class="line">            HttpServletRequest request, HttpServletResponse response,</div><div class="line">            Object <span class="keyword">handler</span>)</div><div class="line">            <span class="keyword">throws</span> Exception;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(  </span></span></div><div class="line">        HttpServletRequest request, HttpServletResponse response,   </div><div class="line">        Object <span class="keyword">handler</span>, ModelAndView modelAndView)   </div><div class="line">        <span class="keyword">throws</span> Exception;  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(  </span></span></div><div class="line">        HttpServletRequest request, HttpServletResponse response,   </div><div class="line">        Object <span class="keyword">handler</span>, Exception ex)  </div><div class="line">        <span class="keyword">throws</span> Exception;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到接口有3个方法，其含义如下：</p>
<blockquote>
<p>preHandle：在执行action里面的处理逻辑之前执行，它返回的是boolean，这里如果我们返回true在接着执行postHandle和afterCompletion，如果我们返回false则中断执行。</p>
<p>postHandle：在执行action里面的逻辑后返回视图之前执行。</p>
<p>afterCompletion：在action返回视图后执行。</p>
<p>HandlerInterceptorAdapter适配器是Spring<br>MVC为了方便我们使用HandlerInterceptor而对HandlerInterceptor<br>的默认实现，里面的3个方法没有做任何处理，在preHandle方法直接返回true，这样我们继承HandlerInterceptorAdapter后只需要实现3个方法中我们需要的方法即可，而不像继承HandlerInterceptor一样不管是否需要3个方法都要实现。</p>
<p>当然借助于HandlerInterceptor我们可以实现很多其它功能，比如日志记录、请求处理时间分析等，权限验证只是其中之一。</p>
</blockquote>
<a id="more"></a>
<h2 id="二-下面我们就来一步一步来完成注解式权限验证的功能。"><a href="#二-下面我们就来一步一步来完成注解式权限验证的功能。" class="headerlink" title="二.下面我们就来一步一步来完成注解式权限验证的功能。"></a>二.下面我们就来一步一步来完成注解式权限验证的功能。</h2><p>首先添加一个账户的Controller和登录的Action及视图来模拟在没有权限时跳转到登陆页面，内容分别如下：</p>
<h3 id="1-新建包com-bruce-interceptor包-添加自定义注解CheckLogin-java，内容如下："><a href="#1-新建包com-bruce-interceptor包-添加自定义注解CheckLogin-java，内容如下：" class="headerlink" title="1.新建包com.bruce.interceptor包,添加自定义注解CheckLogin.java，内容如下："></a>1.新建包com.bruce.interceptor包,添加自定义注解CheckLogin.java，内容如下：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.bruce.interceptor;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.Inherited;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.Target;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">登陆校验|此注解写在用于登录权限的Controller上面</div><div class="line"><span class="doctag">@author</span> bruce</div><div class="line"><span class="doctag">@date</span> 2016年7月11日</div><div class="line"><span class="doctag">@email</span> zhangyang226@gmail.com</div><div class="line"><span class="doctag">@site</span> http://blog.northpark.cn | http://northpark.cn | orginazation https://github.com/jellyband</div><div class="line"> * </div><div class="line"> */</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Inherited</span></div><div class="line"><span class="meta">@Target</span>(ElementType.METHOD)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CheckLogin &#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">validate</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-添加自己的拦截器实现CheckLogin继承于HandlerInterceptorAdapter，"><a href="#2-添加自己的拦截器实现CheckLogin继承于HandlerInterceptorAdapter，" class="headerlink" title="2.添加自己的拦截器实现CheckLogin继承于HandlerInterceptorAdapter，"></a>2.添加自己的拦截器实现CheckLogin继承于HandlerInterceptorAdapter，</h3><p>com.bruce.interceptor包中的LoginInterceptor.java 内容如下：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.bruce.interceptor;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.web.method.HandlerMethod;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.<span class="keyword">handler</span>.HandlerInterceptorAdapter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.bruce.constant.BC\_Constant;</div><div class="line"><span class="keyword">import</span> com.bruce.model.User;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">登陆拦截器.</div><div class="line"><span class="doctag">@author</span> zhangyang</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object <span class="keyword">handler</span>)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">if</span>(<span class="keyword">handler</span>.getClass().isAssignableFrom(HandlerMethod.class))&#123;</div><div class="line">        CheckLogin checklogin = ((HandlerMethod) <span class="keyword">handler</span>).getMethodAnnotation(CheckLogin.class);</div><div class="line"></div><div class="line">        <span class="comment">//没有声明需要权限,或者声明不验证权限</span></div><div class="line">        <span class="keyword">if</span>(checklogin == <span class="keyword">null</span> || checklogin.validate() == <span class="keyword">false</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;                </div><div class="line">            <span class="comment">//在这里实现自己的权限验证逻辑</span></div><div class="line">            User user = (User) request.getSession().getAttribute(<span class="string">"user"</span>);</div><div class="line">            <span class="keyword">if</span>(user!=<span class="keyword">null</span>)&#123;<span class="comment">//如果验证成功返回true（这里直接写false来模拟验证失败的处理）</span></div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;<span class="comment">//如果验证失败</span></div><div class="line">                <span class="comment">//返回到登录界面</span></div><div class="line">                String url = request.getRequestURL().toString();</div><div class="line">                String[] strs = url.split(<span class="string">"8082/"</span>);</div><div class="line">                String postfix = strs[<span class="number">1</span>];</div><div class="line">                url = <span class="string">"http://"</span>+BC_Constant.Domain+<span class="string">"/"</span>+postfix;</div><div class="line">                response.sendRedirect(<span class="string">"/login?redirectURI="</span>+url);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;       </div><div class="line">        &#125;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;   </div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object <span class="keyword">handler</span>, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="keyword">super</span>.postHandle(request, response, <span class="keyword">handler</span>, modelAndView);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-配置项目的spring-mvc-xml添加如下内容："><a href="#3-配置项目的spring-mvc-xml添加如下内容：" class="headerlink" title="3.配置项目的spring-mvc.xml添加如下内容："></a>3.配置项目的spring-mvc.xml添加如下内容：</h3><figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> &lt;!-- 定义拦截器 --&gt;</div><div class="line">&lt;mvc:interceptors&gt;  </div><div class="line">    &lt;!-- 国际化操作拦截器 如果采用基于（请求/Session/Cookie）则必需配置 --&gt; </div><div class="line">    &lt;bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" /&gt;  </div><div class="line">    &lt;!-- 如果不定义 mvc:mapping path 将拦截所有的URL请求 --&gt;</div><div class="line">    &lt;bean class="com.bruce.interceptor.LoginInterceptor"&gt;&lt;/bean&gt;</div><div class="line">&lt;/mvc:interceptors&gt;</div></pre></td></tr></table></figure>
<h3 id="4-具体的Controller写法"><a href="#4-具体的Controller写法" class="headerlink" title="4.具体的Controller写法"></a>4.具体的Controller写法</h3><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//添加次注解，未登录的自动跳转到登录页</div><div class="line">@<span class="type">CheckLogin</span></div><div class="line">@<span class="type">RequestMapping</span>(<span class="string">"/add"</span>)</div><div class="line">public <span class="type">String</span> toAdd(<span class="type">ModelMap</span> map,<span class="type">String</span> userid,<span class="type">HttpServletRequest</span> request,<span class="type">HttpServletResponse</span> response) &#123;</div><div class="line"><span class="type">String</span> <span class="literal">result</span> = <span class="string">"/page/user/lyricAdd"</span>;</div><div class="line"><span class="keyword">return</span> <span class="literal">result</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到正确执行了权限判断逻辑，这样我们只需要在我们在需要权限验证的action上加上这个注解就可以实现权限控制功能了。</p>
<p>注解式权限验证的内容到此结束。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我自己搭的springmvc的项目，想添加登陆校验。&lt;br&gt;最简易优雅的实现，在需要用户信息才可以操作的Controller的方法上面加上一个@CheckLogin就可以实现登陆校验。&lt;br&gt;假如未登录–&amp;gt;跳转到登录页–&amp;gt;登陆成功–&amp;gt;自动跳回刚才要执行的动作方法。&lt;/p&gt;
&lt;p&gt;用springmvc的handlerinterceptor的来实现。&lt;/p&gt;
&lt;h2 id=&quot;一-首先介绍一下action拦截器：&quot;&gt;&lt;a href=&quot;#一-首先介绍一下action拦截器：&quot; class=&quot;headerlink&quot; title=&quot;一.首先介绍一下action拦截器：&quot;&gt;&lt;/a&gt;一.首先介绍一下action拦截器：&lt;/h2&gt;&lt;p&gt;HandlerInterceptor是Spring MVC为我们提供的拦截器接口，来让我们实现自己的处理逻辑，HandlerInterceptor 的内容如下：&lt;/p&gt;
&lt;figure class=&quot;highlight aspectj&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HandlerInterceptor&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;preHandle&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            HttpServletRequest request, HttpServletResponse response,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            Object &lt;span class=&quot;keyword&quot;&gt;handler&lt;/span&gt;)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;postHandle&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        HttpServletRequest request, HttpServletResponse response,   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Object &lt;span class=&quot;keyword&quot;&gt;handler&lt;/span&gt;, ModelAndView modelAndView)&lt;/span&gt;   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception&lt;/span&gt;;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;afterCompletion&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        HttpServletRequest request, HttpServletResponse response,   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Object &lt;span class=&quot;keyword&quot;&gt;handler&lt;/span&gt;, Exception ex)&lt;/span&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception&lt;/span&gt;;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到接口有3个方法，其含义如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;preHandle：在执行action里面的处理逻辑之前执行，它返回的是boolean，这里如果我们返回true在接着执行postHandle和afterCompletion，如果我们返回false则中断执行。&lt;/p&gt;
&lt;p&gt;postHandle：在执行action里面的逻辑后返回视图之前执行。&lt;/p&gt;
&lt;p&gt;afterCompletion：在action返回视图后执行。&lt;/p&gt;
&lt;p&gt;HandlerInterceptorAdapter适配器是Spring&lt;br&gt;MVC为了方便我们使用HandlerInterceptor而对HandlerInterceptor&lt;br&gt;的默认实现，里面的3个方法没有做任何处理，在preHandle方法直接返回true，这样我们继承HandlerInterceptorAdapter后只需要实现3个方法中我们需要的方法即可，而不像继承HandlerInterceptor一样不管是否需要3个方法都要实现。&lt;/p&gt;
&lt;p&gt;当然借助于HandlerInterceptor我们可以实现很多其它功能，比如日志记录、请求处理时间分析等，权限验证只是其中之一。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="java" scheme="http://liuhouer.github.io/categories/java/"/>
    
    
      <category term="自定义注解" scheme="http://liuhouer.github.io/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3/"/>
    
      <category term="springmvc" scheme="http://liuhouer.github.io/tags/springmvc/"/>
    
  </entry>
  
  <entry>
    <title>孤独大侠</title>
    <link href="http://liuhouer.github.io/2016/05/26/%E5%AD%A4%E7%8B%AC%E5%A4%A7%E4%BE%A0/"/>
    <id>http://liuhouer.github.io/2016/05/26/孤独大侠/</id>
    <published>2016-05-26T15:46:49.000Z</published>
    <updated>2017-03-23T02:13:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：森目</p>
<p>有一个大侠很孤独，孤独得不知道做什么好，于是决定去追杀一个恶霸。恶霸被追得满世界跑，跑着跑着，亲戚朋友都跑没了，于是恶霸也变得很孤独。为了方便，我们不妨称这两人为孤独大侠和孤独恶霸。</p>
<p>孤独大侠追着孤独恶霸，从早到晚，从春到冬，从左到右，从北到南。追着追着，他们感到实在太他妈的孤独了，于是约定好每天午觉的时候聊上一聊。为了保证彼此的安全，他们睡在两座相邻的山峰上，隔空用传音聊天。有时孤独大侠生病了，拉下了距离，两个人就在隔得很远的山峰上用“远得不能再远的传音”喊话。两个人叽里呱啦聊得火热，果然一点儿都不孤独了。高兴起来的孤独大侠觉得追杀孤独恶霸好像也没有什么特别的意义，就经常故意放慢步伐，好让他多歇一会儿，不要跑得那么累。偶尔聊得特别高兴，孤独大侠还会给孤独恶霸放个假，让他回家探探亲，看看老婆抱抱孩子。但没放几天，孤独大侠又会去追孤独恶霸，因为他又感到无比的孤独了。</p>
<p>他们聊得越来越投契，越来越觉得对方理应是自己这辈子最好的朋友，从来没有任何人能像对方那样了解自己。有一回，他们甚至就隔着块大石头聊了一晚上，直到清晨的露水打湿干裂的嘴唇，才勉强挪动僵硬的双腿开始例行的追和逃。还有一回，他们隔着一条河交换了食物，孤独大侠吃了孤独恶霸的烤兔，觉得好吃，竖了下大拇指。孤独恶霸吃了孤独大侠的烤鱼，更觉得好吃，抱了一下拳。那时天已擦黑，孤独大侠忽然想起今天还没有追过孤独恶霸，貌似没有办法对自己交差，连忙说声对不住，“嗖”地一声，朝孤独恶霸头顶两尺高处打过去一颗铁丸。孤独恶霸摸着头嘿嘿一笑，牙齿很白。</p>
<p>某天，排名比孤独大侠还要高出许多的另一位大侠（据说就是头号大侠，我们不妨称之为未知大侠）路过碰到了正在休息的孤独恶霸。本来未知大侠也不屑于搭理这种小角色，可看到孤独恶霸笑得实在太开心，不由想起自己已经孤独很久，也没个人可以说话解闷。于是他就微笑上前，想交个朋友。不料对方正沉浸在和十几座山外的孤独大侠的聊天当中，居然没理他。未知大侠三番两次得不到回应，一怒之下运出“打谁谁死神功”轰了过去。孤独恶霸这次本来已经死翘翘了，但是闻讯赶来的孤独大侠舍不得他死，费尽九牛二虎之力，求了不少人，终于把他救活。</p>
<p>开始追逃的前几年，每到春天最宜人的日子，管督察的大侠都会不远不近地跟着孤独大侠进行督查，这时两人就只好以命相搏，飞刀，铁丸满天飞。当然，每当督察大侠责问孤独大侠为什么不杀了孤独恶霸时，孤独大侠都会借口距离太远不方便操作，始终没有使出绝技“重得接不住的掌”来痛下杀手。后来，督察大侠也就懒得陪他们满世界乱跑，侠界也就彻底失去了他们的消息。</p>
<p>不过，孤独大侠仍然在追杀着孤独恶霸，其实对方早已提议——既然大家交情都这么好了，为什么不停止追逃而化敌为友呢？孤独大侠想了很久说，不行，因为除了这个，我实在不知道做什么好。又过了一阵子，在一次兴高采烈的聊天之后，孤独大侠终于同意了对方的请求，决定试上一试，便和孤独恶霸一起回了家。孤独大侠在孤独恶霸家做客好几个月，开始也觉得确实十分快活，绝无孤独感。可惜时间一久，浑身瘙痒，痒得呆不住，只好趁孤独恶霸一家熟睡之际逃走了。孤独恶霸晨起发现对方跑掉了，本以为自己会大笑三声说危险解除了，我高枕无忧啦，没想到却被一种突然而至的孤独击中。他虽然很爱自己的妻子和孩子，很想多陪陪他们，但最后还是出门追孤独大侠去了。</p>
<p>这一追，就是整整一年，因为孤独大侠实在逃得太快，孤独恶霸往往只能看到他的残影。在这年的最后一天，气喘吁吁的孤独恶霸终于追上了孤独大侠，孤独恶霸扶着腰正想问对方为什么一直不开“远得不能再远的传音”，孤独大侠却忽然变了脸色，运起“重得接不住的掌”打了过来。因为过了整整一年，孤独大侠已经变得十分极其太过孤独了，他已经升级为“终极孤独大侠”，终极孤独的他，必然要对孤独恶霸实行终极追杀。孤独恶霸心想这回必然歇菜了，挡也是白费。没想到，由于孤独大侠已经升级为“终极孤独大侠”，他的“重得接不住的掌”也自动升级为了“终极重得接不住的掌”，还没等发出多远，这个掌就因为自身太重直接砸到了地上，砸出了一个深坑，爆出漫天尘土，差点砸到了自己的脚尖。等烟尘散尽，灰头土脸的孤独大侠看了看同样灰头土脸的孤独恶霸，终于忍不住哈哈地笑了，孤独恶霸抓了抓脑袋，也嘿嘿地笑了起来。</p>
<p>从此两人继续追来逃去，聊东聊西的生活，他们仍然感到对方是这辈子最值得珍惜的朋友。一直追啊追啊，逃啊逃啊，直到孤独大侠都退休了，直到孤独恶霸也退休了，直到孤独恶霸的孩子都生第三个孩子了，直到孤独恶霸的妻子老死了，直到他们都死掉了，他们还是好朋友。可是，他们到底为什么那么投缘啊？</p>
<p>永远没有人知道，这成了侠界和恶霸界永远的谜。</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：森目&lt;/p&gt;
&lt;p&gt;有一个大侠很孤独，孤独得不知道做什么好，于是决定去追杀一个恶霸。恶霸被追得满世界跑，跑着跑着，亲戚朋友都跑没了，于是恶霸也变得很孤独。为了方便，我们不妨称这两人为孤独大侠和孤独恶霸。&lt;/p&gt;
&lt;p&gt;孤独大侠追着孤独恶霸，从早到晚，从春到冬，从左到右
    
    </summary>
    
      <category term="小说" scheme="http://liuhouer.github.io/categories/%E5%B0%8F%E8%AF%B4/"/>
    
    
      <category term="小说" scheme="http://liuhouer.github.io/tags/%E5%B0%8F%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title>蛇先生×小仓鼠</title>
    <link href="http://liuhouer.github.io/2016/05/23/%E8%9B%87%E5%85%88%E7%94%9F%C3%97%E5%B0%8F%E4%BB%93%E9%BC%A0/"/>
    <id>http://liuhouer.github.io/2016/05/23/蛇先生×小仓鼠/</id>
    <published>2016-05-23T15:46:49.000Z</published>
    <updated>2017-03-23T02:13:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="蛇先生×小仓鼠"><a href="#蛇先生×小仓鼠" class="headerlink" title="蛇先生×小仓鼠"></a>蛇先生×小仓鼠</h2><h3 id="1-蛇先生是动物园的蛇先生。"><a href="#1-蛇先生是动物园的蛇先生。" class="headerlink" title="1.蛇先生是动物园的蛇先生。"></a>1.蛇先生是动物园的蛇先生。</h3><p>小仓鼠是动物园里蛇先生的晚餐。<br>“蛇先生！你打算吃我吗！”<br>“……”<br>“蛇先生！你确定不先洗洗吗！”<br>“……”<br>“蛇先生！！你吃东西不拔毛吗！！”<br>“……”<br>“蛇先生！不拔毛的话……”<br>“闭嘴！再吵我就真的吃了你！”</p>
<h3 id="2-反正蛇先生还是动物园里的蛇先生。"><a href="#2-反正蛇先生还是动物园里的蛇先生。" class="headerlink" title="2.反正蛇先生还是动物园里的蛇先生。"></a>2.反正蛇先生还是动物园里的蛇先生。</h3><p>小仓鼠却变成了蛇先生的储备粮。<br>“蛇先生！今天你饿了吗！”<br>“……”<br>“蛇先生！！那你现在饿吗！”<br>“……”<br>“蛇先生！你吃不吃玉米粒啊！”<br>“……”<br>“蛇先生！你……”<br>蛇先生张开蛇嘴，吐出蛇信子，露出凶煞的表情。<br>“……蛇先生你终于肯吃我了吗？”<br>“……”<br>“那你拔毛吗！”<br>“滚。”<br>蛇先生一个扫尾把小仓鼠咕噜咕噜滚走了。</p>
<h3 id="3-蛇先生成了动物园第一条不吃仓鼠的蛇。"><a href="#3-蛇先生成了动物园第一条不吃仓鼠的蛇。" class="headerlink" title="3.蛇先生成了动物园第一条不吃仓鼠的蛇。"></a>3.蛇先生成了动物园第一条不吃仓鼠的蛇。</h3><p>小仓鼠成了动物园最著名的仓鼠。<br>蛇先生用尾尖点点仓鼠鼓鼓的腮帮子。<br>“这个是什么？”<br>“这似窝的粮似！！”<br>蛇先生用力戳了戳。<br>“很疼的！！！！！”<br>蛇先生张开嘴，“你还敢吼我。”<br>小仓鼠不舍的捂住腮帮子。<br>“…那你可以等我吃完再吃我吗？”<br>蛇先生收回蛇信子，溜去一边儿睡觉去了。<br>“好吧。”</p>
<h3 id="4-蛇先生是动物园中最不缺肉的蛇。"><a href="#4-蛇先生是动物园中最不缺肉的蛇。" class="headerlink" title="4.蛇先生是动物园中最不缺肉的蛇。"></a>4.蛇先生是动物园中最不缺肉的蛇。</h3><p>小仓鼠是动物园中长肉最快的仓鼠。<br>“你怎么这么胖了？”<br>“…因为没有跑轮！”<br>蛇先生将小仓鼠扫到自己身上。<br>“跑吧。”<br>“蛇先生你身上好滑！！！！”<br>“闭嘴，再不跑我吃了你。”<br>“蛇先生你身上好凉！！”<br>“闭嘴，再啰嗦我就吃了你。”<br>“蛇先生你身上还有花纹！！！”<br>“闭嘴！再多嘴我就……”<br>“蛇先生你身上一点儿毛都没有！！”<br>蛇先生很挫败。<br>为什么这招不管用了呢？</p>
<h3 id="5-蛇先生是动物园中最不怕热的蛇。"><a href="#5-蛇先生是动物园中最不怕热的蛇。" class="headerlink" title="5.蛇先生是动物园中最不怕热的蛇。"></a>5.蛇先生是动物园中最不怕热的蛇。</h3><p>小仓鼠是动物园中最奄奄一息的仓鼠。<br>“好热好热好热好热！！！”<br>“……”<br>“真的好热！！！”<br>“……”<br>“以前仓鼠窝还有纳凉板呢！！！”<br>“……”<br>“为什么蛇先生就没有呢！！”<br>“……”<br>“蛇先生你不热吗！！”<br>“你想说什么？”<br>“……我可以躺在你身上睡一觉吗？”<br>“……”<br>“蛇先生身上特别凉快的！！！”<br>“……”<br>“还滑滑的！！”<br>“……”<br>“还……”<br>“闭嘴，上来，吵醒我你就死定了。”<br>于是小仓鼠欢快的跑到蛇先生身上睡觉去了。<br>饲养员送食时，看到盘着蛇身休息的蛇先生，身上还有个四只爪子平爬的小东西。<br>“……那是什么？”<br>“是仓鼠。”<br>“它怎么不吃了？”<br>“……大概是……恋爱了。”</p>
<h3 id="6-蛇先生是动物园中最奇葩的蛇。"><a href="#6-蛇先生是动物园中最奇葩的蛇。" class="headerlink" title="6.蛇先生是动物园中最奇葩的蛇。"></a>6.蛇先生是动物园中最奇葩的蛇。</h3><p>小仓鼠是动物园中最幸福的仓鼠。<br>饲养员惊奇。<br>游客也很惊奇。<br>“哇！！你看！那条蛇不吃仓鼠！”<br>“原来真的不吃！”<br>“叽叽喳喳喳喳叽叽……”<br>小仓鼠抬头问问蛇先生。<br>“蛇先生蛇先生他们在看什么！！”<br>“看你，和我。”<br>“啊！为什么！！”<br>“因为我们相处的很愉快。”<br>小仓鼠噗嗤噗嗤的爬上蛇先生身上，抱着蛇先生后脑狠狠亲了一口。<br>“当然要愉快！！！”<br>“…给我滚下去。”<br>“哇！妈妈！你看那条蛇不仅不吃仓鼠！还会脸红啊！！！”</p>
<p>小仓鼠到现在都不懂为什么蛇先生一直不吃自己。<br>“蛇先生！！蛇先生！！”<br>“……”<br>“你为什么不吃我啊！！”<br>“嫌脏。”<br>“我每天都有口水浴的！！！”<br>“嫌腻。”<br>“我每天都有在你身上锻炼的！！！”<br>“嫌小。”<br>“你看你看我都胖了一圈儿了！！！”<br>“……”</p>
<p>蛇先生的窝里，每天小仓鼠都会这么问它。<br>然而，蛇先生依旧不会吃它。</p>
<p>真是个美好的动物园。</p>
<p>真是个美好的蛇先生，和小仓鼠。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;蛇先生×小仓鼠&quot;&gt;&lt;a href=&quot;#蛇先生×小仓鼠&quot; class=&quot;headerlink&quot; title=&quot;蛇先生×小仓鼠&quot;&gt;&lt;/a&gt;蛇先生×小仓鼠&lt;/h2&gt;&lt;h3 id=&quot;1-蛇先生是动物园的蛇先生。&quot;&gt;&lt;a href=&quot;#1-蛇先生是动物园的蛇先生。&quot; cla
    
    </summary>
    
      <category term="碎碎念" scheme="http://liuhouer.github.io/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
      <category term="碎碎念" scheme="http://liuhouer.github.io/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>微单微世界</title>
    <link href="http://liuhouer.github.io/2016/05/21/%E5%BE%AE%E5%8D%95%E5%BE%AE%E4%B8%96%E7%95%8C/"/>
    <id>http://liuhouer.github.io/2016/05/21/微单微世界/</id>
    <published>2016-05-21T07:41:15.000Z</published>
    <updated>2017-03-23T02:13:26.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>它并不是我的花 我只是恰好途经了它的盛放</strong><br><strong>同步更新到分类-微世界</strong></p>
<p><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/67923945.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/87724692.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/12485394.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/43890907.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/33553156.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/71478007.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/54986814.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/19144292.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/8199880.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/22002353.jpg" alt=""></p>
<a id="more"></a>
<p><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/4250594.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/27349057.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/5353150.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/14551624.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/44291243.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/24813716.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/11940907.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/68535462.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/80630521.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/9539985.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/72368393.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/736041.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/62232648.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/1922292.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/58676817.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/5059352.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/92142896.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/90931502.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/99907801.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/28671294.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/30456407.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/43635238.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/75427677.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/60633573.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/51121352.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/80237220.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/58739069.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/40293444.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/46482768.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/90842627.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/58891007.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/85673753.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/36957423.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/63416581.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/43682545.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/12911677.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/27480103.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/46201941.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/39895040.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/58071090.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/97721109.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/99720024.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/41347985.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/57287468.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/58052617.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/82046383.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/70513407.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/20933265.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/24137689.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/44710976.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/98087416.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/2296695.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/20876858.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/36754958.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/8224310.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/66144086.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/36997812.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/94912415.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/46883400.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/5424044.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/97024871.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/29077709.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/63745429.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/8802639.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/61168856.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/13431417.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/77343907.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/53725141.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/61394292.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/37811455.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/96847249.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/97167936.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/70637654.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/13261990.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/8579430.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/69715639.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/12452625.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/15057804.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/34872169.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/54260144.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/98764925.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/26910959.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/40154282.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/80472748.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/69254957.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/39436645.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/35736376.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/13777103.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/17161150.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/18020041.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/97809510.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/19341926.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/73013812.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/91059830.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/77122246.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/36177757.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/71255168.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/38292901.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/39724383.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/63510372.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/90132350.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/92195544.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/97754586.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/70234156.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/82616165.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/6465239.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/77455387.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/97308300.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/8734743.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/11411136.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/49924280.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/17626469.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/9514521.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/84847209.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/71190776.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/79498613.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/90186468.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/2280965.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/67909421.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/3507117.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/31285534.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/70129004.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/32561928.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/88388885.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/22827148.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/68179222.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/73356339.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/34936555.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/45691011.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/53341019.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/66355665.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/74158591.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/90480919.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/78069816.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/18364390.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/63343391.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/58089407.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/79295694.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/68550970.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/10120905.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/25253483.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/20525904.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/54814351.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/51936564.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/66305730.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/20217637.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/18376955.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/95473693.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/8022878.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/2548507.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/22567190.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/87097142.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/93640356.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/2625165.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/23572264.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/47201793.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/79634344.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/92474787.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/24045219.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/3332624.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/59313255.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/97385176.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/81333415.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/51074526.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/92274071.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/60737741.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/54248646.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/41732815.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/6850992.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/35591552.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/89161001.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/2790463.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/23733752.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/78701625.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/43446926.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/92410902.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/20626919.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/13265853.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/1082248.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/88052571.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/26218088.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/10229120.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/7025945.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/35564673.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/24593583.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/21019374.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/55629085.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/72073293.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/97577415.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/10815851.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/7342314.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/23905886.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/72522054.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/64530486.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/27603753.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/51133941.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/36136841.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/37997725.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/74640770.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/26758866.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/94819125.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/92509617.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/33071204.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/84115437.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/48994646.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/63274873.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/81832883.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/71478007.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/49799674.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/60690168.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/29963222.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/55824697.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/73197198.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/42745813.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/76000228.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/92599096.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/79098461.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/73231938.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/82183515.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/5875088.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/26252839.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/84980763.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/61973899.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/30275762.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/13751123.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/28242219.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/75988397.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/55074488.jpg" alt=""><br><img src="http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/51096235.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;它并不是我的花 我只是恰好途经了它的盛放&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;同步更新到分类-微世界&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/67923945.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/87724692.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/12485394.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/43890907.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/33553156.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/71478007.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/54986814.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/19144292.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/8199880.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7xubu6.com1.z0.glb.clouddn.com/16-5-21/22002353.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="摄影" scheme="http://liuhouer.github.io/categories/%E6%91%84%E5%BD%B1/"/>
    
    
      <category term="摄影" scheme="http://liuhouer.github.io/tags/%E6%91%84%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>日志维度分析以及自动邮件发送</title>
    <link href="http://liuhouer.github.io/2016/04/26/%E6%97%A5%E5%BF%97%E7%BB%B4%E5%BA%A6%E5%88%86%E6%9E%90%E4%BB%A5%E5%8F%8A%E8%87%AA%E5%8A%A8%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/"/>
    <id>http://liuhouer.github.io/2016/04/26/日志维度分析以及自动邮件发送/</id>
    <published>2016-04-26T07:41:15.000Z</published>
    <updated>2017-03-23T02:13:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="今天要统计下各种维度下的数据，访问量等等，写了几个方法，实现了维度分析，并将返回结果自动发送邮件到自定义邮箱"><a href="#今天要统计下各种维度下的数据，访问量等等，写了几个方法，实现了维度分析，并将返回结果自动发送邮件到自定义邮箱" class="headerlink" title="今天要统计下各种维度下的数据，访问量等等，写了几个方法，实现了维度分析，并将返回结果自动发送邮件到自定义邮箱"></a>今天要统计下各种维度下的数据，访问量等等，写了几个方法，实现了维度分析，并将返回结果自动发送邮件到自定义邮箱</h2><h3 id="主要实现类"><a href="#主要实现类" class="headerlink" title="主要实现类"></a>主要实现类</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</div><div class="line"><span class="keyword">try</span>&#123;</div><div class="line"></div><div class="line"><span class="built_in">List</span>&lt;trackVO&gt; tlist = <span class="keyword">new</span> ArrayList&lt;trackVO&gt;();</div><div class="line"><span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; list = ReadFile(<span class="string">"/Users/jeyy/Documents/test_pc.access.log.2016-04-25"</span>);</div><div class="line"><span class="comment">//System.out.println(JsonContext);</span></div><div class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</div><div class="line"></div><div class="line"><span class="comment">//System.out.println(list.get(i));</span></div><div class="line">trackVO model =  JsonUtil.jsonUtil.jsonToModel(list.<span class="keyword">get</span>(i), trackVO.<span class="keyword">class</span>);</div><div class="line">tlist.add(model);</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"> <span class="comment">//实现统计逻辑</span></div><div class="line"></div><div class="line"> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, Integer&gt; m = getCount(tlist,<span class="string">"pageUrl"</span>);</div><div class="line"></div><div class="line"></div><div class="line"> <span class="comment">//打印统计结果|发送邮件</span></div><div class="line"> <span class="built_in">String</span> rs = printMap(m);</div><div class="line"></div><div class="line"></div><div class="line"> EmailUtils.emailUtil.analyseLog(<span class="string">"test@qq.com"</span>, rs);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** * 读取文件返回string</span></div><div class="line"></div><div class="line">* <span class="doctag">@param</span> Path</div><div class="line">    * <span class="doctag">@return</span></div><div class="line">    */</div><div class="line">       <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">List</span>&lt;String&gt; ReadFile(String Path)&#123;</div><div class="line">        File file = <span class="keyword">new</span> File(Path);</div><div class="line">       <span class="keyword">List</span>&lt;String&gt; <span class="keyword">list</span> = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">       Scanner scanner = <span class="keyword">null</span>;</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">       scanner = <span class="keyword">new</span> Scanner(file, <span class="string">"utf-8"</span>);</div><div class="line">       <span class="keyword">while</span> (scanner.hasNextLine()) &#123;</div><div class="line">       StringBuilder buffer = <span class="keyword">new</span> StringBuilder();</div><div class="line">       buffer.append(scanner.nextLine());</div><div class="line">       <span class="keyword">list</span>.add(buffer.toString());</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">       <span class="comment">// TODO Auto-generated catch block </span></div><div class="line"></div><div class="line">       &#125; <span class="keyword">finally</span> &#123;</div><div class="line">       <span class="keyword">if</span> (scanner != <span class="keyword">null</span>) &#123;</div><div class="line">       scanner.close();</div><div class="line">       &#125;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">return</span> <span class="keyword">list</span>;</div><div class="line">       &#125;</div></pre></td></tr></table></figure>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** * 实现统计逻辑</span></div><div class="line"></div><div class="line">* @param tlist</div><div class="line">    */</div><div class="line">       public <span class="keyword">static</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>,Integer&gt; getCount(<span class="built_in">List</span>&lt;trackVO&gt; tlist,<span class="built_in">String</span> column) &#123;</div><div class="line">       <span class="built_in">Map</span>&lt;<span class="built_in">String</span>,Integer&gt; m = <span class="keyword">new</span> HashMap&lt;<span class="built_in">String</span>,Integer&gt;();</div><div class="line">       <span class="comment">//用word初使化m，m中包含了所有不重复的单词</span></div><div class="line">       <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;tlist.size();i++)&#123;</div><div class="line">       <span class="built_in">String</span> word  = <span class="string">""</span>;</div><div class="line">       word = caseColumn(tlist, column, i, word);</div><div class="line">       m.put(word,<span class="number">0</span>);</div><div class="line">       &#125;</div><div class="line">       <span class="built_in">Set</span>&lt;<span class="built_in">String</span>&gt; <span class="keyword">set</span> = m.keySet();</div><div class="line">       <span class="comment">//用word中的每个单词与m中的单词比较，发现相同的就统计一次   </span></div><div class="line">       <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;tlist.size();i++)&#123;</div><div class="line">       <span class="built_in">String</span> word = <span class="string">""</span>;</div><div class="line">       word = caseColumn(tlist, column, i, word);</div><div class="line">       <span class="built_in">Iterator</span>&lt;<span class="built_in">String</span>&gt; it = <span class="keyword">set</span>.iterator();</div><div class="line">       <span class="keyword">while</span>(it.hasNext())&#123;</div><div class="line">         <span class="built_in">String</span> k = it.next();</div><div class="line">         <span class="keyword">if</span>(word.equals(k))&#123;</div><div class="line">       <span class="built_in">int</span> c = m.<span class="keyword">get</span>(k);                 </div><div class="line">       c++;</div><div class="line">       m.put(word,c);</div><div class="line">       &#125;</div><div class="line">       &#125;                         </div><div class="line">       &#125;</div><div class="line">       m = sortMap(m);</div><div class="line"></div><div class="line">       <span class="comment">//System.out.println(m);</span></div><div class="line">       <span class="keyword">return</span> m;</div><div class="line">       &#125;</div></pre></td></tr></table></figure>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** * 根据column判断字段的取值</span></div><div class="line"></div><div class="line"> * @param tlist</div><div class="line">     * @param column</div><div class="line">     * @param i</div><div class="line">     * @param word</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">        <span class="keyword">public</span> static <span class="built_in">String</span> caseColumn(<span class="built_in">List</span>&lt;trackVO&gt; tlist, <span class="built_in">String</span> column, int i, <span class="built_in">String</span> word) &#123;</div><div class="line">        <span class="keyword">if</span>(<span class="string">"cookieId"</span>.<span class="keyword">equals</span>(column))&#123;</div><div class="line">        word = tlist.get(i).getCookieId();</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"currentTime"</span>.<span class="keyword">equals</span>(column))&#123;</div><div class="line">        word = tlist.get(i).getCurrentTime();</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"from"</span>.<span class="keyword">equals</span>(column))&#123;</div><div class="line">        word = tlist.get(i).getFrom();</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"ip"</span>.<span class="keyword">equals</span>(column))&#123;</div><div class="line">        word = tlist.get(i).getIp();</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"moudle"</span>.<span class="keyword">equals</span>(column))&#123;</div><div class="line">        word = tlist.get(i).getMoudle();</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"pageUrl"</span>.<span class="keyword">equals</span>(column))&#123;</div><div class="line">        word = tlist.get(i).getPageUrl();</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"spider"</span>.<span class="keyword">equals</span>(column))&#123;</div><div class="line">        word = tlist.get(i).getSpider();</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"userId"</span>.<span class="keyword">equals</span>(column))&#123;</div><div class="line">        word = tlist.get(i).getUserId();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> word;</div><div class="line">        &#125;</div><div class="line">    ----</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//Map根据value排序</span></div><div class="line">        <span class="keyword">public</span> static <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Integer</span>&gt; sortMap(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Integer</span>&gt; <span class="built_in">map</span>) &#123;</div><div class="line">        <span class="built_in">List</span>&lt;<span class="built_in">Map</span>.Entry&lt;<span class="built_in">String</span>, <span class="built_in">Integer</span>&gt;&gt; <span class="built_in">list</span> = <span class="literal">new</span> LinkedList&lt;<span class="built_in">Map</span>.Entry&lt;<span class="built_in">String</span>, <span class="built_in">Integer</span>&gt;&gt;(<span class="built_in">map</span>.entrySet());</div><div class="line">        Comparator&lt;<span class="built_in">Map</span>.Entry&lt;<span class="built_in">String</span>, <span class="built_in">Integer</span>&gt;&gt; c = <span class="literal">new</span> Comparator&lt;<span class="built_in">Map</span>.Entry&lt;<span class="built_in">String</span>, <span class="built_in">Integer</span>&gt;&gt;() &#123;</div><div class="line">        <span class="keyword">public</span> int compare(Entry&lt;<span class="built_in">String</span>, <span class="built_in">Integer</span>&gt; o1, Entry&lt;<span class="built_in">String</span>, <span class="built_in">Integer</span>&gt; o2) &#123;</div><div class="line">        <span class="keyword">return</span> -(o1.getValue() - o2.getValue()); <span class="comment">//倒序排列</span></div><div class="line">        &#125;</div><div class="line">        &#125;;</div><div class="line">        Collections.sort(<span class="built_in">list</span>, c);</div><div class="line">        <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Integer</span>&gt; result = <span class="literal">new</span> LinkedHashMap&lt;<span class="built_in">String</span>, <span class="built_in">Integer</span>&gt;();</div><div class="line"></div><div class="line">for (Iterator&lt;Entry&lt;<span class="built_in">String</span>, <span class="built_in">Integer</span>&gt;&gt; it = <span class="built_in">list</span>.iterator(); it.hasNext();) &#123;</div><div class="line"><span class="built_in">Map</span>.Entry&lt;<span class="built_in">String</span>, <span class="built_in">Integer</span>&gt; entry = (<span class="built_in">Map</span>.Entry&lt;<span class="built_in">String</span>, <span class="built_in">Integer</span>&gt;) it.next();</div><div class="line">result.put(entry.getKey(), entry.getValue());</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">//遍历<span class="type">Map</span>并且返回排版好的<span class="type">String</span>字符串</div><div class="line"></div><div class="line">public <span class="keyword">static</span> <span class="type">String</span> printMap(<span class="type">Map</span>&lt;<span class="type">String</span>, <span class="type">Integer</span>&gt; map) &#123;</div><div class="line"><span class="type">StringBuilder</span> sb = new <span class="type">StringBuilder</span>();</div><div class="line">sb.append(<span class="string">"&lt;html&gt;&lt;body&gt;&lt;p style=\"margin-left: 30px;\"&gt;&lt;font size=\"5\" color=\"rgb(216,206,178)\" &gt;日志分析&lt;/font&gt;&lt;/p&gt;"</span>);</div><div class="line"></div><div class="line">sb.append(<span class="string">"&lt;p style=\"background-color:rgb(163,210,202);margin-left: 30px;\"&gt;"</span>);</div><div class="line">sb.append(<span class="string">"统计"</span>+<span class="string">"||||"</span>+<span class="string">"次&lt;br&gt;"</span>);</div><div class="line">sb.append(<span class="string">"&lt;br&gt;"</span>);</div><div class="line"><span class="type">Iterator</span>&lt;<span class="type">Map</span>.<span class="type">Entry</span>&lt;<span class="type">String</span>, <span class="type">Integer</span>&gt;&gt; <span class="keyword">iterator</span> = map.entrySet().<span class="keyword">iterator</span>();</div><div class="line"><span class="keyword">while</span> (<span class="keyword">iterator</span>.hasNext()) &#123;</div><div class="line"><span class="type">Map</span>.<span class="type">Entry</span>&lt;<span class="type">String</span>, <span class="type">Integer</span>&gt; entry = <span class="keyword">iterator</span>.next();</div><div class="line">sb.append(entry.getKey()+<span class="string">"||||"</span>+entry.getValue().toString());</div><div class="line">sb.append(<span class="string">"&lt;br&gt;"</span>);</div><div class="line">//<span class="type">System</span>.<span class="keyword">out</span>.println(entry.getKey() + <span class="string">"----&gt;"</span> + entry.getValue().toString());</div><div class="line">&#125;</div><div class="line">sb.append(<span class="string">"----analysed by bruce----&lt;br/&gt;&lt;br/&gt;"</span> + <span class="string">"&lt;/p&gt;"</span> + <span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>);</div><div class="line"></div><div class="line"><span class="keyword">return</span> sb.toString();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="辅助实现方法"><a href="#辅助实现方法" class="headerlink" title="辅助实现方法"></a>辅助实现方法</h3><h4 id="trackVO"><a href="#trackVO" class="headerlink" title="trackVO"></a>trackVO</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> trackVO &#123;</div><div class="line"><span class="keyword">public</span> <span class="built_in">String</span> cookieId      ; <span class="comment">//         :9f7c9520f094e534c3313bf92405a56b</span></div><div class="line"><span class="keyword">public</span> <span class="built_in">String</span> currentTime   ; <span class="comment">//            :1461599856952</span></div><div class="line"><span class="keyword">public</span> <span class="built_in">String</span> <span class="keyword">from</span>          ; <span class="comment">//     :</span></div><div class="line"><span class="keyword">public</span> <span class="built_in">String</span> ip            ; <span class="comment">//   :111.206.241.76</span></div><div class="line"><span class="keyword">public</span> <span class="built_in">String</span> moudle        ; <span class="comment">//       :web_access</span></div><div class="line"><span class="keyword">public</span> <span class="built_in">String</span> pageUrl       ; <span class="comment">//        :www.test.com/</span></div><div class="line"><span class="keyword">public</span> <span class="built_in">String</span> spider        ; <span class="comment">//       :false</span></div><div class="line"><span class="keyword">public</span> <span class="built_in">String</span> userId        ; <span class="comment">//       :</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="built_in">String</span> getCookieId() &#123;</div><div class="line"><span class="keyword">return</span> cookieId;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="built_in">void</span> setCookieId(<span class="built_in">String</span> cookieId) &#123;</div><div class="line"><span class="keyword">this</span>.cookieId = cookieId;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="built_in">String</span> getCurrentTime() &#123;</div><div class="line"><span class="keyword">return</span> currentTime;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="built_in">void</span> setCurrentTime(<span class="built_in">String</span> currentTime) &#123;</div><div class="line"><span class="keyword">this</span>.currentTime = currentTime;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="built_in">String</span> getFrom() &#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">from</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="built_in">void</span> setFrom(<span class="built_in">String</span> <span class="keyword">from</span>) &#123;</div><div class="line"><span class="keyword">this</span>.from = <span class="keyword">from</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="built_in">String</span> getIp() &#123;</div><div class="line"><span class="keyword">return</span> ip;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="built_in">void</span> setIp(<span class="built_in">String</span> ip) &#123;</div><div class="line"><span class="keyword">this</span>.ip = ip;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="built_in">String</span> getMoudle() &#123;</div><div class="line"><span class="keyword">return</span> moudle;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="built_in">void</span> setMoudle(<span class="built_in">String</span> moudle) &#123;</div><div class="line"><span class="keyword">this</span>.moudle = moudle;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="built_in">String</span> getPageUrl() &#123;</div><div class="line"><span class="keyword">return</span> pageUrl;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="built_in">void</span> setPageUrl(<span class="built_in">String</span> pageUrl) &#123;</div><div class="line"><span class="keyword">this</span>.pageUrl = pageUrl;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="built_in">String</span> getSpider() &#123;</div><div class="line"><span class="keyword">return</span> spider;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="built_in">void</span> setSpider(<span class="built_in">String</span> spider) &#123;</div><div class="line"><span class="keyword">this</span>.spider = spider;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="built_in">String</span> getUserId() &#123;</div><div class="line"><span class="keyword">return</span> userId;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="built_in">void</span> setUserId(<span class="built_in">String</span> userId) &#123;</div><div class="line"><span class="keyword">this</span>.userId = userId;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="EmailUtils"><a href="#EmailUtils" class="headerlink" title="EmailUtils"></a>EmailUtils</h4><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> class EmailUtils &#123;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Logger <span class="built_in">log</span> =LoggerFactory.getLogger(EmailUtils.class);</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> EmailUtils emailUtil = <span class="keyword">new</span> EmailUtils();</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">日志分析auto发送</div><div class="line"></div><div class="line">    @param toEmail</div><div class="line">    @param usrId</div><div class="line">    @param authCode</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> analyseLog(<span class="keyword">String</span> toEmail,<span class="keyword">String</span> cont) &#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line"><span class="keyword">String</span> host = <span class="string">"smtp.163.com"</span>;</div><div class="line"><span class="keyword">String</span> myEmail = <span class="string">"test@163.com"</span>;</div><div class="line"><span class="keyword">String</span> myName = <span class="string">"小布"</span>;</div><div class="line"><span class="keyword">String</span> myPassword = Base64Util.JIEMI(<span class="string">"MTM0ODM3MjQwNTEwMDAwMDA="</span>);</div><div class="line"><span class="comment">// 接收者邮箱</span></div><div class="line"><span class="keyword">String</span> to = toEmail;</div><div class="line"><span class="keyword">String</span> subject = <span class="string">"日志分析"</span>;</div><div class="line"><span class="keyword">String</span> mailConent = <span class="string">"日志分析"</span>;</div><div class="line"></div><div class="line">HtmlEmail email = <span class="keyword">new</span> HtmlEmail();</div><div class="line">email.setAuthentication(myEmail, myPassword);</div><div class="line">email.setHostName(host);</div><div class="line">email.addTo(to, <span class="string">"亲"</span>);</div><div class="line">email.setFrom(myEmail);</div><div class="line">email.setSubject(subject);</div><div class="line"><span class="comment">// 注意，发送内容时，后面这段会让中文正常显示，否则乱码</span></div><div class="line">email.setCharset(<span class="string">"utf-8"</span>);</div><div class="line">email.setHtmlMsg(cont); <span class="comment">/* 邮件内容 */</span></div><div class="line"><span class="comment">// 添加附件对象</span></div><div class="line"><span class="comment">// email.attach(attachment);</span></div><div class="line"><span class="comment">// 发送</span></div><div class="line">email.send();</div><div class="line">System.err.<span class="built_in">println</span>(<span class="string">"邮件发送成功"</span>);</div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"><span class="comment">// <span class="doctag">TODO:</span> handle exception</span></div><div class="line">e.printStackTrace();</div><div class="line">System.err.<span class="built_in">println</span>(<span class="string">"邮件发送失败"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h3><p><img src="http://7xpfpd.com1.z0.glb.clouddn.com/post_/analyselog.png" alt="enter description here"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;今天要统计下各种维度下的数据，访问量等等，写了几个方法，实现了维度分析，并将返回结果自动发送邮件到自定义邮箱&quot;&gt;&lt;a href=&quot;#今天要统计下各种维度下的数据，访问量等等，写了几个方法，实现了维度分析，并将返回结果自动发送邮件到自定义邮箱&quot; class=&quot;headerlink&quot; title=&quot;今天要统计下各种维度下的数据，访问量等等，写了几个方法，实现了维度分析，并将返回结果自动发送邮件到自定义邮箱&quot;&gt;&lt;/a&gt;今天要统计下各种维度下的数据，访问量等等，写了几个方法，实现了维度分析，并将返回结果自动发送邮件到自定义邮箱&lt;/h2&gt;&lt;h3 id=&quot;主要实现类&quot;&gt;&lt;a href=&quot;#主要实现类&quot; class=&quot;headerlink&quot; title=&quot;主要实现类&quot;&gt;&lt;/a&gt;主要实现类&lt;/h3&gt;&lt;figure class=&quot;highlight dart&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;public &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; main(&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;[] args) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;List&lt;/span&gt;&amp;lt;trackVO&amp;gt; tlist = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;trackVO&amp;gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;&amp;gt; list = ReadFile(&lt;span class=&quot;string&quot;&gt;&quot;/Users/jeyy/Documents/test_pc.access.log.2016-04-25&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//System.out.println(JsonContext);&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; list.size(); i++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//System.out.println(list.get(i));&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;trackVO model =  JsonUtil.jsonUtil.jsonToModel(list.&lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;(i), trackVO.&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;tlist.add(model);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;//实现统计逻辑&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;Map&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;, Integer&amp;gt; m = getCount(tlist,&lt;span class=&quot;string&quot;&gt;&quot;pageUrl&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;//打印统计结果|发送邮件&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt; rs = printMap(m);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; EmailUtils.emailUtil.analyseLog(&lt;span class=&quot;string&quot;&gt;&quot;test@qq.com&quot;&lt;/span&gt;, rs);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt;(Exception e)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;e.printStackTrace();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="java" scheme="http://liuhouer.github.io/categories/java/"/>
    
    
      <category term="java" scheme="http://liuhouer.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>nodejs规范工具grunt</title>
    <link href="http://liuhouer.github.io/2016/04/11/Nodejs%E8%A7%84%E8%8C%83%E5%B7%A5%E5%85%B7-grunt/"/>
    <id>http://liuhouer.github.io/2016/04/11/Nodejs规范工具-grunt/</id>
    <published>2016-04-11T10:41:10.000Z</published>
    <updated>2017-03-23T02:13:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一个应用开发到一定阶段，普遍会遇到一个问题。当功能越来越多，代码量越来越大，bug修复越来越频繁，开发人员一波一波的交替，…..应该用会向着越来越不可控发展。我们不能再准确估计新功能的开发时间，也不知道一个bug修复后是否会引发另一个bug出现。所有的程序开发，都会面临着这样的问题。</p>
<p>C/C++程序通过makefile管理编译测试打包的过程，Java程序通过Maven,Ant实现项目构建管理功能，Python有pip，Ruby有gem。在Nodejs的领域，我们同样需要一个项目构建工具，这就是Grunt。Grunt可以执行像压缩, 编译, 单元测试, 代码检查以及打包发布的任务。</p>
<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul>
<li>Grunt介绍</li>
<li>Grunt安装</li>
<li>Grunt使用</li>
<li>Grunt常用插件：<br>1).grunt-contrib-uglify：压缩js代码<br>2).grunt-contrib-concat：合并js文件<br>3).grunt-contrib-qunit：单元测试<br>4).grunt-contrib-jshint：js代码检查<br>5).grunt-contrib-watch：文件监控</li>
</ul>
<h2 id="1-Grunt介绍"><a href="#1-Grunt介绍" class="headerlink" title="1.Grunt介绍"></a>1.Grunt介绍</h2><p>Grunt是一个自动化的项目构建工具. 如果你需要重复的执行像压缩, 编译, 单元测试, 代码检查以及打包发布的任务. 那么你可以使用Grunt来处理这些任务, 你所需要做的只是配置好Grunt, 这样能很大程度的简化你的工作.</p>
<p>如果在团队中使用Grunt, 你只需要与其他人员约定好使用Grunt应该规避的问题, 就能够很方便的自动化的处理大部分的常见工作任务, 你所付出的努力几乎为0.</p>
<p><img src="http://7xpfpd.com1.z0.glb.clouddn.com/post.adbbde95-83cf-4f20-95ad-353123b4f3e7.jpg" alt=""></p>
<a id="more"></a>    
<h2 id="2-Grunt安装"><a href="#2-Grunt安装" class="headerlink" title="2. Grunt安装"></a>2. Grunt安装</h2><p>Grunt和Grunt插件都是通过npm, Node.js包管理器安装和管理的.</p>
<p>我的系统环境</p>
<p>win7 64bit<br>Nodejs:v0.10.5<br>Npm:1.2.19<br>    ~ D:\workspace\javascript&gt;node -v<br>    v0.10.5</p>
<pre><code>~ D:\workspace\javascript&gt;npm -v
1.2.19
</code></pre><p>在系统中，我们已经安装好了Nodejs和npm。win7安装nodejs请参考文章：Nodejs开发框架Express3.0开发手记–从零开始</p>
<p>安装grunt-cli<br>grunt-cli并不grunt，grunt-cli的作用是管理本地各版本的grunt，让命令行可以直接执行grunt命令。</p>
<p>下面全局安装grunt-cli(-g)</p>
<pre><code>~ D:\workspace\javascript&gt;npm install -g grunt-cli

D:\toolkit\nodejs\grunt -&gt; D:\toolkit\nodejs\node_modules\grunt-cli\bin\grunt
grunt-cli@0.1.9 D:\toolkit\nodejs\node_modules\grunt-cli
├── resolve@0.3.1
├── nopt@1.0.10 (abbrev@1.0.4)
└── findup-sync@0.1.2 (lodash@1.0.1, glob@3.1.21)
</code></pre><p>我们看到grunt-cli似乎做了一个软件链接，把grunt脚本复制到nodejs安装根目录里。</p>
<p>接下来全局安装grunt</p>
<pre><code>~ D:\workspace\javascript&gt;npm install -g grunt

~ D:\workspace\javascript&gt;grunt
grunt-cli: The grunt command line interface. (v0.1.9)

Fatal error: Unable to find local grunt.

If you&apos;re seeing this message, either a Gruntfile wasn&apos;t found or grunt
hasn&apos;t been installed locally to your project. For more information about
installing and configuring grunt, please see the Getting Started guide:

http://gruntjs.com/getting-started
</code></pre><p>执行grunt命令，我们发现系统报错了，提示不能加载本地库。因为，grunt命令执行，是需要当前目录中包括package.json和Gruntfile.js两个文件。</p>
<p>package.json，是npm项目配置文件<br>Gruntfile.js，是专门用来配置grunt的配置文件</p>
<p>接下来，我们创建一个express3的项目。</p>
<p> D:\workspace\javascript&gt;express -e nodejs-grunt<br> D:\workspace\javascript&gt;cd nodejs-grunt &amp;&amp; npm install<br> D:\workspace\javascript\nodejs-grunt&gt;npm install grunt –save-dev<br>安装-save-dev，就可以，直接把grunt作为devDependencies写入的package.json中。</p>
<pre><code>~ vi package.json

{
  &quot;name&quot;: &quot;nodejs-grunt&quot;,
  &quot;version&quot;: &quot;0.0.1&quot;,
  &quot;private&quot;: true,
  &quot;scripts&quot;: {
&quot;start&quot;: &quot;node app.js&quot;
  },
  &quot;dependencies&quot;: {
&quot;express&quot;: &quot;3.2.2&quot;,
&quot;ejs&quot;: &quot;*&quot;
  },
  &quot;devDependencies&quot;: {
&quot;grunt&quot;: &quot;~0.4.1&quot;,
  }
}
</code></pre><p>然后，我们再执行grunt，系统提示缺少Gruntfile文件</p>
<pre><code>~ D:\workspace\javascript\nodejs-grunt&gt;grunt
A valid Gruntfile could not be found. Please see the getting started guide for
more information on how to configure grunt: http://gruntjs.com/getting-started
Fatal error: Unable to find Gruntfile.
</code></pre><p>创建Gruntfile文件</p>
<pre><code>~ vi Gruntfile.js

module.exports = function(grunt) {
  // Project configuration.
  grunt.initConfig({
pkg: grunt.file.readJSON(&apos;package.json&apos;),
uglify: {
  options: {
banner: &apos;/*! &lt;%= pkg.name %&gt; &lt;%= grunt.template.today(&quot;yyyy-mm-dd&quot;) %&gt; */\n&apos;
  },
  build: {
src: &apos;src/&lt;%= pkg.name %&gt;.js&apos;,
dest: &apos;build/&lt;%= pkg.name %&gt;.min.js&apos;
  }
}
  });
  // Load the plugin that provides the &quot;uglify&quot; task.
  grunt.loadNpmTasks(&apos;grunt-contrib-uglify&apos;);
  // Default task(s).
  grunt.registerTask(&apos;default&apos;, [&apos;uglify&apos;]);
};
</code></pre><p>再次运行grunt，这时提示是grunt-contrib-uglify包找不到，是Gruntfile.js配置文件中的错误了。</p>
<pre><code>~ D:\workspace\javascript\nodejs-grunt&gt;grunt
</code></pre><blockquote>
<blockquote>
<pre><code>Local Npm module &quot;grunt-contrib-uglify&quot; not found. Is it installed?
Warning: Task &quot;uglify&quot; not found. Use --force to continue.
</code></pre><p>我们编辑package.js, 在devDependencies中增加grunt-contrib-uglify的依赖库</p>
</blockquote>
</blockquote>
<pre><code>~ vi package.js
{
  &quot;name&quot;: &quot;application-name&quot;,
  &quot;version&quot;: &quot;0.0.1&quot;,
  &quot;private&quot;: true,
  &quot;scripts&quot;: {
&quot;start&quot;: &quot;node app.js&quot;
  },
  &quot;dependencies&quot;: {
&quot;express&quot;: &quot;3.2.2&quot;,
&quot;ejs&quot;: &quot;*&quot;
  },
  &quot;devDependencies&quot;: {
&quot;grunt&quot;: &quot;~0.4.1&quot;
&quot;grunt-contrib-uglify&quot;: &quot;~0.1.1&quot;
  }
}

~ D:\workspace\javascript\nodejs-grunt&gt;npm install
</code></pre><p>我们创建两个目录src和build，和nodejs-grunt.js的文件</p>
<pre><code>~ D:\workspace\javascript\nodejs-grunt&gt;mkdir src
~ D:\workspace\javascript\nodejs-grunt&gt;mkdir build

~ D:\workspace\javascript\nodejs-grunt&gt;vi src/nodejs-grunt.js
var sayHello = function(name){
return &quot;Hello &quot; + name;
}
</code></pre><p>我们再执行grunt</p>
<pre><code>~ D:\workspace\javascript\nodejs-grunt&gt;grunt
Running &quot;uglify:build&quot; (uglify) task
File &quot;build/nodejs-grunt.min.js&quot; created.
Uncompressed size: 59 bytes.
Compressed size: 40 bytes gzipped (43 bytes minified).

Done, without errors.
</code></pre><p>grunt运行正常，并且执行了uglify:build的任务。打开build/nodejs-grunt.min.js文件</p>
<pre><code>~ D:\workspace\javascript\nodejs-grunt&gt;vi build/nodejs-grunt.min.js

/*! nodejs-grunt 2013-08-17 */
var sayHello=function(l){return&quot;Hello &quot;+l};
</code></pre><p>我们可以看到一个新生成的压缩文件nodejs-grunt.min.js。</p>
<p>上面的例子，是一个js文件压缩的例子。</p>
<h2 id="3-Grunt使用"><a href="#3-Grunt使用" class="headerlink" title="3.  Grunt使用"></a>3.  Grunt使用</h2><p>我们可以通过help帮助，看一下grunt怎么用。</p>
<pre><code>~ D:\workspace\javascript\nodejs-grunt&gt;grunt --help
Grunt: The JavaScript Task Runner (v0.4.1)

Usage
 grunt [options] [task [task ...]]

Options
--help, -h  Display this help text.
--base  Specify an alternate base path. By default, all file paths are
relative to the Gruntfile. (grunt.file.setBase) *
--no-color  Disable colored output.
   --gruntfile  Specify an alternate Gruntfile. By default, grunt looks in the
current or parent directories for the nearest Gruntfile.js or
Gruntfile.coffee file.
   --debug, -d  Enable debugging mode for tasks that support it.
   --stack  Print a stack trace when exiting with a warning or fatal error.
   --force, -f  A way to force your way past warnings. Want a suggestion? Don&apos;t
use this option, fix your code.
   --tasks  Additional directory paths to scan for task and &quot;extra&quot; files.
(grunt.loadTasks) *
 --npm  Npm-installed grunt plugins to scan for task and &quot;extra&quot; files.
(grunt.loadNpmTasks) *
--no-write  Disable writing files (dry run).
 --verbose, -v  Verbose mode. A lot more information output.
 --version, -V  Print the grunt version. Combine with --verbose for more info.
  --completion  Output shell auto-completion rules. See the grunt-cli
documentation for more information.

Options marked with * have methods exposed via the grunt API and should instead
be specified inside the Gruntfile wherever possible.

Available tasks
uglify  Minify files with UglifyJS. *
   default  Alias for &quot;uglify&quot; task.

Tasks run in the order specified. Arguments may be passed to tasks that accept
them by using colons, like &quot;lint:files&quot;. Tasks marked with * are &quot;multi tasks&quot;
and will iterate over all sub-targets if no argument is specified.

The list of available tasks may change based on tasks directories or grunt
plugins specified in the Gruntfile or via command-line options.

For more information, see http://gruntjs.com/
</code></pre><p><strong>有两方面是我们需要注意的：</strong></p>
<ul>
<li>Options: grunt支持的命令</li>
<li><p>Available tasks: 当目录可执行的任务</p>
<h2 id="4-Grunt常用插件"><a href="#4-Grunt常用插件" class="headerlink" title="4.  Grunt常用插件"></a>4.  Grunt常用插件</h2></li>
<li><p>grunt-contrib-uglify：压缩js代码</p>
</li>
<li>grunt-contrib-concat：合并js文件</li>
<li>grunt-contrib-qunit：单元测试</li>
<li>grunt-contrib-jshint：js代码检查</li>
<li>grunt-contrib-watch：监控文件修改并重新执行注册的任务<h4 id="1-grunt-contrib-uglify：是执行压缩JS代码的任务"><a href="#1-grunt-contrib-uglify：是执行压缩JS代码的任务" class="headerlink" title="1). grunt-contrib-uglify：是执行压缩JS代码的任务"></a>1). grunt-contrib-uglify：是执行压缩JS代码的任务</h4>具体操作请查看”2.Grunt安装”，</li>
</ul>
<h4 id="2-grunt-contrib-concat：是执行合并文件的任务。"><a href="#2-grunt-contrib-concat：是执行合并文件的任务。" class="headerlink" title="2). grunt-contrib-concat：是执行合并文件的任务。"></a>2). grunt-contrib-concat：是执行合并文件的任务。</h4><p>插件安装及更新到配置</p>
<p> D:\workspace\javascript\nodejs-grunt&gt;npm install grunt-contrib-concat –save-dev<br>修改Gruntfile.js文件</p>
<pre><code>grunt.initConfig({
pkg: grunt.file.readJSON(&apos;package.json&apos;),
concat:{
  options: {
//定义一个字符串插入没个文件之间用于连接输出
separator: &apos;;&apos;
  },
  dist: {
  src: [&apos;src/*.js&apos;],
  dest: &apos;build/&lt;%= pkg.name %&gt;.cat.js&apos;
  }
},
  });
grunt.loadNpmTasks(&apos;grunt-contrib-qunit&apos;);
grunt.registerTask(&apos;default&apos;, [&apos;uglify&apos;,&apos;concat&apos;]);
</code></pre><p>在src目录，新增加文件src/sayBye.js</p>
<pre><code>~ vi src/sayBye.js

var sayBye = function(name){
return &quot;Bye &quot; + name;
}
</code></pre><p>执行concat任务</p>
<pre><code>~ D:\workspace\javascript\nodejs-grunt&gt;grunt concat
Running &quot;concat:dist&quot; (concat) task
File &quot;build/nodejs-grunt.cat.js&quot; created.

Done, without errors.
</code></pre><p>查看生成的文件build/nodejs-grunt.cat.js</p>
<pre><code>~ vi build/nodejs-grunt.cat.js

var sayHello = function(name){
return &quot;Hello &quot; + name;
};var sayBye = function(name){
return &quot;Bye &quot; + name;
}
</code></pre><p>两个文件完全的合并。</p>
<h4 id="3-grunt-contrib-qunit：是执行QUint单元测试的任务。"><a href="#3-grunt-contrib-qunit：是执行QUint单元测试的任务。" class="headerlink" title="3). grunt-contrib-qunit：是执行QUint单元测试的任务。"></a>3). grunt-contrib-qunit：是执行QUint单元测试的任务。</h4><p>插件安装及更新到配置</p>
<p> D:\workspace\javascript\nodejs-grunt&gt;npm install grunt-contrib-qunit –save-dev<br>修改Gruntfile.js文件</p>
<pre><code>grunt.initConfig({
pkg: grunt.file.readJSON(&apos;package.json&apos;),
qunit: {
  files: [&apos;test/*.html&apos;]
}
  });
grunt.loadNpmTasks(&apos;grunt-contrib-qunit&apos;);
grunt.registerTask(&apos;default&apos;, [&apos;uglify&apos;,&apos;concat&apos;,&apos;qunit&apos;]);
</code></pre><p>创建一个test目录，并编写用于测试的qunit.html文件</p>
<pre><code>~ mkdir test
~ vi test/qunit.html
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;http://github.com/jquery/qunit/raw/master/qunit/qunit.css&quot; type=&quot;text/css&quot; media=&quot;screen&quot; /&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;http://github.com/jquery/qunit/raw/master/qunit/qunit.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
test(&quot;hello&quot;, function() {
ok(true, &quot;world&quot;);
});
&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1 id=&quot;qunit-header&quot;&gt;QUnit example&lt;/h1&gt;
&lt;h2 id=&quot;qunit-banner&quot;&gt;&lt;/h2&gt;
&lt;h2 id=&quot;qunit-userAgent&quot;&gt;&lt;/h2&gt;
&lt;ol id=&quot;qunit-tests&quot;&gt;&lt;/ol&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><p>执行qunit命令</p>
<pre><code>~ D:\workspace\javascript\nodejs-grunt&gt;grunt qunit
Running &quot;qunit:files&quot; (qunit) task
Testing test/qunit.html .OK
</code></pre><blockquote>
<blockquote>
<pre><code>1 assertions passed (67ms)
</code></pre></blockquote>
</blockquote>
<pre><code>Done, without errors.
</code></pre><p>完成单元测试！！</p>
<h4 id="4-grunt-contrib-jshint：是执行代码验证的任务"><a href="#4-grunt-contrib-jshint：是执行代码验证的任务" class="headerlink" title="4). grunt-contrib-jshint：是执行代码验证的任务"></a>4). grunt-contrib-jshint：是执行代码验证的任务</h4><p>插件安装及更新到配置</p>
<pre><code>~ D:\workspace\javascript\nodejs-grunt&gt;npm install grunt-contrib-jshint --save-dev
</code></pre><p>修改Gruntfile.js文件</p>
<pre><code>grunt.initConfig({
pkg: grunt.file.readJSON(&apos;package.json&apos;),
jshint: {
files: [&apos;gruntfile.js&apos;, &apos;src/*.js&apos;, &apos;build/*.js&apos;],
options: {
globals: {
exports: true
}
}
}
  });
grunt.loadNpmTasks(&apos;grunt-contrib-jshint&apos;);
grunt.registerTask(&apos;default&apos;, [&apos;uglify&apos;,&apos;concat&apos;,&apos;qunit&apos;,&apos;jshint&apos;]);
</code></pre><p>执行jshint代码检查</p>
<pre><code>~ D:\workspace\javascript\nodejs-grunt&gt;grunt jshint
Running &quot;jshint:files&quot; (jshint) task
Linting src/nodejs-grunt.js ...ERROR
[L3:C2] W033: Missing semicolon.
}
Linting build/nodejs-grunt.cat.js ...ERROR
[L5:C2] W033: Missing semicolon.
}
Linting build/nodejs-grunt.min.js ...ERROR
[L2:C42] W033: Missing semicolon.
var sayHello=function(l){return&quot;Hello &quot;+l};

Warning: Task &quot;jshint:files&quot; failed. Use --force to continue.

Aborted due to warnings.
</code></pre><p>好多的错误啊，细看一下，都是”丢失分号”的错误。</p>
<pre><code>~ vi src/sayBye.js
var sayBye = function(name){
return &quot;Bye &quot; + name;
};
</code></pre><p>增加最后一行的分号，解决上面的错误。</p>
<h4 id="5-grunt-contrib-watch，是监控指定文件被修改，重新启动已注册的任务"><a href="#5-grunt-contrib-watch，是监控指定文件被修改，重新启动已注册的任务" class="headerlink" title="5). grunt-contrib-watch，是监控指定文件被修改，重新启动已注册的任务"></a>5). grunt-contrib-watch，是监控指定文件被修改，重新启动已注册的任务</h4><p>我感觉这个插入，就点类似于supervisor的功能。</p>
<p>插件安装及更新到配置</p>
<pre><code>~ D:\workspace\javascript\nodejs-grunt&gt;npm install grunt-contrib-watch --save-dev
</code></pre><p>修改Gruntfile.js文件</p>
<pre><code>grunt.initConfig({
pkg: grunt.file.readJSON(&apos;package.json&apos;),
watch: {
files: [&apos;&lt;%= jshint.files %&gt;&apos;],
tasks: [&apos;jshint&apos;, &apos;qunit&apos;]
}
  });
grunt.loadNpmTasks(&apos;grunt-contrib-watch&apos;);
grunt.registerTask(&apos;default&apos;, [&apos;uglify&apos;,&apos;concat&apos;,&apos;qunit&apos;,&apos;jshint&apos;]);
</code></pre><p>执行watch任务</p>
<pre><code>~ D:\workspace\javascript\nodejs-grunt&gt;grunt watch
Running &quot;watch&quot; task
Waiting...OK
</code></pre><p><strong><em>手动修改src/sayBye.js文件，下面watch的任务被触发</em></strong></p>
<blockquote>
<blockquote>
<pre><code>File &quot;src\sayBye.js&quot; changed.
</code></pre></blockquote>
</blockquote>
<pre><code>Running &quot;jshint:files&quot; (jshint) task
Linting src/sayBye.js ...ERROR
[L3:C2] W033: Missing semicolon.
}
Linting build/nodejs-grunt.cat.js ...ERROR
[L3:C3] W032: Unnecessary semicolon.
};;var sayBye = function(name){
Linting build/nodejs-grunt.min.js ...ERROR
[L2:C42] W033: Missing semicolon.
var sayHello=function(l){return&quot;Hello &quot;+l};

Warning: Task &quot;jshint:files&quot; failed. Use --force to continue.

Aborted due to warnings.
Completed in 0.770s at Sat Aug 17 2013 20:49:15 GMT+0800 (中国标准时间) - Waiting...
</code></pre><p>上面介绍的5个任务，可能是我们比较常用配置的任务，大家也可以按照需要指定自己的任务。</p>
<p>下面贴上所最终的package.json和Gruntfile.js文件代码</p>
<pre><code>package.json


{
  &quot;name&quot;: &quot;nodejs-grunt&quot;,
  &quot;version&quot;: &quot;0.0.1&quot;,
  &quot;private&quot;: true,
  &quot;scripts&quot;: {
&quot;start&quot;: &quot;node app.js&quot;
  },
  &quot;dependencies&quot;: {
&quot;express&quot;: &quot;3.2.2&quot;,
&quot;ejs&quot;: &quot;*&quot;
  },
  &quot;devDependencies&quot;: {
&quot;grunt&quot;: &quot;~0.4.1&quot;,
&quot;grunt-contrib-uglify&quot;: &quot;~0.1.1&quot;,
&quot;grunt-contrib-concat&quot;: &quot;~0.3.0&quot;,
&quot;grunt-contrib-qunit&quot;: &quot;~0.2.2&quot;,
&quot;grunt-contrib-jshint&quot;: &quot;~0.6.3&quot;,
&quot;grunt-contrib-watch&quot;: &quot;~0.5.2&quot;
  }
}
Gruntfile.js


module.exports = function(grunt) {

  // Project configuration.
  grunt.initConfig({
pkg: grunt.file.readJSON(&apos;package.json&apos;),
uglify: {
  options: {
banner: &apos;/*! &lt;%= pkg.name %&gt; &lt;%= grunt.template.today(&quot;yyyy-mm-dd&quot;) %&gt; */\n&apos;
  },
  build: {
src: &apos;src/&lt;%= pkg.name %&gt;.js&apos;,
dest: &apos;build/&lt;%= pkg.name %&gt;.min.js&apos;
  }
},
concat:{
  options: {
//定义一个字符串插入没个文件之间用于连接输出
separator: &apos;;&apos;
  },
  dist: {
  src: [&apos;src/*.js&apos;],
  dest: &apos;build/&lt;%= pkg.name %&gt;.cat.js&apos;
  }
},
qunit: {
  files: [&apos;test/*.html&apos;]
},
jshint: {
files: [&apos;gruntfile.js&apos;, &apos;src/*.js&apos;, &apos;build/*.js&apos;],
options: {
globals: {
exports: true
}
}
},
watch: {
files: [&apos;&lt;%= jshint.files %&gt;&apos;],
tasks: [&apos;jshint&apos;, &apos;qunit&apos;]
}
  });

  grunt.loadNpmTasks(&apos;grunt-contrib-uglify&apos;);
  grunt.loadNpmTasks(&apos;grunt-contrib-concat&apos;);
  grunt.loadNpmTasks(&apos;grunt-contrib-qunit&apos;);
  grunt.loadNpmTasks(&apos;grunt-contrib-jshint&apos;);
  grunt.loadNpmTasks(&apos;grunt-contrib-watch&apos;);

  // Default task(s).
  grunt.registerTask(&apos;default&apos;, [&apos;uglify&apos;,&apos;concat&apos;,&apos;qunit&apos;,&apos;jshint&apos;]);

};
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;一个应用开发到一定阶段，普遍会遇到一个问题。当功能越来越多，代码量越来越大，bug修复越来越频繁，开发人员一波一波的交替，…..应该用会向着越来越不可控发展。我们不能再准确估计新功能的开发时间，也不知道一个bug修复后是否会引发另一个bug出现。所有的程序开发，都会面临着这样的问题。&lt;/p&gt;
&lt;p&gt;C/C++程序通过makefile管理编译测试打包的过程，Java程序通过Maven,Ant实现项目构建管理功能，Python有pip，Ruby有gem。在Nodejs的领域，我们同样需要一个项目构建工具，这就是Grunt。Grunt可以执行像压缩, 编译, 单元测试, 代码检查以及打包发布的任务。&lt;/p&gt;
&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Grunt介绍&lt;/li&gt;
&lt;li&gt;Grunt安装&lt;/li&gt;
&lt;li&gt;Grunt使用&lt;/li&gt;
&lt;li&gt;Grunt常用插件：&lt;br&gt;1).grunt-contrib-uglify：压缩js代码&lt;br&gt;2).grunt-contrib-concat：合并js文件&lt;br&gt;3).grunt-contrib-qunit：单元测试&lt;br&gt;4).grunt-contrib-jshint：js代码检查&lt;br&gt;5).grunt-contrib-watch：文件监控&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;1-Grunt介绍&quot;&gt;&lt;a href=&quot;#1-Grunt介绍&quot; class=&quot;headerlink&quot; title=&quot;1.Grunt介绍&quot;&gt;&lt;/a&gt;1.Grunt介绍&lt;/h2&gt;&lt;p&gt;Grunt是一个自动化的项目构建工具. 如果你需要重复的执行像压缩, 编译, 单元测试, 代码检查以及打包发布的任务. 那么你可以使用Grunt来处理这些任务, 你所需要做的只是配置好Grunt, 这样能很大程度的简化你的工作.&lt;/p&gt;
&lt;p&gt;如果在团队中使用Grunt, 你只需要与其他人员约定好使用Grunt应该规避的问题, 就能够很方便的自动化的处理大部分的常见工作任务, 你所付出的努力几乎为0.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpfpd.com1.z0.glb.clouddn.com/post.adbbde95-83cf-4f20-95ad-353123b4f3e7.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="nodejs" scheme="http://liuhouer.github.io/categories/nodejs/"/>
    
      <category term="grunt" scheme="http://liuhouer.github.io/categories/nodejs/grunt/"/>
    
    
      <category term="nodejs" scheme="http://liuhouer.github.io/tags/nodejs/"/>
    
      <category term="grunt" scheme="http://liuhouer.github.io/tags/grunt/"/>
    
  </entry>
  
</feed>
